
SLMS-L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001504  08010f28  08010f28  00020f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801242c  0801242c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801242c  0801242c  0002242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012434  08012434  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012434  08012434  00022434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012438  08012438  00022438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801243c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000255c  200001e8  08012620  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002744  08012620  00032744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b42e  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005089  00000000  00000000  0005b642  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  000606d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a98  00000000  00000000  00062408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b408  00000000  00000000  00063ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d003  00000000  00000000  0008f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6597  00000000  00000000  000ac2ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a2842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ed4  00000000  00000000  001a28c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010f0c 	.word	0x08010f0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08010f0c 	.word	0x08010f0c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <DENSORAM_Init>:
uint8_t packet_trigger = 0;
uint8_t ram_tx[129] = { 0 };
uint8_t dbg[32];


void DENSORAM_Init(UART_HandleTypeDef *huart) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	UartRam = huart;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <DENSORAM_Init+0x24>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
	USART_RAM = huart->Instance;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <DENSORAM_Init+0x28>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000da8 	.word	0x20000da8
 8000fe0:	20000cf0 	.word	0x20000cf0

08000fe4 <DENSORAM_RxITEnable>:

void DENSORAM_RxITEnable(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_BUSY)){};
 8000fe8:	bf00      	nop
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <DENSORAM_RxITEnable+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff8:	d0f7      	beq.n	8000fea <DENSORAM_RxITEnable+0x6>
	HAL_UART_Abort_IT(UartRam);
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <DENSORAM_RxITEnable+0x6c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 f90c 	bl	800921c <HAL_UART_Abort_IT>
	HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f004 f99d 	bl	8005344 <HAL_Delay>
	__HAL_UART_ENABLE_IT(UartRam, UART_IT_RXNE);
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <DENSORAM_RxITEnable+0x6c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <DENSORAM_RxITEnable+0x6c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0220 	orr.w	r2, r2, #32
 800101c:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(UartRam, UART_IT_IDLE);
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <DENSORAM_RxITEnable+0x6c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <DENSORAM_RxITEnable+0x6c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0210 	orr.w	r2, r2, #16
 8001030:	601a      	str	r2, [r3, #0]
	_RAM.IdleCount = 0;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <DENSORAM_RxITEnable+0x70>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	_RAM.Flags.FlagDataReady = false;
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <DENSORAM_RxITEnable+0x70>)
 800103c:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8001040:	f36f 0382 	bfc	r3, #2, #1
 8001044:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20001b34 	.word	0x20001b34
 8001050:	20000da8 	.word	0x20000da8
 8001054:	20000d14 	.word	0x20000d14

08001058 <DENSORAM_RxITDisable>:

void DENSORAM_RxITDisable(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(UartRam);
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f008 f8db 	bl	800921c <HAL_UART_Abort_IT>
	HAL_UART_AbortReceive_IT(UartRam);
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f008 f98e 	bl	800938c <HAL_UART_AbortReceive_IT>
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f004 f967 	bl	8005344 <HAL_Delay>
	__HAL_UART_DISABLE_IT(UartRam, UART_IT_RXNE);
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0220 	bic.w	r2, r2, #32
 8001088:	601a      	str	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(UartRam, UART_IT_IDLE);
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <DENSORAM_RxITDisable+0x4c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0210 	bic.w	r2, r2, #16
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000da8 	.word	0x20000da8

080010a8 <DENSORAM_RxCallBack>:

void DENSORAM_RxCallBack(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	if(__HAL_UART_GET_IT(UartRam,UART_IT_RXNE))
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d011      	beq.n	80010e0 <DENSORAM_RxCallBack+0x38>
	{
		_RAM.RxBuffer[_RAM.RxIndex++] = USART_RAM->RDR;
 80010bc:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <DENSORAM_RxCallBack+0x210>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010c2:	b298      	uxth	r0, r3
 80010c4:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80010c6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	b291      	uxth	r1, r2
 80010d0:	4a7a      	ldr	r2, [pc, #488]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80010d2:	f8a2 1088 	strh.w	r1, [r2, #136]	; 0x88
 80010d6:	4619      	mov	r1, r3
 80010d8:	b2c2      	uxtb	r2, r0
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80010dc:	440b      	add	r3, r1
 80010de:	715a      	strb	r2, [r3, #5]
	}

	/* Idle flag set, all bytes received */
	if(__HAL_UART_GET_IT(UartRam, UART_IT_IDLE))
 80010e0:	4b74      	ldr	r3, [pc, #464]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80de 	beq.w	80012ae <DENSORAM_RxCallBack+0x206>
	{
		HAL_UART_Transmit(&huart1, ram_tx, 129, 1000);
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	2281      	movs	r2, #129	; 0x81
 80010f8:	4971      	ldr	r1, [pc, #452]	; (80012c0 <DENSORAM_RxCallBack+0x218>)
 80010fa:	4872      	ldr	r0, [pc, #456]	; (80012c4 <DENSORAM_RxCallBack+0x21c>)
 80010fc:	f007 fffa 	bl	80090f4 <HAL_UART_Transmit>
		__HAL_UART_CLEAR_IDLEFLAG(UartRam);
 8001100:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2210      	movs	r2, #16
 8001108:	621a      	str	r2, [r3, #32]

		_RAM.Flags.FlagOverrunError = __HAL_UART_GET_FLAG(UartRam, UART_FLAG_ORE);
 800110a:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b08      	cmp	r3, #8
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2d9      	uxtb	r1, r3
 8001120:	4a66      	ldr	r2, [pc, #408]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001122:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8001126:	f361 03c3 	bfi	r3, r1, #3, #1
 800112a:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
		_RAM.Flags.FlagFrameError = __HAL_UART_GET_FLAG(UartRam, UART_FLAG_FE);
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2d9      	uxtb	r1, r3
 8001144:	4a5d      	ldr	r2, [pc, #372]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001146:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800114a:	f361 1304 	bfi	r3, r1, #4, #1
 800114e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
		_RAM.Flags.FlagNoiseError = __HAL_UART_GET_FLAG(UartRam, UART_FLAG_NE);
 8001152:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 800116a:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800116e:	f361 1345 	bfi	r3, r1, #5, #1
 8001172:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
		_RAM.Flags.usartRxError = _RAM.Flags.FlagOverrunError || _RAM.Flags.FlagFrameError || _RAM.Flags.FlagNoiseError;
 8001176:	4b51      	ldr	r3, [pc, #324]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10f      	bne.n	80011a6 <DENSORAM_RxCallBack+0xfe>
 8001186:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d107      	bne.n	80011a6 <DENSORAM_RxCallBack+0xfe>
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <DENSORAM_RxCallBack+0x102>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <DENSORAM_RxCallBack+0x104>
 80011aa:	2300      	movs	r3, #0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	4a42      	ldr	r2, [pc, #264]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80011b4:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 80011b8:	f361 0300 	bfi	r3, r1, #0, #1
 80011bc:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90

		if(_RAM.Flags.usartRxError){
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d037      	beq.n	8001240 <DENSORAM_RxCallBack+0x198>
			HAL_UART_Abort_IT(UartRam);
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f008 f821 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 80011da:	200a      	movs	r0, #10
 80011dc:	f004 f8b2 	bl	8005344 <HAL_Delay>
			__HAL_UART_DISABLE_IT(UartRam, UART_IT_RXNE);
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0220 	bic.w	r2, r2, #32
 80011f2:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(UartRam, UART_IT_IDLE);
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0210 	bic.w	r2, r2, #16
 8001206:	601a      	str	r2, [r3, #0]
			HAL_UART_Abort_IT(UartRam);
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f008 f805 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f004 f896 	bl	8005344 <HAL_Delay>
			__HAL_UART_ENABLE_IT(UartRam, UART_IT_RXNE);
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0220 	orr.w	r2, r2, #32
 800122a:	601a      	str	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(UartRam, UART_IT_IDLE);
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <DENSORAM_RxCallBack+0x20c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	601a      	str	r2, [r3, #0]
		}

		_RAM.RAMIndex = _RAM.RxIndex;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001242:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 800124a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		_RAM.RxIndex = 0;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		_RAM.IdleCount++;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001258:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3301      	adds	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001264:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

		if(_RAM.IdleCount >= 2 && !_RAM.Flags.usartRxError){
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 800126a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d90f      	bls.n	8001294 <DENSORAM_RxCallBack+0x1ec>
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <DENSORAM_RxCallBack+0x1ec>
			_RAM.Flags.FlagDataReady = true;
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001286:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
		}
		else if(_RAM.IdleCount >= 4){
			_RAM.Flags.FlagDataReady = true;
		}
	}
}
 8001292:	e00c      	b.n	80012ae <DENSORAM_RxCallBack+0x206>
		else if(_RAM.IdleCount >= 4){
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 8001296:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d906      	bls.n	80012ae <DENSORAM_RxCallBack+0x206>
			_RAM.Flags.FlagDataReady = true;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <DENSORAM_RxCallBack+0x214>)
 80012a2:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000da8 	.word	0x20000da8
 80012b8:	20000cf0 	.word	0x20000cf0
 80012bc:	20000d14 	.word	0x20000d14
 80012c0:	20000204 	.word	0x20000204
 80012c4:	20001b34 	.word	0x20001b34

080012c8 <DENSORAM_SendPageRequest>:
void DENSORAM_RxClear(void) {
	_RAM.RxIndex = 0;
	memset((char*) _RAM.RxBuffer, 0, DENSORAM_CORE_BUFFER_SIZE);
}

void DENSORAM_SendPageRequest(int page){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	ram_tx[0] = 0x50 + page;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3350      	adds	r3, #80	; 0x50
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <DENSORAM_SendPageRequest+0x38>)
 80012da:	701a      	strb	r2, [r3, #0]
	ram_tx[1] = 0x01;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <DENSORAM_SendPageRequest+0x38>)
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
	ram_tx[128] = 0xAE - page;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	f06f 0351 	mvn.w	r3, #81	; 0x51
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <DENSORAM_SendPageRequest+0x38>)
 80012f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000204 	.word	0x20000204

08001304 <DENSORAM_Checksum>:

bool DENSORAM_Checksum(void){ //must have 129 bytes
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
	uint8_t cksum = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 128; i++){
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	e00c      	b.n	8001332 <DENSORAM_Checksum+0x2e>
		sum += _RAM.RxBuffer[i];
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <DENSORAM_Checksum+0x5c>)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 128; i++){
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3301      	adds	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b7f      	cmp	r3, #127	; 0x7f
 8001336:	ddef      	ble.n	8001318 <DENSORAM_Checksum+0x14>
	}
	cksum = 255 - (sum % 256);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	71fb      	strb	r3, [r7, #7]

	if(cksum == _RAM.RxBuffer[128]){
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <DENSORAM_Checksum+0x5c>)
 8001342:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001346:	b2db      	uxtb	r3, r3
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	429a      	cmp	r2, r3
 800134c:	d101      	bne.n	8001352 <DENSORAM_Checksum+0x4e>
		return true;
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <DENSORAM_Checksum+0x50>
	}
	else{
		return false;
 8001352:	2300      	movs	r3, #0
	}
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000d14 	.word	0x20000d14

08001364 <AT_init>:

/////////////////////////////////////////////////////////////////////////
// Public
/////////////////////////////////////////////////////////////////////////

bool AT_init(UART_HandleTypeDef *huart){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	UartInst = huart;
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <AT_init+0x88>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
	USART_INST = huart->Instance;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <AT_init+0x8c>)
 8001378:	6013      	str	r3, [r2, #0]

	if(UartInst == NULL){
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <AT_init+0x88>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <AT_init+0x22>
		return false;
 8001382:	2300      	movs	r3, #0
 8001384:	e02e      	b.n	80013e4 <AT_init+0x80>
	}

	/* Initialize buffer */
	memset((char*)_STORAGE.TxBuffer, AT_SET_ZERO, AT_CORE_BUFFER_SIZE);
 8001386:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800138a:	2100      	movs	r1, #0
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <AT_init+0x90>)
 800138e:	f00a fdf2 	bl	800bf76 <memset>
	memset((char*)_STORAGE.RxBuffer, AT_SET_ZERO, AT_CORE_BUFFER_SIZE);
 8001392:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001396:	2100      	movs	r1, #0
 8001398:	4817      	ldr	r0, [pc, #92]	; (80013f8 <AT_init+0x94>)
 800139a:	f00a fdec 	bl	800bf76 <memset>
	_STORAGE.RxIndex             = AT_SET_ZERO;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <AT_init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f8a3 2bbe 	strh.w	r2, [r3, #3006]	; 0xbbe

	/* Flags */
	_STORAGE.Flags.AllFlags = AT_SET_ZERO;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <AT_init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2bc0 	strb.w	r2, [r3, #3008]	; 0xbc0

	/* State Counter */
	_State_ERROR   = AT_SET_ZERO;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <AT_init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
	_State_OK      = AT_SET_ZERO;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <AT_init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]

	/* interrupt disable and restart */
	//HAL_UART_Abort_IT(UartInst);
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_RXNE);	/* Receive data */
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <AT_init+0x88>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <AT_init+0x88>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0220 	orr.w	r2, r2, #32
 80013cc:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_IDLE);  /* BUS IDLE check */
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <AT_init+0x88>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <AT_init+0x88>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0210 	orr.w	r2, r2, #16
 80013e0:	601a      	str	r2, [r3, #0]

	return true;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000288 	.word	0x20000288
 80013f0:	2000028c 	.word	0x2000028c
 80013f4:	2000138d 	.word	0x2000138d
 80013f8:	20000db1 	.word	0x20000db1
 80013fc:	20000dac 	.word	0x20000dac
 8001400:	20000291 	.word	0x20000291
 8001404:	20000290 	.word	0x20000290

08001408 <AT_RxCallback>:

//#########################################################################################################
void AT_RxCallback(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* If received new data byte */
	if(__HAL_UART_GET_IT(UartInst,UART_IT_RXNE)){
 800140c:	4b5f      	ldr	r3, [pc, #380]	; (800158c <AT_RxCallback+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02a      	beq.n	8001472 <AT_RxCallback+0x6a>
		_STORAGE.ByteRecv = (uint8_t)(USART_INST->RDR);
 800141c:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <AT_RxCallback+0x188>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001422:	b29b      	uxth	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <AT_RxCallback+0x18c>)
 8001428:	711a      	strb	r2, [r3, #4]
//		DBG_UART.Instance->TDR = _STORAGE.ByteRecv;

		AT_catchOK();
 800142a:	f000 fb5b 	bl	8001ae4 <AT_catchOK>
		AT_catchError();
 800142e:	f000 fbab 	bl	8001b88 <AT_catchError>
//		AT_catchRDY();

		if(_STORAGE.RxIndex > AT_CORE_BUFFER_SIZE){
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <AT_RxCallback+0x18c>)
 8001434:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8001438:	b29b      	uxth	r3, r3
 800143a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800143e:	4293      	cmp	r3, r2
 8001440:	d907      	bls.n	8001452 <AT_RxCallback+0x4a>
			_STORAGE.Flags.usartRxError = true;
 8001442:	4a54      	ldr	r2, [pc, #336]	; (8001594 <AT_RxCallback+0x18c>)
 8001444:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
 8001450:	e00f      	b.n	8001472 <AT_RxCallback+0x6a>
		}else{
			_STORAGE.RxBuffer[_STORAGE.RxIndex++] = _STORAGE.ByteRecv;
 8001452:	4b50      	ldr	r3, [pc, #320]	; (8001594 <AT_RxCallback+0x18c>)
 8001454:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8001458:	b29b      	uxth	r3, r3
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	b291      	uxth	r1, r2
 800145e:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <AT_RxCallback+0x18c>)
 8001460:	f8a2 1bbe 	strh.w	r1, [r2, #3006]	; 0xbbe
 8001464:	4619      	mov	r1, r3
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <AT_RxCallback+0x18c>)
 8001468:	791b      	ldrb	r3, [r3, #4]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <AT_RxCallback+0x18c>)
 800146e:	440b      	add	r3, r1
 8001470:	715a      	strb	r2, [r3, #5]

		}
	}

	/* Idle flag set, all bytes received */
	if(__HAL_UART_GET_IT(UartInst, UART_IT_IDLE)){
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <AT_RxCallback+0x184>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8081 	beq.w	8001586 <AT_RxCallback+0x17e>
		__HAL_UART_CLEAR_IDLEFLAG(UartInst);
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <AT_RxCallback+0x184>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2210      	movs	r2, #16
 800148c:	621a      	str	r2, [r3, #32]

//		HAL_UART_Transmit(&DBG_UART, _STORAGE.RxBuffer, (_STORAGE.RxIndex-1), 1000);

		/* If FlagEndCmd set by user -> Received response */
		_STORAGE.Flags.FlagResponse = true;
 800148e:	4a41      	ldr	r2, [pc, #260]	; (8001594 <AT_RxCallback+0x18c>)
 8001490:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0

		/* If FlagEndCmd not set -> Received URC message */
		_STORAGE.Flags.FlagURC = true;
 800149c:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <AT_RxCallback+0x18c>)
 800149e:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0

		/* Disable FlagEndCmd after used */
		_STORAGE.Flags.FlagEndCmd = false;
 80014aa:	4a3a      	ldr	r2, [pc, #232]	; (8001594 <AT_RxCallback+0x18c>)
 80014ac:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 80014b0:	f36f 1345 	bfc	r3, #5, #1
 80014b4:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0

		/* Error Detection */
		_STORAGE.Flags.usartRxError |= __HAL_UART_GET_FLAG(UartInst, UART_FLAG_ORE);
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <AT_RxCallback+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <AT_RxCallback+0x18c>)
 80014d2:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 80014d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	b24b      	sxtb	r3, r1
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	b2d9      	uxtb	r1, r3
 80014ea:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <AT_RxCallback+0x18c>)
 80014ec:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 80014f0:	f361 0300 	bfi	r3, r1, #0, #1
 80014f4:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
		if(_STORAGE.Flags.usartRxError){
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <AT_RxCallback+0x18c>)
 80014fa:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 80014fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d03e      	beq.n	8001586 <AT_RxCallback+0x17e>
			HAL_UART_Abort_IT(UartInst);
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <AT_RxCallback+0x184>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fe85 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 8001512:	200a      	movs	r0, #10
 8001514:	f003 ff16 	bl	8005344 <HAL_Delay>
			__HAL_UART_DISABLE_IT(UartInst, UART_IT_RXNE);
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <AT_RxCallback+0x184>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <AT_RxCallback+0x184>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0220 	bic.w	r2, r2, #32
 800152a:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(UartInst, UART_IT_IDLE);
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <AT_RxCallback+0x184>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <AT_RxCallback+0x184>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0210 	bic.w	r2, r2, #16
 800153e:	601a      	str	r2, [r3, #0]
			HAL_UART_Abort_IT(UartInst);
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <AT_RxCallback+0x184>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f007 fe69 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 800154a:	200a      	movs	r0, #10
 800154c:	f003 fefa 	bl	8005344 <HAL_Delay>
			__HAL_UART_ENABLE_IT(UartInst, UART_IT_RXNE);
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <AT_RxCallback+0x184>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <AT_RxCallback+0x184>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	601a      	str	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(UartInst, UART_IT_IDLE);
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <AT_RxCallback+0x184>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <AT_RxCallback+0x184>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	601a      	str	r2, [r3, #0]
			_STORAGE.Flags.usartRxError = false;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <AT_RxCallback+0x18c>)
 800157a:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 800157e:	f36f 0300 	bfc	r3, #0, #1
 8001582:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
		}
	}
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000288 	.word	0x20000288
 8001590:	2000028c 	.word	0x2000028c
 8001594:	20000dac 	.word	0x20000dac

08001598 <AT_sendCheckReply>:

//#########################################################################################################
bool AT_sendCheckReply(uint8_t *toSend, uint8_t *reply, uint32_t timeOut)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    bool ret = false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]
	uint8_t result;

    AT_RxClear();
 80015a8:	f000 fb72 	bl	8001c90 <AT_RxClear>
    AT_TxClear();
 80015ac:	f000 fb64 	bl	8001c78 <AT_TxClear>
    AT_ClearAllFlag();
 80015b0:	f000 fb80 	bl	8001cb4 <AT_ClearAllFlag>

    sprintf((char*)_STORAGE.TxBuffer,"%s\r\n", (char*)toSend);
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4918      	ldr	r1, [pc, #96]	; (8001618 <AT_sendCheckReply+0x80>)
 80015b8:	4818      	ldr	r0, [pc, #96]	; (800161c <AT_sendCheckReply+0x84>)
 80015ba:	f00b fc0b 	bl	800cdd4 <siprintf>
#if(AT_DEBUG_MODE)
    	dbg_print("\t---> "); dbg_println(toSend);
#endif

    if(AT_sendCommand((uint8_t*)_STORAGE.TxBuffer) == false){
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <AT_sendCheckReply+0x84>)
 80015c0:	f000 fa78 	bl	8001ab4 <AT_sendCommand>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <AT_sendCheckReply+0x3c>
        ret = false;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]
    }

    if(AT_waitForString((uint8_t*)&result, timeOut, 1, reply) == true){ // TODO Saifa Code
 80015d4:	f107 0016 	add.w	r0, r7, #22
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2201      	movs	r2, #1
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	f000 f849 	bl	8001674 <AT_waitForString>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <AT_sendCheckReply+0x54>
#if(AT_DEBUG_MODE)
    	dbg_print("\t<--- "); dbg_println_size(_STORAGE.RxIndex, &_STORAGE.RxBuffer[AT_RESPONSE_OFFSET]);
#endif
        ret = true;
 80015e8:	2301      	movs	r3, #1
 80015ea:	75fb      	strb	r3, [r7, #23]
    }

    /* if buffer overflow but but receive OK mean success! */
    if(strcmp((char*)reply, "OK") == 0){
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <AT_sendCheckReply+0x88>)
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f7fe fdf6 	bl	80001e0 <strcmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <AT_sendCheckReply+0x76>
    	if(_STORAGE.Flags.FlagOK == true){
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <AT_sendCheckReply+0x8c>)
 80015fc:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 8001600:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <AT_sendCheckReply+0x76>
    		ret = true;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    	}
    }

    return ret;
 800160e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08010f28 	.word	0x08010f28
 800161c:	2000138d 	.word	0x2000138d
 8001620:	08010f30 	.word	0x08010f30
 8001624:	20000dac 	.word	0x20000dac

08001628 <AT_sendNoCheck>:

//#########################################################################################################
bool AT_sendNoCheck(uint8_t *send){
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    bool ret = true;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]

    AT_RxClear();
 8001634:	f000 fb2c 	bl	8001c90 <AT_RxClear>
    AT_TxClear();
 8001638:	f000 fb1e 	bl	8001c78 <AT_TxClear>
    AT_ClearAllFlag();
 800163c:	f000 fb3a 	bl	8001cb4 <AT_ClearAllFlag>

    sprintf((char*)_STORAGE.TxBuffer,"%s\r\n", send);
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <AT_sendNoCheck+0x44>)
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <AT_sendNoCheck+0x48>)
 8001646:	f00b fbc5 	bl	800cdd4 <siprintf>
#if(AT_DEBUG_MODE)
    	dbg_print("\t---> "); dbg_println(send);
#endif

    if(AT_sendCommand((uint8_t*)_STORAGE.TxBuffer)==false){
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <AT_sendNoCheck+0x48>)
 800164c:	f000 fa32 	bl	8001ab4 <AT_sendCommand>
 8001650:	4603      	mov	r3, r0
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <AT_sendNoCheck+0x38>
        ret = false;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08010f28 	.word	0x08010f28
 8001670:	2000138d 	.word	0x2000138d

08001674 <AT_waitForString>:

//#########################################################################################################
bool AT_waitForString(uint8_t *result, uint32_t timeOut, uint8_t CountOfParameter, ...)
{
 8001674:	b40c      	push	{r2, r3}
 8001676:	b5b0      	push	{r4, r5, r7, lr}
 8001678:	b088      	sub	sp, #32
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
 8001680:	466b      	mov	r3, sp
 8001682:	461d      	mov	r5, r3
	if(result == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <AT_waitForString+0x1a>
	{
		return false;
 800168a:	2300      	movs	r3, #0
 800168c:	e071      	b.n	8001772 <AT_waitForString+0xfe>
	}
	if(CountOfParameter == 0)
 800168e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <AT_waitForString+0x26>
	{
		return false;
 8001696:	2300      	movs	r3, #0
 8001698:	e06b      	b.n	8001772 <AT_waitForString+0xfe>
	}

	*result=0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

  	va_list tag;
	va_start (tag,CountOfParameter);
 80016a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016a4:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 80016a6:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 80016aa:	4603      	mov	r3, r0
 80016ac:	3b01      	subs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	b2c1      	uxtb	r1, r0
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	0154      	lsls	r4, r2, #5
 80016c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016c4:	014b      	lsls	r3, r1, #5
 80016c6:	b2c1      	uxtb	r1, r0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	f04f 0400 	mov.w	r4, #0
 80016d4:	0154      	lsls	r4, r2, #5
 80016d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016da:	014b      	lsls	r3, r1, #5
 80016dc:	4603      	mov	r3, r0
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	3303      	adds	r3, #3
 80016e2:	3307      	adds	r3, #7
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	ebad 0d03 	sub.w	sp, sp, r3
 80016ec:	466b      	mov	r3, sp
 80016ee:	3303      	adds	r3, #3
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
 80016fa:	e00a      	b.n	8001712 <AT_waitForString+0x9e>
	{
		arg[i] = va_arg (tag, char *);
 80016fc:	7dfa      	ldrb	r2, [r7, #23]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1d19      	adds	r1, r3, #4
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	3301      	adds	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
 8001712:	7dfa      	ldrb	r2, [r7, #23]
 8001714:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001718:	429a      	cmp	r2, r3
 800171a:	d3ef      	bcc.n	80016fc <AT_waitForString+0x88>
	}
  	va_end (tag);
	//////////////////////////////////
	for(uint32_t t=0 ; t<timeOut ; t+=50)
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	e022      	b.n	8001768 <AT_waitForString+0xf4>
	{
		HAL_Delay(50);
 8001722:	2032      	movs	r0, #50	; 0x32
 8001724:	f003 fe0e 	bl	8005344 <HAL_Delay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001728:	2300      	movs	r3, #0
 800172a:	77fb      	strb	r3, [r7, #31]
 800172c:	e014      	b.n	8001758 <AT_waitForString+0xe4>
		{
			if(strstr((char*)&_STORAGE.RxBuffer[AT_RESPONSE_OFFSET],arg[mx])!=NULL)
 800172e:	7ffa      	ldrb	r2, [r7, #31]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001736:	4619      	mov	r1, r3
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <AT_waitForString+0x110>)
 800173a:	f00b fc10 	bl	800cf5e <strstr>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <AT_waitForString+0xde>
			{
				*result = mx+1;
 8001744:	7ffb      	ldrb	r3, [r7, #31]
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
				return true;
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <AT_waitForString+0xfe>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001752:	7ffb      	ldrb	r3, [r7, #31]
 8001754:	3301      	adds	r3, #1
 8001756:	77fb      	strb	r3, [r7, #31]
 8001758:	7ffa      	ldrb	r2, [r7, #31]
 800175a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800175e:	429a      	cmp	r2, r3
 8001760:	d3e5      	bcc.n	800172e <AT_waitForString+0xba>
	for(uint32_t t=0 ; t<timeOut ; t+=50)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	3332      	adds	r3, #50	; 0x32
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3d8      	bcc.n	8001722 <AT_waitForString+0xae>
			}
		}
	}
	// timeout
	return false;
 8001770:	2300      	movs	r3, #0
 8001772:	46ad      	mov	sp, r5
}
 8001774:	4618      	mov	r0, r3
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800177e:	b002      	add	sp, #8
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000db3 	.word	0x20000db3

08001788 <AT_returnString>:

//#########################################################################################################
bool AT_returnString(uint8_t *result,uint8_t WantWhichOne,uint8_t *SplitterChars)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	460b      	mov	r3, r1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	72fb      	strb	r3, [r7, #11]
	char *str = NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

	if(result == NULL){
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <AT_returnString+0x1c>
		return false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e02e      	b.n	8001802 <AT_returnString+0x7a>
	}

	if(WantWhichOne==0){
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <AT_returnString+0x26>
		return false;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e029      	b.n	8001802 <AT_returnString+0x7a>
	}

	str = (char*)_STORAGE.RxBuffer;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <AT_returnString+0x84>)
 80017b0:	617b      	str	r3, [r7, #20]
	str = strtok (str,(char*)SplitterChars);
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	6978      	ldr	r0, [r7, #20]
 80017b6:	f00c fa23 	bl	800dc00 <strtok>
 80017ba:	6178      	str	r0, [r7, #20]
	if(str == NULL){
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <AT_returnString+0x6c>
		strcpy((char*)result,"");
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		return false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e01a      	b.n	8001802 <AT_returnString+0x7a>
	}

	while (str != NULL){
		str = strtok (NULL,(char*)SplitterChars);
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	2000      	movs	r0, #0
 80017d0:	f00c fa16 	bl	800dc00 <strtok>
 80017d4:	6178      	str	r0, [r7, #20]
		if(str != NULL){
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <AT_returnString+0x5a>
			WantWhichOne--;
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	3b01      	subs	r3, #1
 80017e0:	72fb      	strb	r3, [r7, #11]
		}

		if(WantWhichOne==0){
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <AT_returnString+0x6c>
			strcpy((char*)result,str);
 80017e8:	6979      	ldr	r1, [r7, #20]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f00b fb9d 	bl	800cf2a <strcpy>
			return true;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e006      	b.n	8001802 <AT_returnString+0x7a>
	while (str != NULL){
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e8      	bne.n	80017cc <AT_returnString+0x44>
		}
	}
	strcpy((char*)result,"");
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
	return false;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000db1 	.word	0x20000db1

08001810 <AT_readline>:

//#########################################################################################################
// Todo: Please investigate work flow
uint16_t AT_readline(int16_t timeout, bool multiline){
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	80fb      	strh	r3, [r7, #6]
 800181c:	4613      	mov	r3, r2
 800181e:	717b      	strb	r3, [r7, #5]
    uint16_t ret = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	81fb      	strh	r3, [r7, #14]
    int16_t TimeOut = timeout;
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	81bb      	strh	r3, [r7, #12]

	do{
		if(_STORAGE.Flags.FlagCRLF == true){
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <AT_readline+0x70>)
 800182a:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 800182e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d113      	bne.n	8001860 <AT_readline+0x50>
			_STORAGE.Flags.FlagCRLF = false;
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <AT_readline+0x70>)
 800183a:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 800183e:	f36f 1304 	bfc	r3, #4, #1
 8001842:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0

			if (!multiline){
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <AT_readline+0x50>
				ret = _STORAGE.RxIndex;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <AT_readline+0x70>)
 8001854:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8001858:	81fb      	strh	r3, [r7, #14]
				timeout = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	80fb      	strh	r3, [r7, #6]
				break;
 800185e:	e00a      	b.n	8001876 <AT_readline+0x66>
			}
		}
		HAL_Delay(100);
 8001860:	2064      	movs	r0, #100	; 0x64
 8001862:	f003 fd6f 	bl	8005344 <HAL_Delay>
		TimeOut -= 100;
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	3b64      	subs	r3, #100	; 0x64
 800186a:	b29b      	uxth	r3, r3
 800186c:	81bb      	strh	r3, [r7, #12]
	}while(TimeOut > 0);
 800186e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	dcd8      	bgt.n	8001828 <AT_readline+0x18>

    return ret;
 8001876:	89fb      	ldrh	r3, [r7, #14]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000dac 	.word	0x20000dac

08001884 <AT_readlineOK>:

//#########################################################################################################
uint16_t AT_readlineOK(int16_t timeout){
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
    uint16_t len = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	81fb      	strh	r3, [r7, #14]
    int16_t TimeOut = timeout;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	81bb      	strh	r3, [r7, #12]

	do{
		if(_STORAGE.Flags.FlagOK == true){
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <AT_readlineOK+0x50>)
 8001898:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 800189c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <AT_readlineOK+0x30>
			len = _STORAGE.RxIndex;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <AT_readlineOK+0x50>)
 80018a8:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 80018ac:	81fb      	strh	r3, [r7, #14]
			timeout = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	80fb      	strh	r3, [r7, #6]
			break;
 80018b2:	e00a      	b.n	80018ca <AT_readlineOK+0x46>
		}
		HAL_Delay(100);
 80018b4:	2064      	movs	r0, #100	; 0x64
 80018b6:	f003 fd45 	bl	8005344 <HAL_Delay>
		TimeOut -= 100;
 80018ba:	89bb      	ldrh	r3, [r7, #12]
 80018bc:	3b64      	subs	r3, #100	; 0x64
 80018be:	b29b      	uxth	r3, r3
 80018c0:	81bb      	strh	r3, [r7, #12]
	}while(TimeOut > 0);
 80018c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dce5      	bgt.n	8001896 <AT_readlineOK+0x12>

    return len;
 80018ca:	89fb      	ldrh	r3, [r7, #14]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000dac 	.word	0x20000dac

080018d8 <AT_getReply>:

//#########################################################################################################
uint8_t AT_getReply(uint8_t *send, uint16_t timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
	uint8_t len = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

    AT_RxClear();
 80018e8:	f000 f9d2 	bl	8001c90 <AT_RxClear>
    AT_TxClear();
 80018ec:	f000 f9c4 	bl	8001c78 <AT_TxClear>
    AT_ClearAllFlag();
 80018f0:	f000 f9e0 	bl	8001cb4 <AT_ClearAllFlag>

    sprintf((char*)_STORAGE.TxBuffer,"%s\r\n", send);
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <AT_getReply+0x58>)
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <AT_getReply+0x5c>)
 80018fa:	f00b fa6b 	bl	800cdd4 <siprintf>
#if(AT_DEBUG_MODE)
    	dbg_print("\t---> "); dbg_println(send);
#endif

    if(AT_sendCommand((uint8_t*)_STORAGE.TxBuffer)==false){
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <AT_getReply+0x5c>)
 8001900:	f000 f8d8 	bl	8001ab4 <AT_sendCommand>
 8001904:	4603      	mov	r3, r0
 8001906:	f083 0301 	eor.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <AT_getReply+0x3c>
        return len;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	e008      	b.n	8001926 <AT_getReply+0x4e>
    }

    len = (uint8_t) AT_readline(timeout, false);
 8001914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff78 	bl	8001810 <AT_readline>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
#if(AT_DEBUG_MODE)
	  dbg_print("\t<--- "); dbg_println_size(_STORAGE.RxIndex, &_STORAGE.RxBuffer[AT_RESPONSE_OFFSET]);
#endif

   /* Length of data received */
   return len;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	08010f28 	.word	0x08010f28
 8001934:	2000138d 	.word	0x2000138d

08001938 <AT_parseReply>:

//#########################################################################################################
bool AT_parseReply(uint8_t* toreply, uint32_t *v, uint8_t divider, uint8_t index){
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	460b      	mov	r3, r1
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	4613      	mov	r3, r2
 800194c:	71bb      	strb	r3, [r7, #6]
  char* pch;
  /* get the pointer to the needed word */
  char *p = strstr((char*)&_STORAGE.RxBuffer[AT_RESPONSE_OFFSET], (char*)toreply);
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <AT_parseReply+0x88>)
 8001952:	f00b fb04 	bl	800cf5e <strstr>
 8001956:	61f8      	str	r0, [r7, #28]
  if (p == 0){
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <AT_parseReply+0x2a>
	  return false;
 800195e:	2300      	movs	r3, #0
 8001960:	e02a      	b.n	80019b8 <AT_parseReply+0x80>
  }

  p += strlen((char*)toreply);
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7fe fc46 	bl	80001f4 <strlen>
 8001968:	4602      	mov	r2, r0
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
  for (uint8_t i=0; i<index;i++){
 8001970:	2300      	movs	r3, #0
 8001972:	76fb      	strb	r3, [r7, #27]
 8001974:	e010      	b.n	8001998 <AT_parseReply+0x60>
    // increment dividers
    p = strchr(p, divider);
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4619      	mov	r1, r3
 800197a:	69f8      	ldr	r0, [r7, #28]
 800197c:	f00b fac8 	bl	800cf10 <strchr>
 8001980:	61f8      	str	r0, [r7, #28]
    if (!p){
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <AT_parseReply+0x54>
    	return false;
 8001988:	2300      	movs	r3, #0
 800198a:	e015      	b.n	80019b8 <AT_parseReply+0x80>
    }
    p++;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	3301      	adds	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
  for (uint8_t i=0; i<index;i++){
 8001992:	7efb      	ldrb	r3, [r7, #27]
 8001994:	3301      	adds	r3, #1
 8001996:	76fb      	strb	r3, [r7, #27]
 8001998:	7efa      	ldrb	r2, [r7, #27]
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3ea      	bcc.n	8001976 <AT_parseReply+0x3e>
  }

  *v = strtol(p, &pch, 10);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	220a      	movs	r2, #10
 80019a6:	4619      	mov	r1, r3
 80019a8:	69f8      	ldr	r0, [r7, #28]
 80019aa:	f00c fa0b 	bl	800ddc4 <strtol>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	601a      	str	r2, [r3, #0]

  return true;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000db3 	.word	0x20000db3

080019c4 <AT_sendParseReply>:

//#########################################################################################################
bool AT_sendParseReply(uint8_t* tosend, uint8_t* toreply, uint32_t *v, uint8_t divider, uint8_t index){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	70fb      	strb	r3, [r7, #3]
  AT_getReply(tosend, 500);
 80019d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff ff7e 	bl	80018d8 <AT_getReply>

  if (! AT_parseReply(toreply, v, divider, index)){
 80019dc:	7e3b      	ldrb	r3, [r7, #24]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f7ff ffa8 	bl	8001938 <AT_parseReply>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f083 0301 	eor.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <AT_sendParseReply+0x34>
	  return false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e004      	b.n	8001a02 <AT_sendParseReply+0x3e>
  }
  AT_readlineOK(1000); // until get 'OK' or time out
 80019f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fc:	f7ff ff42 	bl	8001884 <AT_readlineOK>

  return true;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <AT_expectReplyOK>:

//#########################################################################################################
bool AT_expectReplyOK(uint8_t *send, uint16_t timeout){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
	bool result = false;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
	bool onLoop = true;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	75bb      	strb	r3, [r7, #22]
	uint32_t TickStart = HAL_GetTick();
 8001a20:	f003 fc84 	bl	800532c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]
	uint32_t TimeOut = (uint32_t)timeout;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	60fb      	str	r3, [r7, #12]

    AT_RxClear();
 8001a2a:	f000 f931 	bl	8001c90 <AT_RxClear>
    AT_TxClear();
 8001a2e:	f000 f923 	bl	8001c78 <AT_TxClear>
    AT_ClearAllFlag();
 8001a32:	f000 f93f 	bl	8001cb4 <AT_ClearAllFlag>

    sprintf((char*)_STORAGE.TxBuffer,"%s\r\n", send);
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <AT_expectReplyOK+0x9c>)
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <AT_expectReplyOK+0xa0>)
 8001a3c:	f00b f9ca 	bl	800cdd4 <siprintf>
#if(AT_DEBUG_MODE)
    	dbg_print("\t---> "); dbg_println(send);
#endif
    if(AT_sendCommand((uint8_t*)_STORAGE.TxBuffer)==false){
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <AT_expectReplyOK+0xa0>)
 8001a42:	f000 f837 	bl	8001ab4 <AT_sendCommand>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d019      	beq.n	8001a86 <AT_expectReplyOK+0x7a>
        return false;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e023      	b.n	8001a9e <AT_expectReplyOK+0x92>
    }

    while(((HAL_GetTick() - TickStart) <= TimeOut) && (onLoop == true)){
    	if(_STORAGE.Flags.FlagOK == true){
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <AT_expectReplyOK+0xa4>)
 8001a58:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 8001a5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d103      	bne.n	8001a6e <AT_expectReplyOK+0x62>
    		result = true;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    		onLoop = false;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75bb      	strb	r3, [r7, #22]
    	}
    	if(_STORAGE.Flags.FlagError == true){
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <AT_expectReplyOK+0xa4>)
 8001a70:	f8d3 3bc0 	ldr.w	r3, [r3, #3008]	; 0xbc0
 8001a74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d103      	bne.n	8001a86 <AT_expectReplyOK+0x7a>
    		result = false;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
    		onLoop = false;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75bb      	strb	r3, [r7, #22]
    while(((HAL_GetTick() - TickStart) <= TimeOut) && (onLoop == true)){
 8001a86:	f003 fc51 	bl	800532c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d302      	bcc.n	8001a9c <AT_expectReplyOK+0x90>
 8001a96:	7dbb      	ldrb	r3, [r7, #22]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1dc      	bne.n	8001a56 <AT_expectReplyOK+0x4a>
#if(AT_DEBUG_MODE)
	HAL_Delay(100);
	dbg_print("\t<--- "); dbg_println_size(_STORAGE.RxIndex, &_STORAGE.RxBuffer[AT_RESPONSE_OFFSET]);
#endif
  /* time-out */
  return result;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08010f28 	.word	0x08010f28
 8001aac:	2000138d 	.word	0x2000138d
 8001ab0:	20000dac 	.word	0x20000dac

08001ab4 <AT_sendCommand>:
//////////////////////////////////////////////////////////////////////////
// STATIC
//////////////////////////////////////////////////////////////////////////

bool AT_sendCommand(uint8_t *toSend)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
//	printf((char*)toSend);
	_STORAGE.Flags.FlagEndCmd = true;
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <AT_sendCommand+0x28>)
 8001abe:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
	printf("%s",(char*)toSend);
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <AT_sendCommand+0x2c>)
 8001ace:	f00b f899 	bl	800cc04 <iprintf>
	return true;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000dac 	.word	0x20000dac
 8001ae0:	08010f34 	.word	0x08010f34

08001ae4 <AT_catchOK>:

void AT_catchOK(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	/* Due to disable echo. So, text receive will be response only */
	switch(_State_OK)
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <AT_catchOK+0x9c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d83d      	bhi.n	8001b6c <AT_catchOK+0x88>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <AT_catchOK+0x14>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b21 	.word	0x08001b21
 8001b00:	08001b37 	.word	0x08001b37
 8001b04:	08001b4d 	.word	0x08001b4d
	{
		case 0:	_State_OK = (_STORAGE.ByteRecv == 'O')  ? 1 : 0 ;	break;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <AT_catchOK+0xa0>)
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b4f      	cmp	r3, #79	; 0x4f
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <AT_catchOK+0x9c>)
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e029      	b.n	8001b74 <AT_catchOK+0x90>
		case 1:	_State_OK = (_STORAGE.ByteRecv == 'K')  ? 2 : 0 ;	break;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <AT_catchOK+0xa0>)
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b4b      	cmp	r3, #75	; 0x4b
 8001b28:	d101      	bne.n	8001b2e <AT_catchOK+0x4a>
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	e000      	b.n	8001b30 <AT_catchOK+0x4c>
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <AT_catchOK+0x9c>)
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e01e      	b.n	8001b74 <AT_catchOK+0x90>
		case 2:	_State_OK = (_STORAGE.ByteRecv == '\r') ? 3 : 0 ;	break;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <AT_catchOK+0xa0>)
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b0d      	cmp	r3, #13
 8001b3e:	d101      	bne.n	8001b44 <AT_catchOK+0x60>
 8001b40:	2203      	movs	r2, #3
 8001b42:	e000      	b.n	8001b46 <AT_catchOK+0x62>
 8001b44:	2200      	movs	r2, #0
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <AT_catchOK+0x9c>)
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e013      	b.n	8001b74 <AT_catchOK+0x90>
		case 3: if(_STORAGE.ByteRecv == '\n') { _STORAGE.Flags.FlagOK = true; }
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <AT_catchOK+0xa0>)
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d106      	bne.n	8001b64 <AT_catchOK+0x80>
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <AT_catchOK+0xa0>)
 8001b58:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
			_State_OK = 0;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <AT_catchOK+0x9c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
		break;
 8001b6a:	e003      	b.n	8001b74 <AT_catchOK+0x90>

		default:
			_State_OK = 0;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <AT_catchOK+0x9c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
		break;
 8001b72:	bf00      	nop
	}
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000290 	.word	0x20000290
 8001b84:	20000dac 	.word	0x20000dac

08001b88 <AT_catchError>:
	}
}

//#########################################################################################################
void AT_catchError(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	/* Due to disable echo. So, text receive will be response only */
	switch(_State_ERROR)
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <AT_catchError+0xe8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d864      	bhi.n	8001c5e <AT_catchError+0xd6>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <AT_catchError+0x14>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bb9 	.word	0x08001bb9
 8001ba0:	08001bd1 	.word	0x08001bd1
 8001ba4:	08001be7 	.word	0x08001be7
 8001ba8:	08001bfd 	.word	0x08001bfd
 8001bac:	08001c13 	.word	0x08001c13
 8001bb0:	08001c29 	.word	0x08001c29
 8001bb4:	08001c3f 	.word	0x08001c3f
	{
		case 0:	_State_ERROR = (_STORAGE.ByteRecv == 'E')  ? 1 : 0;	break;
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <AT_catchError+0xec>)
 8001bba:	791b      	ldrb	r3, [r3, #4]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b45      	cmp	r3, #69	; 0x45
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <AT_catchError+0xe8>)
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e04a      	b.n	8001c66 <AT_catchError+0xde>
		case 1:	_State_ERROR = (_STORAGE.ByteRecv == 'R')  ? 2 : 0;	break;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <AT_catchError+0xec>)
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b52      	cmp	r3, #82	; 0x52
 8001bd8:	d101      	bne.n	8001bde <AT_catchError+0x56>
 8001bda:	2202      	movs	r2, #2
 8001bdc:	e000      	b.n	8001be0 <AT_catchError+0x58>
 8001bde:	2200      	movs	r2, #0
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <AT_catchError+0xe8>)
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e03f      	b.n	8001c66 <AT_catchError+0xde>
		case 2:	_State_ERROR = (_STORAGE.ByteRecv == 'R')  ? 3 : 0;	break;
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <AT_catchError+0xec>)
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b52      	cmp	r3, #82	; 0x52
 8001bee:	d101      	bne.n	8001bf4 <AT_catchError+0x6c>
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	e000      	b.n	8001bf6 <AT_catchError+0x6e>
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <AT_catchError+0xe8>)
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e034      	b.n	8001c66 <AT_catchError+0xde>
		case 3:	_State_ERROR = (_STORAGE.ByteRecv == 'O')  ? 4 : 0;	break;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <AT_catchError+0xec>)
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b4f      	cmp	r3, #79	; 0x4f
 8001c04:	d101      	bne.n	8001c0a <AT_catchError+0x82>
 8001c06:	2204      	movs	r2, #4
 8001c08:	e000      	b.n	8001c0c <AT_catchError+0x84>
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <AT_catchError+0xe8>)
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e029      	b.n	8001c66 <AT_catchError+0xde>
		case 4:	_State_ERROR = (_STORAGE.ByteRecv == 'R')  ? 5 : 0;	break;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <AT_catchError+0xec>)
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b52      	cmp	r3, #82	; 0x52
 8001c1a:	d101      	bne.n	8001c20 <AT_catchError+0x98>
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	e000      	b.n	8001c22 <AT_catchError+0x9a>
 8001c20:	2200      	movs	r2, #0
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <AT_catchError+0xe8>)
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e01e      	b.n	8001c66 <AT_catchError+0xde>
		case 5:	_State_ERROR = (_STORAGE.ByteRecv == '\r') ? 6 : 0;	break;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <AT_catchError+0xec>)
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b0d      	cmp	r3, #13
 8001c30:	d101      	bne.n	8001c36 <AT_catchError+0xae>
 8001c32:	2206      	movs	r2, #6
 8001c34:	e000      	b.n	8001c38 <AT_catchError+0xb0>
 8001c36:	2200      	movs	r2, #0
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <AT_catchError+0xe8>)
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e013      	b.n	8001c66 <AT_catchError+0xde>
		case 6:	if(_STORAGE.ByteRecv == '\n'){ _STORAGE.Flags.FlagError = true; }
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <AT_catchError+0xec>)
 8001c40:	791b      	ldrb	r3, [r3, #4]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b0a      	cmp	r3, #10
 8001c46:	d106      	bne.n	8001c56 <AT_catchError+0xce>
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <AT_catchError+0xec>)
 8001c4a:	f892 3bc0 	ldrb.w	r3, [r2, #3008]	; 0xbc0
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	f882 3bc0 	strb.w	r3, [r2, #3008]	; 0xbc0
			_State_ERROR = 0;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <AT_catchError+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]

		break;
 8001c5c:	e003      	b.n	8001c66 <AT_catchError+0xde>

		default:
			_State_ERROR = 0;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <AT_catchError+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
		break;
 8001c64:	bf00      	nop
	}
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000291 	.word	0x20000291
 8001c74:	20000dac 	.word	0x20000dac

08001c78 <AT_TxClear>:

//#########################################################################################################
void AT_TxClear(void){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
   memset((char*)_STORAGE.TxBuffer, AT_SET_ZERO, AT_CORE_BUFFER_SIZE);
 8001c7c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c80:	2100      	movs	r1, #0
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <AT_TxClear+0x14>)
 8001c84:	f00a f977 	bl	800bf76 <memset>
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000138d 	.word	0x2000138d

08001c90 <AT_RxClear>:

//#########################################################################################################
void AT_RxClear(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
   _STORAGE.RxIndex = AT_SET_ZERO;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <AT_RxClear+0x1c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8a3 2bbe 	strh.w	r2, [r3, #3006]	; 0xbbe
   memset((char*)_STORAGE.RxBuffer, AT_SET_ZERO, AT_CORE_BUFFER_SIZE);
 8001c9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <AT_RxClear+0x20>)
 8001ca4:	f00a f967 	bl	800bf76 <memset>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000dac 	.word	0x20000dac
 8001cb0:	20000db1 	.word	0x20000db1

08001cb4 <AT_ClearAllFlag>:

//#########################################################################################################
void AT_ClearAllFlag(void){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	_STORAGE.Flags.AllFlags = AT_SET_ZERO;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <AT_ClearAllFlag+0x18>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2bc0 	strb.w	r2, [r3, #3008]	; 0xbc0
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000dac 	.word	0x20000dac

08001cd0 <gnss_hardwareReset>:
#define GNSS_POWER_OFF()	HAL_GPIO_WritePin(GPS_PWR_CTRL_GPIO_Port, GPS_PWR_CTRL_Pin, GPIO_PIN_RESET)
#define GNSS_POWER_ON()	    HAL_GPIO_WritePin(GPS_PWR_CTRL_GPIO_Port, GPS_PWR_CTRL_Pin, GPIO_PIN_SET)
#define GNSS_RST_OFF()      HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_RESET);
#define GNSS_RST_ON()       HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);

void gnss_hardwareReset(void){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	GNSS_POWER_ON();
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <gnss_hardwareReset+0x3c>)
 8001cda:	f004 ff9f 	bl	8006c1c <HAL_GPIO_WritePin>
	GNSS_RST_OFF();
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <gnss_hardwareReset+0x3c>)
 8001ce4:	f004 ff9a 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f003 fb2b 	bl	8005344 <HAL_Delay>

	GNSS_RST_ON();
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <gnss_hardwareReset+0x3c>)
 8001cf4:	f004 ff92 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(12); /* must more than 10ms */
 8001cf8:	200c      	movs	r0, #12
 8001cfa:	f003 fb23 	bl	8005344 <HAL_Delay>
	GNSS_RST_OFF();
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2102      	movs	r1, #2
 8001d02:	4802      	ldr	r0, [pc, #8]	; (8001d0c <gnss_hardwareReset+0x3c>)
 8001d04:	f004 ff8a 	bl	8006c1c <HAL_GPIO_WritePin>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	48000400 	.word	0x48000400

08001d10 <gnss_init>:

/**********************************************/
/* NETH_GNSS class function                   */
/**********************************************/
bool gnss_init(UART_HandleTypeDef *huart)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	UartInst = huart;
 8001d18:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <gnss_init+0xe8>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]

	if(UartInst == NULL){
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <gnss_init+0xe8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <gnss_init+0x1a>
		return false;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e05b      	b.n	8001de2 <gnss_init+0xd2>
	}

	memset((char*)DataBuffer[0], 0, GNSS_BUFFER_LENGTH);
 8001d2a:	225a      	movs	r2, #90	; 0x5a
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4833      	ldr	r0, [pc, #204]	; (8001dfc <gnss_init+0xec>)
 8001d30:	f00a f921 	bl	800bf76 <memset>
	memset((char*)DataBuffer[1], 0, GNSS_BUFFER_LENGTH);
 8001d34:	225a      	movs	r2, #90	; 0x5a
 8001d36:	2100      	movs	r1, #0
 8001d38:	4831      	ldr	r0, [pc, #196]	; (8001e00 <gnss_init+0xf0>)
 8001d3a:	f00a f91c 	bl	800bf76 <memset>
	memset((char*)DataBuffer[2], 0, GNSS_BUFFER_LENGTH);
 8001d3e:	225a      	movs	r2, #90	; 0x5a
 8001d40:	2100      	movs	r1, #0
 8001d42:	4830      	ldr	r0, [pc, #192]	; (8001e04 <gnss_init+0xf4>)
 8001d44:	f00a f917 	bl	800bf76 <memset>
	memset((char*)DataBuffer[3], 0, GNSS_BUFFER_LENGTH);
 8001d48:	225a      	movs	r2, #90	; 0x5a
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	482e      	ldr	r0, [pc, #184]	; (8001e08 <gnss_init+0xf8>)
 8001d4e:	f00a f912 	bl	800bf76 <memset>
	memset((char*)DataBuffer[4], 0, GNSS_BUFFER_LENGTH);
 8001d52:	225a      	movs	r2, #90	; 0x5a
 8001d54:	2100      	movs	r1, #0
 8001d56:	482d      	ldr	r0, [pc, #180]	; (8001e0c <gnss_init+0xfc>)
 8001d58:	f00a f90d 	bl	800bf76 <memset>
	memset((char*)DataBuffer[5], 0, GNSS_BUFFER_LENGTH);
 8001d5c:	225a      	movs	r2, #90	; 0x5a
 8001d5e:	2100      	movs	r1, #0
 8001d60:	482b      	ldr	r0, [pc, #172]	; (8001e10 <gnss_init+0x100>)
 8001d62:	f00a f908 	bl	800bf76 <memset>
	memset((char*)DataBuffer[6], 0, GNSS_BUFFER_LENGTH);
 8001d66:	225a      	movs	r2, #90	; 0x5a
 8001d68:	2100      	movs	r1, #0
 8001d6a:	482a      	ldr	r0, [pc, #168]	; (8001e14 <gnss_init+0x104>)
 8001d6c:	f00a f903 	bl	800bf76 <memset>
	BufferReady = false;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <gnss_init+0x108>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
	CurrentBuffer = 0;
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <gnss_init+0x10c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

	/* Power-off then ON */
	gnss_hardwareReset();
 8001d7c:	f7ff ffa8 	bl	8001cd0 <gnss_hardwareReset>

	HAL_UART_Abort_IT(UartInst);
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <gnss_init+0xe8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f007 fa49 	bl	800921c <HAL_UART_Abort_IT>
	HAL_Delay(10);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f003 fada 	bl	8005344 <HAL_Delay>
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_RXNE);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <gnss_init+0xe8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <gnss_init+0xe8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_IDLE);
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <gnss_init+0xe8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <gnss_init+0xe8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0210 	orr.w	r2, r2, #16
 8001db6:	601a      	str	r2, [r3, #0]

	//command
	HAL_UART_Transmit(UartInst, (uint8_t*)"$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n", strlen("$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"), 1000);
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <gnss_init+0xe8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	2233      	movs	r2, #51	; 0x33
 8001dc2:	4917      	ldr	r1, [pc, #92]	; (8001e20 <gnss_init+0x110>)
 8001dc4:	f007 f996 	bl	80090f4 <HAL_UART_Transmit>
	_Data.latitude = 9999.999999;
 8001dc8:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <gnss_init+0x114>)
 8001dca:	a409      	add	r4, pc, #36	; (adr r4, 8001df0 <gnss_init+0xe0>)
 8001dcc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dd0:	e9c2 3400 	strd	r3, r4, [r2]
	_Data.longitude = 9999.999999;
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <gnss_init+0x114>)
 8001dd6:	a406      	add	r4, pc, #24	; (adr r4, 8001df0 <gnss_init+0xe0>)
 8001dd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ddc:	e9c2 3402 	strd	r3, r4, [r2, #8]

	return true;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	fff79c84 	.word	0xfff79c84
 8001df4:	40c387ff 	.word	0x40c387ff
 8001df8:	20000294 	.word	0x20000294
 8001dfc:	200002ec 	.word	0x200002ec
 8001e00:	20000346 	.word	0x20000346
 8001e04:	200003a0 	.word	0x200003a0
 8001e08:	200003fa 	.word	0x200003fa
 8001e0c:	20000454 	.word	0x20000454
 8001e10:	200004ae 	.word	0x200004ae
 8001e14:	20000508 	.word	0x20000508
 8001e18:	20000562 	.word	0x20000562
 8001e1c:	20000563 	.word	0x20000563
 8001e20:	08010f38 	.word	0x08010f38
 8001e24:	200002a0 	.word	0x200002a0

08001e28 <gnss_reset>:

void gnss_reset(void){
 8001e28:	b490      	push	{r4, r7}
 8001e2a:	af00      	add	r7, sp, #0
	_Data.latitude = 9999.999999;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <gnss_reset+0x30>)
 8001e2e:	a408      	add	r4, pc, #32	; (adr r4, 8001e50 <gnss_reset+0x28>)
 8001e30:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e34:	e9c2 3400 	strd	r3, r4, [r2]
	_Data.longitude = 9999.999999;
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <gnss_reset+0x30>)
 8001e3a:	a405      	add	r4, pc, #20	; (adr r4, 8001e50 <gnss_reset+0x28>)
 8001e3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e40:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc90      	pop	{r4, r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	f3af 8000 	nop.w
 8001e50:	fff79c84 	.word	0xfff79c84
 8001e54:	40c387ff 	.word	0x40c387ff
 8001e58:	200002a0 	.word	0x200002a0

08001e5c <gnss_updatePosition>:

void gnss_updatePosition(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	memset((char*)DataBuffer[0], 0, GNSS_BUFFER_LENGTH);
 8001e60:	225a      	movs	r2, #90	; 0x5a
 8001e62:	2100      	movs	r1, #0
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <gnss_updatePosition+0x5c>)
 8001e66:	f00a f886 	bl	800bf76 <memset>
	memset((char*)DataBuffer[1], 0, GNSS_BUFFER_LENGTH);
 8001e6a:	225a      	movs	r2, #90	; 0x5a
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4813      	ldr	r0, [pc, #76]	; (8001ebc <gnss_updatePosition+0x60>)
 8001e70:	f00a f881 	bl	800bf76 <memset>
	memset((char*)DataBuffer[2], 0, GNSS_BUFFER_LENGTH);
 8001e74:	225a      	movs	r2, #90	; 0x5a
 8001e76:	2100      	movs	r1, #0
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <gnss_updatePosition+0x64>)
 8001e7a:	f00a f87c 	bl	800bf76 <memset>
	memset((char*)DataBuffer[3], 0, GNSS_BUFFER_LENGTH);
 8001e7e:	225a      	movs	r2, #90	; 0x5a
 8001e80:	2100      	movs	r1, #0
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <gnss_updatePosition+0x68>)
 8001e84:	f00a f877 	bl	800bf76 <memset>
	memset((char*)DataBuffer[4], 0, GNSS_BUFFER_LENGTH);
 8001e88:	225a      	movs	r2, #90	; 0x5a
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <gnss_updatePosition+0x6c>)
 8001e8e:	f00a f872 	bl	800bf76 <memset>
	memset((char*)DataBuffer[5], 0, GNSS_BUFFER_LENGTH);
 8001e92:	225a      	movs	r2, #90	; 0x5a
 8001e94:	2100      	movs	r1, #0
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <gnss_updatePosition+0x70>)
 8001e98:	f00a f86d 	bl	800bf76 <memset>
	memset((char*)DataBuffer[6], 0, GNSS_BUFFER_LENGTH);
 8001e9c:	225a      	movs	r2, #90	; 0x5a
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <gnss_updatePosition+0x74>)
 8001ea2:	f00a f868 	bl	800bf76 <memset>
	BufferReady = false;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <gnss_updatePosition+0x78>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
	CurrentBuffer = 0;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <gnss_updatePosition+0x7c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200002ec 	.word	0x200002ec
 8001ebc:	20000346 	.word	0x20000346
 8001ec0:	200003a0 	.word	0x200003a0
 8001ec4:	200003fa 	.word	0x200003fa
 8001ec8:	20000454 	.word	0x20000454
 8001ecc:	200004ae 	.word	0x200004ae
 8001ed0:	20000508 	.word	0x20000508
 8001ed4:	20000562 	.word	0x20000562
 8001ed8:	20000563 	.word	0x20000563

08001edc <gnss_RxCallback>:



void gnss_RxCallback(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	/* If received new data byte */
	if(__HAL_UART_GET_IT(UartInst,UART_IT_RXNE)){
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <gnss_RxCallback+0x128>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <gnss_RxCallback+0x30>
		RxByte = (uint8_t)(UartInst->Instance->RDR);
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <gnss_RxCallback+0x128>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <gnss_RxCallback+0x12c>)
 8001efe:	701a      	strb	r2, [r3, #0]
#if(GNSS_ECHO_MODE)
		GNSS_DBG_UART.Instance->TDR = RxByte;
#endif
		gnss_chartoBuffer(RxByte);
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <gnss_RxCallback+0x12c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f8d6 	bl	80020b8 <gnss_chartoBuffer>
	}

	/* Idle flag set, all bytes received */
	if(__HAL_UART_GET_IT(UartInst, UART_IT_IDLE)){
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <gnss_RxCallback+0x128>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d071      	beq.n	8002000 <gnss_RxCallback+0x124>
		__HAL_UART_CLEAR_IDLEFLAG(UartInst);
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <gnss_RxCallback+0x128>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	621a      	str	r2, [r3, #32]

		gnss_ExtractData();
 8001f26:	f000 f93b 	bl	80021a0 <gnss_ExtractData>
		gnss_updatePosition();
 8001f2a:	f7ff ff97 	bl	8001e5c <gnss_updatePosition>
		GNSS_DataError = __HAL_UART_GET_FLAG(UartInst, UART_FLAG_ORE);
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <gnss_RxCallback+0x128>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <gnss_RxCallback+0x130>)
 8001f46:	701a      	strb	r2, [r3, #0]
		if(GNSS_DataError){
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <gnss_RxCallback+0x130>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d037      	beq.n	8001fc0 <gnss_RxCallback+0xe4>
			HAL_UART_Abort_IT(UartInst);
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <gnss_RxCallback+0x128>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f007 f961 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f003 f9f2 	bl	8005344 <HAL_Delay>
			__HAL_UART_DISABLE_IT(UartInst, UART_IT_RXNE);
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <gnss_RxCallback+0x128>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <gnss_RxCallback+0x128>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0220 	bic.w	r2, r2, #32
 8001f72:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(UartInst, UART_IT_IDLE);
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <gnss_RxCallback+0x128>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <gnss_RxCallback+0x128>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0210 	bic.w	r2, r2, #16
 8001f86:	601a      	str	r2, [r3, #0]
			HAL_UART_Abort_IT(UartInst);
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <gnss_RxCallback+0x128>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f007 f945 	bl	800921c <HAL_UART_Abort_IT>
			HAL_Delay(10);
 8001f92:	200a      	movs	r0, #10
 8001f94:	f003 f9d6 	bl	8005344 <HAL_Delay>
			__HAL_UART_ENABLE_IT(UartInst, UART_IT_RXNE);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <gnss_RxCallback+0x128>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <gnss_RxCallback+0x128>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(UartInst, UART_IT_IDLE);
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <gnss_RxCallback+0x128>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <gnss_RxCallback+0x128>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0210 	orr.w	r2, r2, #16
 8001fbe:	601a      	str	r2, [r3, #0]
		}

		_Data.IdleCount++;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <gnss_RxCallback+0x134>)
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <gnss_RxCallback+0x134>)
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		if(_Data.IdleCount >= 1 && GNSS_DataError == false){
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <gnss_RxCallback+0x134>)
 8001fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <gnss_RxCallback+0x114>
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <gnss_RxCallback+0x130>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <gnss_RxCallback+0x114>
			GNSS_DataReady = true;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <gnss_RxCallback+0x138>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
		}
		else if(_Data.IdleCount >= 5){
			GNSS_DataReady = true;
		}
	}
}
 8001fee:	e007      	b.n	8002000 <gnss_RxCallback+0x124>
		else if(_Data.IdleCount >= 5){
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <gnss_RxCallback+0x134>)
 8001ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d902      	bls.n	8002000 <gnss_RxCallback+0x124>
			GNSS_DataReady = true;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <gnss_RxCallback+0x138>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000294 	.word	0x20000294
 8002008:	200002e8 	.word	0x200002e8
 800200c:	20000299 	.word	0x20000299
 8002010:	200002a0 	.word	0x200002a0
 8002014:	20000298 	.word	0x20000298

08002018 <gnss_RxITEnable>:

void gnss_RxITEnable(void){
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(UartInst);
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <gnss_RxITEnable+0x50>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f007 f8fb 	bl	800921c <HAL_UART_Abort_IT>
	HAL_Delay(10);
 8002026:	200a      	movs	r0, #10
 8002028:	f003 f98c 	bl	8005344 <HAL_Delay>
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_RXNE);
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <gnss_RxITEnable+0x50>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <gnss_RxITEnable+0x50>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(UartInst, UART_IT_IDLE);
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <gnss_RxITEnable+0x50>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <gnss_RxITEnable+0x50>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0210 	orr.w	r2, r2, #16
 8002052:	601a      	str	r2, [r3, #0]
	_Data.IdleCount = 0;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <gnss_RxITEnable+0x54>)
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	GNSS_DataReady = false;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <gnss_RxITEnable+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000294 	.word	0x20000294
 800206c:	200002a0 	.word	0x200002a0
 8002070:	20000298 	.word	0x20000298

08002074 <gnss_RxITDisable>:

void gnss_RxITDisable(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(UartInst);
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <gnss_RxITDisable+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f007 f8cd 	bl	800921c <HAL_UART_Abort_IT>
	HAL_Delay(10);
 8002082:	200a      	movs	r0, #10
 8002084:	f003 f95e 	bl	8005344 <HAL_Delay>
	__HAL_UART_DISABLE_IT(UartInst, UART_IT_RXNE);
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <gnss_RxITDisable+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <gnss_RxITDisable+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0220 	bic.w	r2, r2, #32
 800209a:	601a      	str	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(UartInst, UART_IT_IDLE);
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <gnss_RxITDisable+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <gnss_RxITDisable+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0210 	bic.w	r2, r2, #16
 80020ae:	601a      	str	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000294 	.word	0x20000294

080020b8 <gnss_chartoBuffer>:



void gnss_chartoBuffer(char rx_data)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	static volatile int i=0, j=0; /* i for index, j for commas position */

	if (rx_data == '$')
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b24      	cmp	r3, #36	; 0x24
 80020c6:	d105      	bne.n	80020d4 <gnss_chartoBuffer+0x1c>
	{
		i=0;
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <gnss_chartoBuffer+0xd0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
		j=0;
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <gnss_chartoBuffer+0xd4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	}

	DataBuffer[CurrentBuffer][i] = rx_data;
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <gnss_chartoBuffer+0xd8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <gnss_chartoBuffer+0xd0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	492c      	ldr	r1, [pc, #176]	; (8002194 <gnss_chartoBuffer+0xdc>)
 80020e2:	225a      	movs	r2, #90	; 0x5a
 80020e4:	fb02 f200 	mul.w	r2, r2, r0
 80020e8:	440a      	add	r2, r1
 80020ea:	4413      	add	r3, r2
 80020ec:	79fa      	ldrb	r2, [r7, #7]
 80020ee:	701a      	strb	r2, [r3, #0]

	if (rx_data == ',')
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b2c      	cmp	r3, #44	; 0x2c
 80020f4:	d11b      	bne.n	800212e <gnss_chartoBuffer+0x76>
	{
		comma[CurrentBuffer][j]=i;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <gnss_chartoBuffer+0xd8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461c      	mov	r4, r3
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <gnss_chartoBuffer+0xd4>)
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <gnss_chartoBuffer+0xd0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4824      	ldr	r0, [pc, #144]	; (8002198 <gnss_chartoBuffer+0xe0>)
 8002108:	4623      	mov	r3, r4
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4423      	add	r3, r4
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		j++;
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <gnss_chartoBuffer+0xd4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <gnss_chartoBuffer+0xd4>)
 800211e:	6013      	str	r3, [r2, #0]
		if (j > 19)
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <gnss_chartoBuffer+0xd4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b13      	cmp	r3, #19
 8002126:	dd02      	ble.n	800212e <gnss_chartoBuffer+0x76>
		{
			j = 19;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <gnss_chartoBuffer+0xd4>)
 800212a:	2213      	movs	r2, #19
 800212c:	601a      	str	r2, [r3, #0]
		}
	}

	i++;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <gnss_chartoBuffer+0xd0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <gnss_chartoBuffer+0xd0>)
 8002136:	6013      	str	r3, [r2, #0]

	if (j != 0)
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <gnss_chartoBuffer+0xd4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01f      	beq.n	8002180 <gnss_chartoBuffer+0xc8>
	{
		if('\n' != rx_data)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b0a      	cmp	r3, #10
 8002144:	d00f      	beq.n	8002166 <gnss_chartoBuffer+0xae>
		{
			DataBuffer[CurrentBuffer][i-1] = rx_data;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <gnss_chartoBuffer+0xd8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <gnss_chartoBuffer+0xd0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	490f      	ldr	r1, [pc, #60]	; (8002194 <gnss_chartoBuffer+0xdc>)
 8002156:	225a      	movs	r2, #90	; 0x5a
 8002158:	fb02 f200 	mul.w	r2, r2, r0
 800215c:	440a      	add	r2, r1
 800215e:	4413      	add	r3, r2
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	701a      	strb	r2, [r3, #0]
			{
				CurrentBuffer++;
			}
		}
	}
}
 8002164:	e00c      	b.n	8002180 <gnss_chartoBuffer+0xc8>
			if(true == gnss_ChecksumVerify((uint8_t*)DataBuffer))
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <gnss_chartoBuffer+0xdc>)
 8002168:	f000 fb40 	bl	80027ec <gnss_ChecksumVerify>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <gnss_chartoBuffer+0xc8>
				CurrentBuffer++;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <gnss_chartoBuffer+0xd8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <gnss_chartoBuffer+0xd8>)
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	20000794 	.word	0x20000794
 800218c:	20000798 	.word	0x20000798
 8002190:	20000563 	.word	0x20000563
 8002194:	200002ec 	.word	0x200002ec
 8002198:	20000564 	.word	0x20000564
 800219c:	00000000 	.word	0x00000000

080021a0 <gnss_ExtractData>:


void gnss_ExtractData(void)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b08f      	sub	sp, #60	; 0x3c
 80021a4:	af00      	add	r7, sp, #0
	double degree, second;
	double lat, lng;
//	uint8_t nmeaType[7] = {0};

	/* Detect NMEA of each buffer */
	for(int i =0;i<7;i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021aa:	e2f5      	b.n	8002798 <gnss_ExtractData+0x5f8>
	{
	   if((DataBuffer[i][4] == 'M') && (DataBuffer[i][5] == 'C'))
 80021ac:	4ab2      	ldr	r2, [pc, #712]	; (8002478 <gnss_ExtractData+0x2d8>)
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	215a      	movs	r1, #90	; 0x5a
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b4d      	cmp	r3, #77	; 0x4d
 80021c0:	f040 8164 	bne.w	800248c <gnss_ExtractData+0x2ec>
 80021c4:	4aac      	ldr	r2, [pc, #688]	; (8002478 <gnss_ExtractData+0x2d8>)
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	215a      	movs	r1, #90	; 0x5a
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3305      	adds	r3, #5
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b43      	cmp	r3, #67	; 0x43
 80021d8:	f040 8158 	bne.w	800248c <gnss_ExtractData+0x2ec>
	   {
			/* Fixed status V = void, A = active */
			_Data.fixedStatus = DataBuffer[i][comma[i][1]+1];
 80021dc:	49a7      	ldr	r1, [pc, #668]	; (800247c <gnss_ExtractData+0x2dc>)
 80021de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	440b      	add	r3, r1
 80021ea:	3304      	adds	r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	49a1      	ldr	r1, [pc, #644]	; (8002478 <gnss_ExtractData+0x2d8>)
 80021f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f4:	205a      	movs	r0, #90	; 0x5a
 80021f6:	fb00 f202 	mul.w	r2, r0, r2
 80021fa:	440a      	add	r2, r1
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b9f      	ldr	r3, [pc, #636]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002204:	741a      	strb	r2, [r3, #16]

			/* Date */
			_Data.date = atoi((char*)&DataBuffer[i][comma[i][8]+1]);
 8002206:	499d      	ldr	r1, [pc, #628]	; (800247c <gnss_ExtractData+0x2dc>)
 8002208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	440b      	add	r3, r1
 8002214:	3320      	adds	r3, #32
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221c:	215a      	movs	r1, #90	; 0x5a
 800221e:	fb01 f202 	mul.w	r2, r1, r2
 8002222:	4413      	add	r3, r2
 8002224:	4a94      	ldr	r2, [pc, #592]	; (8002478 <gnss_ExtractData+0x2d8>)
 8002226:	4413      	add	r3, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f009 fe6a 	bl	800bf02 <atoi>
 800222e:	4602      	mov	r2, r0
 8002230:	4b93      	ldr	r3, [pc, #588]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002232:	615a      	str	r2, [r3, #20]

			/* UTC time*/
			_Data.utcTime = atoi((char*)&DataBuffer[i][comma[i][0]+1]);
 8002234:	4991      	ldr	r1, [pc, #580]	; (800247c <gnss_ExtractData+0x2dc>)
 8002236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002248:	215a      	movs	r1, #90	; 0x5a
 800224a:	fb01 f202 	mul.w	r2, r1, r2
 800224e:	4413      	add	r3, r2
 8002250:	4a89      	ldr	r2, [pc, #548]	; (8002478 <gnss_ExtractData+0x2d8>)
 8002252:	4413      	add	r3, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f009 fe54 	bl	800bf02 <atoi>
 800225a:	4602      	mov	r2, r0
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <gnss_ExtractData+0x2e0>)
 800225e:	619a      	str	r2, [r3, #24]

			/* Latitude/Longitude */
			if('A' == _Data.fixedStatus)
 8002260:	4b87      	ldr	r3, [pc, #540]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002262:	7c1b      	ldrb	r3, [r3, #16]
 8002264:	2b41      	cmp	r3, #65	; 0x41
 8002266:	f040 80f4 	bne.w	8002452 <gnss_ExtractData+0x2b2>
			{
				/* Due to incorrect value when use %f received data, So, will integer instead */
				tempLat = strtod((char*)&DataBuffer[i][comma[i][2]+1],NULL);
 800226a:	4984      	ldr	r1, [pc, #528]	; (800247c <gnss_ExtractData+0x2dc>)
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	440b      	add	r3, r1
 8002278:	3308      	adds	r3, #8
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002280:	215a      	movs	r1, #90	; 0x5a
 8002282:	fb01 f202 	mul.w	r2, r1, r2
 8002286:	4413      	add	r3, r2
 8002288:	4a7b      	ldr	r2, [pc, #492]	; (8002478 <gnss_ExtractData+0x2d8>)
 800228a:	4413      	add	r3, r2
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f00b fca2 	bl	800dbd8 <strtod>
 8002294:	ed87 0b08 	vstr	d0, [r7, #32]
				tempLng = strtod((char*)&DataBuffer[i][comma[i][4]+1],NULL);
 8002298:	4978      	ldr	r1, [pc, #480]	; (800247c <gnss_ExtractData+0x2dc>)
 800229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	440b      	add	r3, r1
 80022a6:	3310      	adds	r3, #16
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	215a      	movs	r1, #90	; 0x5a
 80022b0:	fb01 f202 	mul.w	r2, r1, r2
 80022b4:	4413      	add	r3, r2
 80022b6:	4a70      	ldr	r2, [pc, #448]	; (8002478 <gnss_ExtractData+0x2d8>)
 80022b8:	4413      	add	r3, r2
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f00b fc8b 	bl	800dbd8 <strtod>
 80022c2:	ed87 0b06 	vstr	d0, [r7, #24]

				//sscanf((char*)&DataBuffer[i][comma[i][2]+1], "%lf", &tempLat);
				//sscanf((char*)&DataBuffer[i][comma[i][4]+1], "%lf", &tempLng);

				/* Latitude calculation */
				degree = (int)(tempLat / 100.0);
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <gnss_ExtractData+0x2e4>)
 80022cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022d0:	f7fe fad4 	bl	800087c <__aeabi_ddiv>
 80022d4:	4603      	mov	r3, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	4618      	mov	r0, r3
 80022da:	4621      	mov	r1, r4
 80022dc:	f7fe fc54 	bl	8000b88 <__aeabi_d2iz>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f936 	bl	8000554 <__aeabi_i2d>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
				second = tempLat - (degree * 100.0);
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4b63      	ldr	r3, [pc, #396]	; (8002484 <gnss_ExtractData+0x2e4>)
 80022f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022fa:	f7fe f995 	bl	8000628 <__aeabi_dmul>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	461a      	mov	r2, r3
 8002304:	4623      	mov	r3, r4
 8002306:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800230a:	f7fd ffd5 	bl	80002b8 <__aeabi_dsub>
 800230e:	4603      	mov	r3, r0
 8002310:	460c      	mov	r4, r1
 8002312:	e9c7 3402 	strd	r3, r4, [r7, #8]
				lat = degree + (second / 60.0);
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <gnss_ExtractData+0x2e8>)
 800231c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002320:	f7fe faac 	bl	800087c <__aeabi_ddiv>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	461a      	mov	r2, r3
 800232a:	4623      	mov	r3, r4
 800232c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002330:	f7fd ffc4 	bl	80002bc <__adddf3>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	e9c7 3400 	strd	r3, r4, [r7]
				if(DataBuffer[i][comma[i][3]+1] == 'S')
 800233c:	494f      	ldr	r1, [pc, #316]	; (800247c <gnss_ExtractData+0x2dc>)
 800233e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	440b      	add	r3, r1
 800234a:	330c      	adds	r3, #12
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4949      	ldr	r1, [pc, #292]	; (8002478 <gnss_ExtractData+0x2d8>)
 8002352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002354:	205a      	movs	r0, #90	; 0x5a
 8002356:	fb00 f202 	mul.w	r2, r0, r2
 800235a:	440a      	add	r2, r1
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b53      	cmp	r3, #83	; 0x53
 8002364:	d105      	bne.n	8002372 <gnss_ExtractData+0x1d2>
				{
					lat = -lat;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002370:	607b      	str	r3, [r7, #4]
				}
				_Data.latitude = (degree + (second / 60.0));
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <gnss_ExtractData+0x2e8>)
 8002378:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800237c:	f7fe fa7e 	bl	800087c <__aeabi_ddiv>
 8002380:	4603      	mov	r3, r0
 8002382:	460c      	mov	r4, r1
 8002384:	4618      	mov	r0, r3
 8002386:	4621      	mov	r1, r4
 8002388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800238c:	f7fd ff96 	bl	80002bc <__adddf3>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002396:	e9c2 3400 	strd	r3, r4, [r2]

				/* Latitude calculation */
				degree = (int)(tempLng / 100.0);
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <gnss_ExtractData+0x2e4>)
 80023a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023a4:	f7fe fa6a 	bl	800087c <__aeabi_ddiv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	f7fe fbea 	bl	8000b88 <__aeabi_d2iz>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8cc 	bl	8000554 <__aeabi_i2d>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
				second = tempLng - (degree * 100.0);
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <gnss_ExtractData+0x2e4>)
 80023ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ce:	f7fe f92b 	bl	8000628 <__aeabi_dmul>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	461a      	mov	r2, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023de:	f7fd ff6b 	bl	80002b8 <__aeabi_dsub>
 80023e2:	4603      	mov	r3, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
				lng = degree + (second / 60.0);
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <gnss_ExtractData+0x2e8>)
 80023f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023f4:	f7fe fa42 	bl	800087c <__aeabi_ddiv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002404:	f7fd ff5a 	bl	80002bc <__adddf3>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
				if(DataBuffer[i][comma[i][5]+1] == 'W')
 8002410:	491a      	ldr	r1, [pc, #104]	; (800247c <gnss_ExtractData+0x2dc>)
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	440b      	add	r3, r1
 800241e:	3314      	adds	r3, #20
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4914      	ldr	r1, [pc, #80]	; (8002478 <gnss_ExtractData+0x2d8>)
 8002426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002428:	205a      	movs	r0, #90	; 0x5a
 800242a:	fb00 f202 	mul.w	r2, r0, r2
 800242e:	440a      	add	r2, r1
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b57      	cmp	r3, #87	; 0x57
 8002438:	d105      	bne.n	8002446 <gnss_ExtractData+0x2a6>
				{
					lng = -lng;
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002440:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
				}
				_Data.longitude = lng;
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002448:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800244c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			if('A' == _Data.fixedStatus)
 8002450:	e19f      	b.n	8002792 <gnss_ExtractData+0x5f2>
			}
			else
			{
				_Data.latitude  = 999.999999;
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002454:	a406      	add	r4, pc, #24	; (adr r4, 8002470 <gnss_ExtractData+0x2d0>)
 8002456:	e9d4 3400 	ldrd	r3, r4, [r4]
 800245a:	e9c2 3400 	strd	r3, r4, [r2]
				_Data.longitude = 999.999999;
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <gnss_ExtractData+0x2e0>)
 8002460:	a403      	add	r4, pc, #12	; (adr r4, 8002470 <gnss_ExtractData+0x2d0>)
 8002462:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002466:	e9c2 3402 	strd	r3, r4, [r2, #8]
			if('A' == _Data.fixedStatus)
 800246a:	e192      	b.n	8002792 <gnss_ExtractData+0x5f2>
 800246c:	f3af 8000 	nop.w
 8002470:	ff79c843 	.word	0xff79c843
 8002474:	408f3fff 	.word	0x408f3fff
 8002478:	200002ec 	.word	0x200002ec
 800247c:	20000564 	.word	0x20000564
 8002480:	200002a0 	.word	0x200002a0
 8002484:	40590000 	.word	0x40590000
 8002488:	404e0000 	.word	0x404e0000
			}
	   }
	   else if((DataBuffer[i][4] == 'T') && (DataBuffer[i][5] == 'G'))
 800248c:	4a9e      	ldr	r2, [pc, #632]	; (8002708 <gnss_ExtractData+0x568>)
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	215a      	movs	r1, #90	; 0x5a
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b54      	cmp	r3, #84	; 0x54
 80024a0:	d145      	bne.n	800252e <gnss_ExtractData+0x38e>
 80024a2:	4a99      	ldr	r2, [pc, #612]	; (8002708 <gnss_ExtractData+0x568>)
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	215a      	movs	r1, #90	; 0x5a
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3305      	adds	r3, #5
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b47      	cmp	r3, #71	; 0x47
 80024b6:	d13a      	bne.n	800252e <gnss_ExtractData+0x38e>
	   {
		   _Data.speed_N = atof((char*)&DataBuffer[i][comma[i][4]+1]);
 80024b8:	4994      	ldr	r1, [pc, #592]	; (800270c <gnss_ExtractData+0x56c>)
 80024ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	3310      	adds	r3, #16
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ce:	215a      	movs	r1, #90	; 0x5a
 80024d0:	fb01 f202 	mul.w	r2, r1, r2
 80024d4:	4413      	add	r3, r2
 80024d6:	4a8c      	ldr	r2, [pc, #560]	; (8002708 <gnss_ExtractData+0x568>)
 80024d8:	4413      	add	r3, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f009 fd0e 	bl	800befc <atof>
 80024e0:	ec54 3b10 	vmov	r3, r4, d0
 80024e4:	4618      	mov	r0, r3
 80024e6:	4621      	mov	r1, r4
 80024e8:	f7fe fb96 	bl	8000c18 <__aeabi_d2f>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b88      	ldr	r3, [pc, #544]	; (8002710 <gnss_ExtractData+0x570>)
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
		   _Data.speed_k = atof((char*)&DataBuffer[i][comma[i][6]+1]);
 80024f2:	4986      	ldr	r1, [pc, #536]	; (800270c <gnss_ExtractData+0x56c>)
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	440b      	add	r3, r1
 8002500:	3318      	adds	r3, #24
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002508:	215a      	movs	r1, #90	; 0x5a
 800250a:	fb01 f202 	mul.w	r2, r1, r2
 800250e:	4413      	add	r3, r2
 8002510:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <gnss_ExtractData+0x568>)
 8002512:	4413      	add	r3, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f009 fcf1 	bl	800befc <atof>
 800251a:	ec54 3b10 	vmov	r3, r4, d0
 800251e:	4618      	mov	r0, r3
 8002520:	4621      	mov	r1, r4
 8002522:	f7fe fb79 	bl	8000c18 <__aeabi_d2f>
 8002526:	4602      	mov	r2, r0
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <gnss_ExtractData+0x570>)
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
 800252c:	e131      	b.n	8002792 <gnss_ExtractData+0x5f2>
	   }
	   else if((DataBuffer[i][4] == 'G') && (DataBuffer[i][5] == 'A'))
 800252e:	4a76      	ldr	r2, [pc, #472]	; (8002708 <gnss_ExtractData+0x568>)
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	215a      	movs	r1, #90	; 0x5a
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b47      	cmp	r3, #71	; 0x47
 8002542:	d173      	bne.n	800262c <gnss_ExtractData+0x48c>
 8002544:	4a70      	ldr	r2, [pc, #448]	; (8002708 <gnss_ExtractData+0x568>)
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	215a      	movs	r1, #90	; 0x5a
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3305      	adds	r3, #5
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b41      	cmp	r3, #65	; 0x41
 8002558:	d168      	bne.n	800262c <gnss_ExtractData+0x48c>
	   {

		   _Data.fixQuality    = atoi((char*)&DataBuffer[i][comma[i][5]+1]);
 800255a:	496c      	ldr	r1, [pc, #432]	; (800270c <gnss_ExtractData+0x56c>)
 800255c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	440b      	add	r3, r1
 8002568:	3314      	adds	r3, #20
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	215a      	movs	r1, #90	; 0x5a
 8002572:	fb01 f202 	mul.w	r2, r1, r2
 8002576:	4413      	add	r3, r2
 8002578:	4a63      	ldr	r2, [pc, #396]	; (8002708 <gnss_ExtractData+0x568>)
 800257a:	4413      	add	r3, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f009 fcc0 	bl	800bf02 <atoi>
 8002582:	4602      	mov	r2, r0
 8002584:	4b62      	ldr	r3, [pc, #392]	; (8002710 <gnss_ExtractData+0x570>)
 8002586:	61da      	str	r2, [r3, #28]
		   _Data.numSatellites = atoi((char*)&DataBuffer[i][comma[i][6]+1]);
 8002588:	4960      	ldr	r1, [pc, #384]	; (800270c <gnss_ExtractData+0x56c>)
 800258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3318      	adds	r3, #24
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259e:	215a      	movs	r1, #90	; 0x5a
 80025a0:	fb01 f202 	mul.w	r2, r1, r2
 80025a4:	4413      	add	r3, r2
 80025a6:	4a58      	ldr	r2, [pc, #352]	; (8002708 <gnss_ExtractData+0x568>)
 80025a8:	4413      	add	r3, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f009 fca9 	bl	800bf02 <atoi>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b57      	ldr	r3, [pc, #348]	; (8002710 <gnss_ExtractData+0x570>)
 80025b4:	621a      	str	r2, [r3, #32]
		   _Data.altitude      = atof((char*)&DataBuffer[i][comma[i][8]+1]);
 80025b6:	4955      	ldr	r1, [pc, #340]	; (800270c <gnss_ExtractData+0x56c>)
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	440b      	add	r3, r1
 80025c4:	3320      	adds	r3, #32
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025cc:	215a      	movs	r1, #90	; 0x5a
 80025ce:	fb01 f202 	mul.w	r2, r1, r2
 80025d2:	4413      	add	r3, r2
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <gnss_ExtractData+0x568>)
 80025d6:	4413      	add	r3, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f009 fc8f 	bl	800befc <atof>
 80025de:	ec54 3b10 	vmov	r3, r4, d0
 80025e2:	4618      	mov	r0, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	f7fe fb17 	bl	8000c18 <__aeabi_d2f>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <gnss_ExtractData+0x570>)
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
		   _Data.height        = atof((char*)&DataBuffer[i][comma[i][10]+1]);
 80025f0:	4946      	ldr	r1, [pc, #280]	; (800270c <gnss_ExtractData+0x56c>)
 80025f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	440b      	add	r3, r1
 80025fe:	3328      	adds	r3, #40	; 0x28
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002606:	215a      	movs	r1, #90	; 0x5a
 8002608:	fb01 f202 	mul.w	r2, r1, r2
 800260c:	4413      	add	r3, r2
 800260e:	4a3e      	ldr	r2, [pc, #248]	; (8002708 <gnss_ExtractData+0x568>)
 8002610:	4413      	add	r3, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f009 fc72 	bl	800befc <atof>
 8002618:	ec54 3b10 	vmov	r3, r4, d0
 800261c:	4618      	mov	r0, r3
 800261e:	4621      	mov	r1, r4
 8002620:	f7fe fafa 	bl	8000c18 <__aeabi_d2f>
 8002624:	4602      	mov	r2, r0
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <gnss_ExtractData+0x570>)
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
 800262a:	e0b2      	b.n	8002792 <gnss_ExtractData+0x5f2>
	   }
	   else if((DataBuffer[i][4] == 'S') && (DataBuffer[i][5] == 'A'))
 800262c:	4a36      	ldr	r2, [pc, #216]	; (8002708 <gnss_ExtractData+0x568>)
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	215a      	movs	r1, #90	; 0x5a
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b53      	cmp	r3, #83	; 0x53
 8002640:	d168      	bne.n	8002714 <gnss_ExtractData+0x574>
 8002642:	4a31      	ldr	r2, [pc, #196]	; (8002708 <gnss_ExtractData+0x568>)
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	215a      	movs	r1, #90	; 0x5a
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3305      	adds	r3, #5
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b41      	cmp	r3, #65	; 0x41
 8002656:	d15d      	bne.n	8002714 <gnss_ExtractData+0x574>
	   {

			_Data.PDOP = atof((char*)&DataBuffer[i][comma[i][14]+1]);
 8002658:	492c      	ldr	r1, [pc, #176]	; (800270c <gnss_ExtractData+0x56c>)
 800265a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	440b      	add	r3, r1
 8002666:	3338      	adds	r3, #56	; 0x38
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	215a      	movs	r1, #90	; 0x5a
 8002670:	fb01 f202 	mul.w	r2, r1, r2
 8002674:	4413      	add	r3, r2
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <gnss_ExtractData+0x568>)
 8002678:	4413      	add	r3, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f009 fc3e 	bl	800befc <atof>
 8002680:	ec54 3b10 	vmov	r3, r4, d0
 8002684:	4618      	mov	r0, r3
 8002686:	4621      	mov	r1, r4
 8002688:	f7fe fac6 	bl	8000c18 <__aeabi_d2f>
 800268c:	4602      	mov	r2, r0
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <gnss_ExtractData+0x570>)
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
			_Data.HDOP = atof((char*)&DataBuffer[i][comma[i][15]+1]);
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <gnss_ExtractData+0x56c>)
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	440b      	add	r3, r1
 80026a0:	333c      	adds	r3, #60	; 0x3c
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a8:	215a      	movs	r1, #90	; 0x5a
 80026aa:	fb01 f202 	mul.w	r2, r1, r2
 80026ae:	4413      	add	r3, r2
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <gnss_ExtractData+0x568>)
 80026b2:	4413      	add	r3, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f009 fc21 	bl	800befc <atof>
 80026ba:	ec54 3b10 	vmov	r3, r4, d0
 80026be:	4618      	mov	r0, r3
 80026c0:	4621      	mov	r1, r4
 80026c2:	f7fe faa9 	bl	8000c18 <__aeabi_d2f>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <gnss_ExtractData+0x570>)
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
			_Data.VDOP = atof((char*)&DataBuffer[i][comma[i][16]+1]);
 80026cc:	490f      	ldr	r1, [pc, #60]	; (800270c <gnss_ExtractData+0x56c>)
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	440b      	add	r3, r1
 80026da:	3340      	adds	r3, #64	; 0x40
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e2:	215a      	movs	r1, #90	; 0x5a
 80026e4:	fb01 f202 	mul.w	r2, r1, r2
 80026e8:	4413      	add	r3, r2
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <gnss_ExtractData+0x568>)
 80026ec:	4413      	add	r3, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 fc04 	bl	800befc <atof>
 80026f4:	ec54 3b10 	vmov	r3, r4, d0
 80026f8:	4618      	mov	r0, r3
 80026fa:	4621      	mov	r1, r4
 80026fc:	f7fe fa8c 	bl	8000c18 <__aeabi_d2f>
 8002700:	4602      	mov	r2, r0
 8002702:	4b03      	ldr	r3, [pc, #12]	; (8002710 <gnss_ExtractData+0x570>)
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
 8002706:	e044      	b.n	8002792 <gnss_ExtractData+0x5f2>
 8002708:	200002ec 	.word	0x200002ec
 800270c:	20000564 	.word	0x20000564
 8002710:	200002a0 	.word	0x200002a0
	   }
	   else if((DataBuffer[i][4] == 'S') && (DataBuffer[i][5] == 'V'))
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <gnss_ExtractData+0x608>)
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	215a      	movs	r1, #90	; 0x5a
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3304      	adds	r3, #4
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b53      	cmp	r3, #83	; 0x53
 8002728:	d10a      	bne.n	8002740 <gnss_ExtractData+0x5a0>
 800272a:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <gnss_ExtractData+0x608>)
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	215a      	movs	r1, #90	; 0x5a
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b56      	cmp	r3, #86	; 0x56
 800273e:	d028      	beq.n	8002792 <gnss_ExtractData+0x5f2>
	   {

	   }
	   else if((DataBuffer[i][4] == 'L') && (DataBuffer[i][5] == 'L'))
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <gnss_ExtractData+0x608>)
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	215a      	movs	r1, #90	; 0x5a
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b4c      	cmp	r3, #76	; 0x4c
 8002754:	d10a      	bne.n	800276c <gnss_ExtractData+0x5cc>
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <gnss_ExtractData+0x608>)
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	215a      	movs	r1, #90	; 0x5a
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3305      	adds	r3, #5
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b4c      	cmp	r3, #76	; 0x4c
 800276a:	d012      	beq.n	8002792 <gnss_ExtractData+0x5f2>
	   {

	   }
	   else if((DataBuffer[i][4] == 'X') && (DataBuffer[i][5] == 'T'))
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <gnss_ExtractData+0x608>)
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	215a      	movs	r1, #90	; 0x5a
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b58      	cmp	r3, #88	; 0x58
 8002780:	d107      	bne.n	8002792 <gnss_ExtractData+0x5f2>
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <gnss_ExtractData+0x608>)
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	215a      	movs	r1, #90	; 0x5a
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3305      	adds	r3, #5
 8002790:	781b      	ldrb	r3, [r3, #0]
	for(int i =0;i<7;i++)
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	3301      	adds	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	2b06      	cmp	r3, #6
 800279c:	f77f ad06 	ble.w	80021ac <gnss_ExtractData+0xc>
	   {

	   }
	}
}
 80027a0:	bf00      	nop
 80027a2:	373c      	adds	r7, #60	; 0x3c
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	200002ec 	.word	0x200002ec

080027ac <gnss_getLatitude>:

double gnss_getLatitude(void)
{
 80027ac:	b490      	push	{r4, r7}
 80027ae:	af00      	add	r7, sp, #0
	return _Data.latitude;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <gnss_getLatitude+0x1c>)
 80027b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80027ba:	eeb0 0a47 	vmov.f32	s0, s14
 80027be:	eef0 0a67 	vmov.f32	s1, s15
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc90      	pop	{r4, r7}
 80027c6:	4770      	bx	lr
 80027c8:	200002a0 	.word	0x200002a0

080027cc <gnss_getLongitude>:

double gnss_getLongitude(void)
{
 80027cc:	b490      	push	{r4, r7}
 80027ce:	af00      	add	r7, sp, #0
	return _Data.longitude;
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <gnss_getLongitude+0x1c>)
 80027d2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80027d6:	ec44 3b17 	vmov	d7, r3, r4
}
 80027da:	eeb0 0a47 	vmov.f32	s0, s14
 80027de:	eef0 0a67 	vmov.f32	s1, s15
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc90      	pop	{r4, r7}
 80027e6:	4770      	bx	lr
 80027e8:	200002a0 	.word	0x200002a0

080027ec <gnss_ChecksumVerify>:
	else
		return _Data.speed_k;
}

bool gnss_ChecksumVerify(uint8_t *Data)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	int checksumCal = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
	int checksumGPS = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

	uint8_t *ptr = Data;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	613b      	str	r3, [r7, #16]

	/* Data must valid and first character must be '$' character */
	if((NULL == ptr) || ('$' != *ptr))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <gnss_ChecksumVerify+0x22>
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b24      	cmp	r3, #36	; 0x24
 800280c:	d001      	beq.n	8002812 <gnss_ChecksumVerify+0x26>
	{
		return 0;
 800280e:	2300      	movs	r3, #0
 8002810:	e023      	b.n	800285a <gnss_ChecksumVerify+0x6e>
	}

	/* Shift position to first of calculate position */
	ptr++;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3301      	adds	r3, #1
 8002816:	613b      	str	r3, [r7, #16]

	/* Calculate until found '*' character */
	do
	{
		checksumCal = checksumCal ^ (*ptr++);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	613a      	str	r2, [r7, #16]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	4053      	eors	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
	}while(((*ptr) != '*') && ((*ptr) != 0));
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b2a      	cmp	r3, #42	; 0x2a
 800282e:	d003      	beq.n	8002838 <gnss_ChecksumVerify+0x4c>
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ef      	bne.n	8002818 <gnss_ChecksumVerify+0x2c>

	/* Update position then read value from GPS syntax */
	ptr++;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	3301      	adds	r3, #1
 800283c:	613b      	str	r3, [r7, #16]
	sscanf((char*)ptr, "%x" , &checksumGPS);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	461a      	mov	r2, r3
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <gnss_ChecksumVerify+0x78>)
 8002846:	6938      	ldr	r0, [r7, #16]
 8002848:	f00a fae4 	bl	800ce14 <siscanf>

	if(checksumGPS == checksumCal)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	d101      	bne.n	8002858 <gnss_ChecksumVerify+0x6c>
	{
		return CHECKSUM_OK;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <gnss_ChecksumVerify+0x6e>
	}

	return CHECKSUM_NG;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08010f6c 	.word	0x08010f6c

08002868 <APNlookupfromMccMnc>:
		{""                  , ""    , ""},
		{""                  , ""    , ""}
};


bool APNlookupfromMccMnc(uint16_t mccmnc, uint8_t *apn, uint8_t *usr, uint8_t *pwd){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4603      	mov	r3, r0
 8002876:	81fb      	strh	r3, [r7, #14]
	bool lookupPassed = false;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

	switch (mccmnc) {
 800287c:	89fb      	ldrh	r3, [r7, #14]
 800287e:	f5a3 434b 	sub.w	r3, r3, #51968	; 0xcb00
 8002882:	3b20      	subs	r3, #32
 8002884:	2b0f      	cmp	r3, #15
 8002886:	f200 80b9 	bhi.w	80029fc <APNlookupfromMccMnc+0x194>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <APNlookupfromMccMnc+0x28>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	08002985 	.word	0x08002985
 8002894:	080029fd 	.word	0x080029fd
 8002898:	080029fd 	.word	0x080029fd
 800289c:	0800290d 	.word	0x0800290d
 80028a0:	080028d1 	.word	0x080028d1
 80028a4:	08002949 	.word	0x08002949
 80028a8:	080029fd 	.word	0x080029fd
 80028ac:	080029fd 	.word	0x080029fd
 80028b0:	080029fd 	.word	0x080029fd
 80028b4:	080029fd 	.word	0x080029fd
 80028b8:	080029fd 	.word	0x080029fd
 80028bc:	080029fd 	.word	0x080029fd
 80028c0:	080029fd 	.word	0x080029fd
 80028c4:	080029fd 	.word	0x080029fd
 80028c8:	080029fd 	.word	0x080029fd
 80028cc:	080029c1 	.word	0x080029c1
		case MMCMNC_TrueMove:{
			memcpy(apn, APN_List[0][0], strlen((char*)APN_List[0][0]));
 80028d0:	484e      	ldr	r0, [pc, #312]	; (8002a0c <APNlookupfromMccMnc+0x1a4>)
 80028d2:	f7fd fc8f 	bl	80001f4 <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	494c      	ldr	r1, [pc, #304]	; (8002a0c <APNlookupfromMccMnc+0x1a4>)
 80028dc:	68b8      	ldr	r0, [r7, #8]
 80028de:	f009 fb3f 	bl	800bf60 <memcpy>
			memcpy(usr, APN_List[0][1], strlen((char*)APN_List[0][1]));
 80028e2:	484b      	ldr	r0, [pc, #300]	; (8002a10 <APNlookupfromMccMnc+0x1a8>)
 80028e4:	f7fd fc86 	bl	80001f4 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4948      	ldr	r1, [pc, #288]	; (8002a10 <APNlookupfromMccMnc+0x1a8>)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f009 fb36 	bl	800bf60 <memcpy>
			memcpy(pwd, APN_List[0][2], strlen((char*)APN_List[0][2]));
 80028f4:	4847      	ldr	r0, [pc, #284]	; (8002a14 <APNlookupfromMccMnc+0x1ac>)
 80028f6:	f7fd fc7d 	bl	80001f4 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4945      	ldr	r1, [pc, #276]	; (8002a14 <APNlookupfromMccMnc+0x1ac>)
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f009 fb2d 	bl	800bf60 <memcpy>
			lookupPassed = true;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
			break;
 800290a:	e07a      	b.n	8002a02 <APNlookupfromMccMnc+0x19a>
		}

		case MMCMNC_AIS:{
			memcpy(apn, APN_List[1][0], strlen((char*)APN_List[1][0]));
 800290c:	4842      	ldr	r0, [pc, #264]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 800290e:	f7fd fc71 	bl	80001f4 <strlen>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 8002918:	68b8      	ldr	r0, [r7, #8]
 800291a:	f009 fb21 	bl	800bf60 <memcpy>
			memcpy(usr, APN_List[1][1], strlen((char*)APN_List[1][1]));
 800291e:	483f      	ldr	r0, [pc, #252]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 8002920:	f7fd fc68 	bl	80001f4 <strlen>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	493c      	ldr	r1, [pc, #240]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f009 fb18 	bl	800bf60 <memcpy>
			memcpy(pwd, APN_List[1][2], strlen((char*)APN_List[1][2]));
 8002930:	483b      	ldr	r0, [pc, #236]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 8002932:	f7fd fc5f 	bl	80001f4 <strlen>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	4939      	ldr	r1, [pc, #228]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f009 fb0f 	bl	800bf60 <memcpy>
			lookupPassed = true;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
			break;
 8002946:	e05c      	b.n	8002a02 <APNlookupfromMccMnc+0x19a>
		}

		case MMCMNC_DTAC:{
			memcpy(apn, APN_List[2][0], strlen((char*)APN_List[2][0]));
 8002948:	4836      	ldr	r0, [pc, #216]	; (8002a24 <APNlookupfromMccMnc+0x1bc>)
 800294a:	f7fd fc53 	bl	80001f4 <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4934      	ldr	r1, [pc, #208]	; (8002a24 <APNlookupfromMccMnc+0x1bc>)
 8002954:	68b8      	ldr	r0, [r7, #8]
 8002956:	f009 fb03 	bl	800bf60 <memcpy>
			memcpy(usr, APN_List[2][1], strlen((char*)APN_List[2][1]));
 800295a:	4833      	ldr	r0, [pc, #204]	; (8002a28 <APNlookupfromMccMnc+0x1c0>)
 800295c:	f7fd fc4a 	bl	80001f4 <strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4930      	ldr	r1, [pc, #192]	; (8002a28 <APNlookupfromMccMnc+0x1c0>)
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f009 fafa 	bl	800bf60 <memcpy>
			memcpy(pwd, APN_List[2][2], strlen((char*)APN_List[2][2]));
 800296c:	482f      	ldr	r0, [pc, #188]	; (8002a2c <APNlookupfromMccMnc+0x1c4>)
 800296e:	f7fd fc41 	bl	80001f4 <strlen>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	492d      	ldr	r1, [pc, #180]	; (8002a2c <APNlookupfromMccMnc+0x1c4>)
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f009 faf1 	bl	800bf60 <memcpy>
			lookupPassed = true;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
			break;
 8002982:	e03e      	b.n	8002a02 <APNlookupfromMccMnc+0x19a>
		}

		case MMCMNC_TrueByCAT:{
			memcpy(apn, APN_List[1][0], strlen((char*)APN_List[1][0]));
 8002984:	4824      	ldr	r0, [pc, #144]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 8002986:	f7fd fc35 	bl	80001f4 <strlen>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	f009 fae5 	bl	800bf60 <memcpy>
			memcpy(usr, APN_List[1][1], strlen((char*)APN_List[1][1]));
 8002996:	4821      	ldr	r0, [pc, #132]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 8002998:	f7fd fc2c 	bl	80001f4 <strlen>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	491e      	ldr	r1, [pc, #120]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f009 fadc 	bl	800bf60 <memcpy>
			memcpy(pwd, APN_List[1][2], strlen((char*)APN_List[1][2]));
 80029a8:	481d      	ldr	r0, [pc, #116]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 80029aa:	f7fd fc23 	bl	80001f4 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	491b      	ldr	r1, [pc, #108]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f009 fad3 	bl	800bf60 <memcpy>
			lookupPassed = true;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
			break;
 80029be:	e020      	b.n	8002a02 <APNlookupfromMccMnc+0x19a>
		}

		case MMCMNC_TOT:{
			memcpy(apn, APN_List[1][0], strlen((char*)APN_List[1][0]));
 80029c0:	4815      	ldr	r0, [pc, #84]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 80029c2:	f7fd fc17 	bl	80001f4 <strlen>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4913      	ldr	r1, [pc, #76]	; (8002a18 <APNlookupfromMccMnc+0x1b0>)
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f009 fac7 	bl	800bf60 <memcpy>
			memcpy(usr, APN_List[1][1], strlen((char*)APN_List[1][1]));
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 80029d4:	f7fd fc0e 	bl	80001f4 <strlen>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	490f      	ldr	r1, [pc, #60]	; (8002a1c <APNlookupfromMccMnc+0x1b4>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f009 fabe 	bl	800bf60 <memcpy>
			memcpy(pwd, APN_List[1][2], strlen((char*)APN_List[1][2]));
 80029e4:	480e      	ldr	r0, [pc, #56]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 80029e6:	f7fd fc05 	bl	80001f4 <strlen>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	490c      	ldr	r1, [pc, #48]	; (8002a20 <APNlookupfromMccMnc+0x1b8>)
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f009 fab5 	bl	800bf60 <memcpy>
			lookupPassed = true;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
			break;
 80029fa:	e002      	b.n	8002a02 <APNlookupfromMccMnc+0x19a>
		}
		default:
			lookupPassed = false;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]
			break;
 8002a00:	bf00      	nop
	}

	return lookupPassed;
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08011754 	.word	0x08011754
 8002a10:	08011774 	.word	0x08011774
 8002a14:	08011794 	.word	0x08011794
 8002a18:	080117b4 	.word	0x080117b4
 8002a1c:	080117d4 	.word	0x080117d4
 8002a20:	080117f4 	.word	0x080117f4
 8002a24:	08011814 	.word	0x08011814
 8002a28:	08011834 	.word	0x08011834
 8002a2c:	08011854 	.word	0x08011854

08002a30 <UC200_genPowerOnPulse>:
#define UC200_HW_PWRKEY_HIGH() HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port, GSM_PWR_KEY_Pin, GPIO_PIN_RESET)
#define UC200_HW_PWRKEY_LOW()  HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port, GSM_PWR_KEY_Pin, GPIO_PIN_SET)



void UC200_genPowerOnPulse(void){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	/* Power Key generating until module ready */
	UC200_HW_PWRKEY_LOW();
 8002a34:	2201      	movs	r2, #1
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3c:	f004 f8ee 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(22);
 8002a40:	2016      	movs	r0, #22
 8002a42:	f002 fc7f 	bl	8005344 <HAL_Delay>
	UC200_HW_RST_OFF();
 8002a46:	2200      	movs	r2, #0
 8002a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a50:	f004 f8e4 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(688);
 8002a54:	f44f 702c 	mov.w	r0, #688	; 0x2b0
 8002a58:	f002 fc74 	bl	8005344 <HAL_Delay>
	UC200_HW_PWRKEY_HIGH();
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a64:	f004 f8da 	bl	8006c1c <HAL_GPIO_WritePin>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UC200_genPowerOffPulse>:

void UC200_genPowerOffPulse(void){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	/* Power Key generating until module ready */
	UC200_HW_PWRKEY_LOW();
 8002a70:	2201      	movs	r2, #1
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a78:	f004 f8d0 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(700); /* Range:  t >= 650ms */
 8002a7c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002a80:	f002 fc60 	bl	8005344 <HAL_Delay>
	UC200_HW_PWRKEY_HIGH();
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f004 f8c6 	bl	8006c1c <HAL_GPIO_WritePin>
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <UC200_init>:

bool UC200_init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	/* Buffer and interrupt initialize */
	UC200_RxCallback = AT_RxCallback;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <UC200_init+0xa0>)
 8002a9e:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <UC200_init+0xa4>)
 8002aa0:	601a      	str	r2, [r3, #0]

	UartInst = huart;
 8002aa2:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <UC200_init+0xa8>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6013      	str	r3, [r2, #0]

	if(UartInst == NULL){
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <UC200_init+0xa8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <UC200_init+0x20>
		return false;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e03b      	b.n	8002b2c <UC200_init+0x98>
	}

#if(AT_DEBUG_MODE)
	dbg_print("## Initialize AT parser ... ");
#endif
	AT_init(UartInst);
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <UC200_init+0xa8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fc53 	bl	8001364 <AT_init>
#if(AT_DEBUG_MODE)
	dbg_print("## Generating power key signal ... ");
#endif

	/* Recommended Restart process: Quectel_UC20_AT_Commands_Application_Note */
	UC200_HW_WakeUp();       // Hardware Wake-up
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac8:	f004 f8a8 	bl	8006c1c <HAL_GPIO_WritePin>
	UC200_HW_RST_ON();       // Hardware Reset use
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f004 f8a1 	bl	8006c1c <HAL_GPIO_WritePin>

	if(HAL_GPIO_ReadPin(STM_CTS_GSM_GPIO_Port, STM_CTS_GSM_Pin)){
 8002ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae2:	f004 f883 	bl	8006bec <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <UC200_init+0x6e>
		/* 1. Power off */
		UC200_genPowerOffPulse();
 8002aec:	f7ff ffbe 	bl	8002a6c <UC200_genPowerOffPulse>
		/* 2. Delay at least 3000ms */
		HAL_Delay(3000);
 8002af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002af4:	f002 fc26 	bl	8005344 <HAL_Delay>
		/* 3. Power on */
		UC200_genPowerOnPulse();
 8002af8:	f7ff ff9a 	bl	8002a30 <UC200_genPowerOnPulse>

	/* Try to attempt AT, disable echo then wait for SARA can go to stable */
#if(AT_DEBUG_MODE)
	dbg_print("Sending AT commands ... ");
#endif
	while(UC200_syncModule(10000U) == false){
 8002afc:	e001      	b.n	8002b02 <UC200_init+0x6e>
		/* After 10sec timeout try to re-generate power on pulse */
		UC200_genPowerOnPulse();
 8002afe:	f7ff ff97 	bl	8002a30 <UC200_genPowerOnPulse>
	while(UC200_syncModule(10000U) == false){
 8002b02:	f242 7010 	movw	r0, #10000	; 0x2710
 8002b06:	f000 f847 	bl	8002b98 <UC200_syncModule>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f3      	bne.n	8002afe <UC200_init+0x6a>
	}
#if(AT_DEBUG_MODE)
	dbg_println("DONE");
#endif
	UC200_echoCommand(DEACTIVE);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f878 	bl	8002c0c <UC200_echoCommand>
	UC200_echoErrorMessage(DEACTIVE);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f000 f89d 	bl	8002c5c <UC200_echoErrorMessage>
#if(AT_DEBUG_MODE)
	dbg_print("Waiting 3sec for module stable ... ");
#endif
	HAL_Delay(3000);
 8002b22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b26:	f002 fc0d 	bl	8005344 <HAL_Delay>
#if(AT_DEBUG_MODE)
	dbg_println("Ready!");
#endif

	return true;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20001970 	.word	0x20001970
 8002b38:	08001409 	.word	0x08001409
 8002b3c:	200008a0 	.word	0x200008a0

08002b40 <UC200_setFunctionality>:
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
}


bool UC200_setFunctionality(uint8_t option, uint8_t reset)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b092      	sub	sp, #72	; 0x48
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
	 uint8_t cmd[64] = {0};
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f009 fa0c 	bl	800bf76 <memset>

	 memset((char*)cmd, 0, 64);	// Make sure buffer is clear before write
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f009 fa05 	bl	800bf76 <memset>
	 sprintf((char*)cmd, "AT+CFUN=%u,%u" ,option, reset);
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	f107 0008 	add.w	r0, r7, #8
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <UC200_setFunctionality+0x54>)
 8002b76:	f00a f92d 	bl	800cdd4 <siprintf>
	 return (AT_expectReplyOK(cmd,  AT_TIMEOUT_1000MS));
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe ff42 	bl	8001a0c <AT_expectReplyOK>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3748      	adds	r7, #72	; 0x48
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08010f7c 	.word	0x08010f7c

08002b98 <UC200_syncModule>:

bool UC200_syncModule(uint32_t timeOut){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	bool    Synchronized = false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	737b      	strb	r3, [r7, #13]
	bool    SyncResult   = false;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
	uint8_t SyncCounter  = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73bb      	strb	r3, [r7, #14]
	uint32_t TickStart = HAL_GetTick();
 8002bac:	f002 fbbe 	bl	800532c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]

	do{
		Synchronized = AT_expectReplyOK((uint8_t*)"AT", AT_TIMEOUT_1000MS);
 8002bb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bb6:	4814      	ldr	r0, [pc, #80]	; (8002c08 <UC200_syncModule+0x70>)
 8002bb8:	f7fe ff28 	bl	8001a0c <AT_expectReplyOK>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	737b      	strb	r3, [r7, #13]
		if(Synchronized == true){
 8002bc0:	7b7b      	ldrb	r3, [r7, #13]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <UC200_syncModule+0x3c>
			SyncCounter += 1;
 8002bc6:	7bbb      	ldrb	r3, [r7, #14]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73bb      	strb	r3, [r7, #14]
			HAL_Delay(10);
 8002bcc:	200a      	movs	r0, #10
 8002bce:	f002 fbb9 	bl	8005344 <HAL_Delay>
 8002bd2:	e003      	b.n	8002bdc <UC200_syncModule+0x44>
		}
		else{
			HAL_Delay(AT_TIMEOUT_1000MS);
 8002bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd8:	f002 fbb4 	bl	8005344 <HAL_Delay>
		}
	}while((SyncCounter <= 3) && ((HAL_GetTick() - TickStart) < timeOut));
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d807      	bhi.n	8002bf2 <UC200_syncModule+0x5a>
 8002be2:	f002 fba3 	bl	800532c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d8df      	bhi.n	8002bb2 <UC200_syncModule+0x1a>

	if(SyncCounter > 3){
 8002bf2:	7bbb      	ldrb	r3, [r7, #14]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d901      	bls.n	8002bfc <UC200_syncModule+0x64>
		SyncResult = true;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
	}

	return SyncResult;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08010f8c 	.word	0x08010f8c

08002c0c <UC200_echoCommand>:


bool UC200_echoCommand(uint8_t mode)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
	bool success = false;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]

	switch(mode)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <UC200_echoCommand+0x1a>
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d008      	beq.n	8002c36 <UC200_echoCommand+0x2a>
 8002c24:	e00f      	b.n	8002c46 <UC200_echoCommand+0x3a>
	{
	case DEACTIVE:
		success = AT_expectReplyOK((uint8_t*)"ATE0", AT_TIMEOUT_1000MS);
 8002c26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c2a:	480a      	ldr	r0, [pc, #40]	; (8002c54 <UC200_echoCommand+0x48>)
 8002c2c:	f7fe feee 	bl	8001a0c <AT_expectReplyOK>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
		break;
 8002c34:	e009      	b.n	8002c4a <UC200_echoCommand+0x3e>

	case ACTIVE:
		success = AT_expectReplyOK((uint8_t*)"ATE1", AT_TIMEOUT_1000MS);
 8002c36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <UC200_echoCommand+0x4c>)
 8002c3c:	f7fe fee6 	bl	8001a0c <AT_expectReplyOK>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]
		break;
 8002c44:	e001      	b.n	8002c4a <UC200_echoCommand+0x3e>

	default:
		__NOP();
 8002c46:	bf00      	nop
		break;
 8002c48:	bf00      	nop
	}

	return success;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08010f90 	.word	0x08010f90
 8002c58:	08010f98 	.word	0x08010f98

08002c5c <UC200_echoErrorMessage>:

bool UC200_echoErrorMessage(uint8_t mode)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	bool success = false;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]

	switch(mode)
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <UC200_echoErrorMessage+0x1a>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d008      	beq.n	8002c86 <UC200_echoErrorMessage+0x2a>
 8002c74:	e00f      	b.n	8002c96 <UC200_echoErrorMessage+0x3a>
	{
	case DEACTIVE:
		success = AT_expectReplyOK((uint8_t*)"AT+CMEE=0", AT_TIMEOUT_1000MS);
 8002c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <UC200_echoErrorMessage+0x48>)
 8002c7c:	f7fe fec6 	bl	8001a0c <AT_expectReplyOK>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
		break;
 8002c84:	e009      	b.n	8002c9a <UC200_echoErrorMessage+0x3e>

	case ACTIVE:
		success = AT_expectReplyOK((uint8_t*)"AT+CMEE=2", AT_TIMEOUT_1000MS);
 8002c86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <UC200_echoErrorMessage+0x4c>)
 8002c8c:	f7fe febe 	bl	8001a0c <AT_expectReplyOK>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
		break;
 8002c94:	e001      	b.n	8002c9a <UC200_echoErrorMessage+0x3e>

	default:
		__NOP();
 8002c96:	bf00      	nop
		break;
 8002c98:	bf00      	nop
	}

	return success;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	08010fa0 	.word	0x08010fa0
 8002ca8:	08010fac 	.word	0x08010fac

08002cac <UC200_setFormatOperator>:

/* Network */
bool UC200_setFormatOperator(uint8_t format){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b092      	sub	sp, #72	; 0x48
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd[64] = {0};
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f009 f959 	bl	800bf76 <memset>

    memset((char*)cmd, 0, 64);	// Make sure buffer is clear before write
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f009 f952 	bl	800bf76 <memset>
    sprintf((char*)cmd, "AT+COPS=3,%u", format);
 8002cd2:	79fa      	ldrb	r2, [r7, #7]
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <UC200_setFormatOperator+0x4c>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f00a f87a 	bl	800cdd4 <siprintf>
    return (AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fe8f 	bl	8001a0c <AT_expectReplyOK>
 8002cee:	4603      	mov	r3, r0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3748      	adds	r7, #72	; 0x48
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	08010fb8 	.word	0x08010fb8

08002cfc <UC200_setPreferredScan>:
    // time-out
    return false;
}

bool UC200_setPreferredScan(uint8_t mode, uint8_t apply)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b092      	sub	sp, #72	; 0x48
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	460a      	mov	r2, r1
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[64] = {0};
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 f92e 	bl	800bf76 <memset>

	memset((char*)cmd, 0, 64);	// Make sure buffer is clear before write
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f009 f927 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QCFG=\"nwscanmode\",%u,%u", mode, apply);
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	79bb      	ldrb	r3, [r7, #6]
 8002d2c:	f107 0008 	add.w	r0, r7, #8
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <UC200_setPreferredScan+0x54>)
 8002d32:	f00a f84f 	bl	800cdd4 <siprintf>
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_10000MS));
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	f242 7110 	movw	r1, #10000	; 0x2710
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fe64 	bl	8001a0c <AT_expectReplyOK>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3748      	adds	r7, #72	; 0x48
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	08010fd4 	.word	0x08010fd4

08002d54 <UC200_setPreferredPriority>:

bool UC200_setPreferredPriority(uint8_t mode, uint8_t apply)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[64] = {0};
 8002d64:	f107 0308 	add.w	r3, r7, #8
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f009 f902 	bl	800bf76 <memset>

	memset((char*)cmd, 0, 64);	// Make sure buffer is clear before write
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f009 f8fb 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QCFG=\"nwscanseq\",%u,%u", mode, apply);
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	79bb      	ldrb	r3, [r7, #6]
 8002d84:	f107 0008 	add.w	r0, r7, #8
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <UC200_setPreferredPriority+0x54>)
 8002d8a:	f00a f823 	bl	800cdd4 <siprintf>
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_10000MS));
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	f242 7110 	movw	r1, #10000	; 0x2710
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fe38 	bl	8001a0c <AT_expectReplyOK>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3748      	adds	r7, #72	; 0x48
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	08010ff0 	.word	0x08010ff0

08002dac <UC200_getNetworkStatus>:


uint8_t UC200_getNetworkStatus(uint8_t mode)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
	uint32_t status;

	if(mode == PREFERRED_2G_3G){
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d110      	bne.n	8002dde <UC200_getNetworkStatus+0x32>
		if (! AT_sendParseReply((uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: ", &status, ',', 1))
 8002dbc:	f107 020c 	add.w	r2, r7, #12
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	232c      	movs	r3, #44	; 0x2c
 8002dc6:	4913      	ldr	r1, [pc, #76]	; (8002e14 <UC200_getNetworkStatus+0x68>)
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <UC200_getNetworkStatus+0x6c>)
 8002dca:	f7fe fdfb 	bl	80019c4 <AT_sendParseReply>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <UC200_getNetworkStatus+0x32>
		{
			return OPR_NOT_WORKING;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e015      	b.n	8002e0a <UC200_getNetworkStatus+0x5e>
		}
	}
	if(mode == PREFERRED_3G){
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d110      	bne.n	8002e06 <UC200_getNetworkStatus+0x5a>
		if (! AT_sendParseReply((uint8_t*)"AT+CGREG?", (uint8_t*)"+CGREG: ", &status, ',', 1))
 8002de4:	f107 020c 	add.w	r2, r7, #12
 8002de8:	2301      	movs	r3, #1
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	232c      	movs	r3, #44	; 0x2c
 8002dee:	490b      	ldr	r1, [pc, #44]	; (8002e1c <UC200_getNetworkStatus+0x70>)
 8002df0:	480b      	ldr	r0, [pc, #44]	; (8002e20 <UC200_getNetworkStatus+0x74>)
 8002df2:	f7fe fde7 	bl	80019c4 <AT_sendParseReply>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f083 0301 	eor.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <UC200_getNetworkStatus+0x5a>
		{
			return OPR_NOT_WORKING;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e001      	b.n	8002e0a <UC200_getNetworkStatus+0x5e>
		}
	}

	return (uint8_t)(status);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	b2db      	uxtb	r3, r3
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	0801100c 	.word	0x0801100c
 8002e18:	08011014 	.word	0x08011014
 8002e1c:	08011020 	.word	0x08011020
 8002e20:	0801102c 	.word	0x0801102c

08002e24 <UC200_getCCID>:

uint8_t UC200_getCCID(uint8_t *buffer)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	uint16_t TextLen;
	uint8_t  dataLen;

	 // ISO/IEC 7812. According to E.118, the number can be up to 22 digits long.
	 if(true == AT_expectReplyOK((uint8_t*)"AT+QCCID", AT_TIMEOUT_1000MS))
 8002e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e30:	4817      	ldr	r0, [pc, #92]	; (8002e90 <UC200_getCCID+0x6c>)
 8002e32:	f7fe fdeb 	bl	8001a0c <AT_expectReplyOK>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01c      	beq.n	8002e76 <UC200_getCCID+0x52>
	 {
		 /* Get size of data received, but not over 22 digit */
		 TextLen = (_STORAGE.RxIndex >= 22U) ? 22U : (_STORAGE.RxIndex - AT_RESPONSE_OFFSET);
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <UC200_getCCID+0x70>)
 8002e3e:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b15      	cmp	r3, #21
 8002e46:	d806      	bhi.n	8002e56 <UC200_getCCID+0x32>
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <UC200_getCCID+0x70>)
 8002e4a:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b02      	subs	r3, #2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	e000      	b.n	8002e58 <UC200_getCCID+0x34>
 8002e56:	2316      	movs	r3, #22
 8002e58:	81bb      	strh	r3, [r7, #12]
		 dataLen = (uint8_t)TextLen;
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	73fb      	strb	r3, [r7, #15]

		 memcpy(buffer, (uint8_t*)&_STORAGE.RxBuffer[10], dataLen);
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	461a      	mov	r2, r3
 8002e62:	490d      	ldr	r1, [pc, #52]	; (8002e98 <UC200_getCCID+0x74>)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f009 f87b 	bl	800bf60 <memcpy>
		 buffer[dataLen] = 0;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <UC200_getCCID+0x62>
	 }
	 else
	 {
		 sprintf((char*)buffer, "ERROR");
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <UC200_getCCID+0x78>)
 8002e7a:	6810      	ldr	r0, [r2, #0]
 8002e7c:	6018      	str	r0, [r3, #0]
 8002e7e:	8892      	ldrh	r2, [r2, #4]
 8002e80:	809a      	strh	r2, [r3, #4]
		 dataLen = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
	 }

	 return dataLen;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	08011038 	.word	0x08011038
 8002e94:	20000dac 	.word	0x20000dac
 8002e98:	20000dbb 	.word	0x20000dbb
 8002e9c:	08011044 	.word	0x08011044

08002ea0 <UC200_getIMEI>:

uint8_t UC200_getIMEI(uint8_t *buffer)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	uint16_t TextLen;
	uint8_t  dataLen;

	 // Up to 15 character long
	 if(true == AT_expectReplyOK((uint8_t*)"AT+GSN", AT_TIMEOUT_1000MS))
 8002ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eac:	4817      	ldr	r0, [pc, #92]	; (8002f0c <UC200_getIMEI+0x6c>)
 8002eae:	f7fe fdad 	bl	8001a0c <AT_expectReplyOK>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <UC200_getIMEI+0x52>
	 {
		 TextLen = (_STORAGE.RxIndex >= 15U) ? 15U : (_STORAGE.RxIndex - AT_RESPONSE_OFFSET);
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <UC200_getIMEI+0x70>)
 8002eba:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b0e      	cmp	r3, #14
 8002ec2:	d806      	bhi.n	8002ed2 <UC200_getIMEI+0x32>
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <UC200_getIMEI+0x70>)
 8002ec6:	f8b3 3bbe 	ldrh.w	r3, [r3, #3006]	; 0xbbe
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b02      	subs	r3, #2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	e000      	b.n	8002ed4 <UC200_getIMEI+0x34>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	81bb      	strh	r3, [r7, #12]
		 dataLen = (uint8_t)TextLen;
 8002ed6:	89bb      	ldrh	r3, [r7, #12]
 8002ed8:	73fb      	strb	r3, [r7, #15]

		 memcpy(buffer, (uint8_t*)&_STORAGE.RxBuffer[AT_RESPONSE_OFFSET], dataLen);
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	461a      	mov	r2, r3
 8002ede:	490d      	ldr	r1, [pc, #52]	; (8002f14 <UC200_getIMEI+0x74>)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f009 f83d 	bl	800bf60 <memcpy>
		 buffer[dataLen] = 0;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e007      	b.n	8002f02 <UC200_getIMEI+0x62>
	 }
	 else
	 {
		 sprintf((char*)buffer, "ERROR");
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <UC200_getIMEI+0x78>)
 8002ef6:	6810      	ldr	r0, [r2, #0]
 8002ef8:	6018      	str	r0, [r3, #0]
 8002efa:	8892      	ldrh	r2, [r2, #4]
 8002efc:	809a      	strh	r2, [r3, #4]
		 dataLen = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
	 }

	 return dataLen;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	0801104c 	.word	0x0801104c
 8002f10:	20000dac 	.word	0x20000dac
 8002f14:	20000db3 	.word	0x20000db3
 8002f18:	08011044 	.word	0x08011044

08002f1c <UC200_getMccMnc>:
	sprintf((char*)cmd, "AT+CGDCONT=1,\"IP\",\"%s\"", APN);
	return (AT_expectReplyOK((uint8_t*)cmd, AT_TIMEOUT_10000MS));
}

uint16_t UC200_getMccMnc(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
	uint8_t buffer[8] = {0};
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
	uint16_t mccmnc = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	81fb      	strh	r3, [r7, #14]

	/* Module response correctly? */
	if (!AT_expectReplyOK((uint8_t*)"AT+COPS?", AT_TIMEOUT_1000MS))
 8002f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f32:	4812      	ldr	r0, [pc, #72]	; (8002f7c <UC200_getMccMnc+0x60>)
 8002f34:	f7fe fd6a 	bl	8001a0c <AT_expectReplyOK>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <UC200_getMccMnc+0x2c>
	{
		return 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e014      	b.n	8002f72 <UC200_getMccMnc+0x56>
	}

	/* Return MCCMNC message to buffer */
	if(!AT_returnString(buffer, 1, (uint8_t*)"\""))
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <UC200_getMccMnc+0x64>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fc1a 	bl	8001788 <AT_returnString>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <UC200_getMccMnc+0x48>
	{
		return 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e006      	b.n	8002f72 <UC200_getMccMnc+0x56>
	}

	/* Cast to integer */
	mccmnc = (uint16_t)atoi((char*)buffer);
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f008 ffcb 	bl	800bf02 <atoi>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	81fb      	strh	r3, [r7, #14]

	return mccmnc;
 8002f70:	89fb      	ldrh	r3, [r7, #14]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	0801107c 	.word	0x0801107c
 8002f80:	08011088 	.word	0x08011088

08002f84 <UC200_GPRSgetParamFromList>:

bool UC200_GPRSgetParamFromList(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0a2      	sub	sp, #136	; 0x88
 8002f88:	af00      	add	r7, sp, #0
	//PDP context setting @CID1
	uint8_t cmd[128] = {0};
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f008 fff0 	bl	800bf76 <memset>
	uint16_t mccmnc = {0};
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	bool Status = false;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	/* Set format of COPS to MCCMNC first */
	UC200_setFormatOperator(OPR_FORMAT_MCCMNC);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f7ff fe82 	bl	8002cac <UC200_setFormatOperator>

	/* clean configuration parameter */
	memset((char*)_CONFIG.apnName, 0, 32);
 8002fa8:	2220      	movs	r2, #32
 8002faa:	2100      	movs	r1, #0
 8002fac:	481d      	ldr	r0, [pc, #116]	; (8003024 <UC200_GPRSgetParamFromList+0xa0>)
 8002fae:	f008 ffe2 	bl	800bf76 <memset>
	memset((char*)_CONFIG.apnUser, 0, 32);
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	481c      	ldr	r0, [pc, #112]	; (8003028 <UC200_GPRSgetParamFromList+0xa4>)
 8002fb8:	f008 ffdd 	bl	800bf76 <memset>
	memset((char*)_CONFIG.apnPass, 0, 32);
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	481a      	ldr	r0, [pc, #104]	; (800302c <UC200_GPRSgetParamFromList+0xa8>)
 8002fc2:	f008 ffd8 	bl	800bf76 <memset>

	/* Get MCCMNC */
	mccmnc = UC200_getMccMnc();
 8002fc6:	f7ff ffa9 	bl	8002f1c <UC200_getMccMnc>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	/* Lookup table */
	Status = APNlookupfromMccMnc(mccmnc, _CONFIG.apnName, _CONFIG.apnUser, _CONFIG.apnPass);
 8002fd0:	f8b7 0084 	ldrh.w	r0, [r7, #132]	; 0x84
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <UC200_GPRSgetParamFromList+0xa8>)
 8002fd6:	4a14      	ldr	r2, [pc, #80]	; (8003028 <UC200_GPRSgetParamFromList+0xa4>)
 8002fd8:	4912      	ldr	r1, [pc, #72]	; (8003024 <UC200_GPRSgetParamFromList+0xa0>)
 8002fda:	f7ff fc45 	bl	8002868 <APNlookupfromMccMnc>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if(Status == true){
 8002fe4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d014      	beq.n	8003016 <UC200_GPRSgetParamFromList+0x92>
		memset((char*)cmd, 0, 128);
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f008 ffbf 	bl	800bf76 <memset>
		sprintf((char*)cmd, "AT+CGDCONT=1,\"IP\",\"%s\"", _CONFIG.apnName);
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <UC200_GPRSgetParamFromList+0xa0>)
 8002ffc:	490c      	ldr	r1, [pc, #48]	; (8003030 <UC200_GPRSgetParamFromList+0xac>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f009 fee8 	bl	800cdd4 <siprintf>
		Status = AT_expectReplyOK((uint8_t*)cmd, AT_TIMEOUT_10000MS);
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	f242 7110 	movw	r1, #10000	; 0x2710
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fcfe 	bl	8001a0c <AT_expectReplyOK>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}

	return Status;
 8003016:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800301a:	4618      	mov	r0, r3
 800301c:	3788      	adds	r7, #136	; 0x88
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000079c 	.word	0x2000079c
 8003028:	200007bc 	.word	0x200007bc
 800302c:	200007dc 	.word	0x200007dc
 8003030:	08011064 	.word	0x08011064

08003034 <UC200_GPRSenable>:

bool UC200_GPRSenable(uint8_t mode)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0c2      	sub	sp, #264	; 0x108
 8003038:	af00      	add	r7, sp, #0
 800303a:	4602      	mov	r2, r0
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	701a      	strb	r2, [r3, #0]
	 uint8_t cmd[256] = {0};
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	4618      	mov	r0, r3
 8003046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800304a:	461a      	mov	r2, r3
 800304c:	2100      	movs	r1, #0
 800304e:	f008 ff92 	bl	800bf76 <memset>

	 if (mode == ACTIVE)
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d17d      	bne.n	8003156 <UC200_GPRSenable+0x122>
	 {
	  //  GPRS attachment -> attached possible both OK and ERROR
	  if (! AT_expectReplyOK((uint8_t*)"AT+CGATT=1", AT_TIMEOUT_10000MS))
 800305a:	f242 7110 	movw	r1, #10000	; 0x2710
 800305e:	4850      	ldr	r0, [pc, #320]	; (80031a0 <UC200_GPRSenable+0x16c>)
 8003060:	f7fe fcd4 	bl	8001a0c <AT_expectReplyOK>
 8003064:	4603      	mov	r3, r0
 8003066:	f083 0301 	eor.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <UC200_GPRSenable+0x40>
	  {
	    return false;
 8003070:	2300      	movs	r3, #0
 8003072:	e090      	b.n	8003196 <UC200_GPRSenable+0x162>
	  }

	  HAL_Delay(200); // This seems to help the next line run the first time
 8003074:	20c8      	movs	r0, #200	; 0xc8
 8003076:	f002 f965 	bl	8005344 <HAL_Delay>

	  // Packet barrier for TCPIP
	  if (strlen((char*)_CONFIG.apnName) > 0)
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <UC200_GPRSenable+0x170>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d05c      	beq.n	800313c <UC200_GPRSenable+0x108>
	  {
			// Configured APN value @Profile0
			memset((char*)cmd, 0, 256);	// Make sure buffer is clear before write
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f008 ff72 	bl	800bf76 <memset>
			sprintf((char*)cmd, "AT+QICSGP=1,1,\"%s\"", _CONFIG.apnName);
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <UC200_GPRSenable+0x170>)
 8003098:	4943      	ldr	r1, [pc, #268]	; (80031a8 <UC200_GPRSenable+0x174>)
 800309a:	4618      	mov	r0, r3
 800309c:	f009 fe9a 	bl	800cdd4 <siprintf>

			// set username/password
			if (strlen((char*)_CONFIG.apnUser) > 0)
 80030a0:	4b42      	ldr	r3, [pc, #264]	; (80031ac <UC200_GPRSenable+0x178>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d014      	beq.n	80030d2 <UC200_GPRSenable+0x9e>
			{
			  strcat((char*)cmd, ",\"");
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd f8a1 	bl	80001f4 <strlen>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4413      	add	r3, r2
 80030bc:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <UC200_GPRSenable+0x17c>)
 80030be:	8811      	ldrh	r1, [r2, #0]
 80030c0:	7892      	ldrb	r2, [r2, #2]
 80030c2:	8019      	strh	r1, [r3, #0]
 80030c4:	709a      	strb	r2, [r3, #2]
			  strcat((char*)cmd, (char*)_CONFIG.apnUser);
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	4938      	ldr	r1, [pc, #224]	; (80031ac <UC200_GPRSenable+0x178>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f009 ff10 	bl	800cef2 <strcat>
			}
			if (strlen((char*)_CONFIG.apnPass) > 0)
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <UC200_GPRSenable+0x180>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d021      	beq.n	800311e <UC200_GPRSenable+0xea>
			{
				strcat((char*)cmd, "\",\"");
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f888 	bl	80001f4 <strlen>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	4413      	add	r3, r2
 80030ee:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <UC200_GPRSenable+0x184>)
 80030f0:	6810      	ldr	r0, [r2, #0]
 80030f2:	6018      	str	r0, [r3, #0]
				strcat((char*)cmd, (char*)_CONFIG.apnPass);
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	492e      	ldr	r1, [pc, #184]	; (80031b4 <UC200_GPRSenable+0x180>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f009 fef9 	bl	800cef2 <strcat>
				strcat((char*)cmd, "\"");
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd f875 	bl	80001f4 <strlen>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4413      	add	r3, r2
 8003114:	4929      	ldr	r1, [pc, #164]	; (80031bc <UC200_GPRSenable+0x188>)
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	8013      	strh	r3, [r2, #0]
			}

			// Configured APN user, password @Profile0
			if (! AT_expectReplyOK(cmd, AT_TIMEOUT_10000MS))
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	f242 7110 	movw	r1, #10000	; 0x2710
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fc70 	bl	8001a0c <AT_expectReplyOK>
 800312c:	4603      	mov	r3, r0
 800312e:	f083 0301 	eor.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <UC200_GPRSenable+0x108>
			{
				return false;
 8003138:	2300      	movs	r3, #0
 800313a:	e02c      	b.n	8003196 <UC200_GPRSenable+0x162>
			}
        }

	    // PDP context activate @CID1
	    if(! AT_expectReplyOK((uint8_t*)"AT+CGACT=1,1", AT_TIMEOUT_30000MS))
 800313c:	f247 5130 	movw	r1, #30000	; 0x7530
 8003140:	481f      	ldr	r0, [pc, #124]	; (80031c0 <UC200_GPRSenable+0x18c>)
 8003142:	f7fe fc63 	bl	8001a0c <AT_expectReplyOK>
 8003146:	4603      	mov	r3, r0
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d020      	beq.n	8003194 <UC200_GPRSenable+0x160>
	    {
	      return false;
 8003152:	2300      	movs	r3, #0
 8003154:	e01f      	b.n	8003196 <UC200_GPRSenable+0x162>

	 }
	 else
	 {
	    // Packet switched data reset
		 AT_expectReplyOK((uint8_t*)"AT+CGACT=0,1", AT_TIMEOUT_20000MS);
 8003156:	f644 6120 	movw	r1, #20000	; 0x4e20
 800315a:	481a      	ldr	r0, [pc, #104]	; (80031c4 <UC200_GPRSenable+0x190>)
 800315c:	f7fe fc56 	bl	8001a0c <AT_expectReplyOK>

		// TCPIP barrier close
		 if (! AT_expectReplyOK((uint8_t*)"AT+QIACT=1", AT_TIMEOUT_10000MS))
 8003160:	f242 7110 	movw	r1, #10000	; 0x2710
 8003164:	4818      	ldr	r0, [pc, #96]	; (80031c8 <UC200_GPRSenable+0x194>)
 8003166:	f7fe fc51 	bl	8001a0c <AT_expectReplyOK>
 800316a:	4603      	mov	r3, r0
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <UC200_GPRSenable+0x146>
		  {
			return false;
 8003176:	2300      	movs	r3, #0
 8003178:	e00d      	b.n	8003196 <UC200_GPRSenable+0x162>
		  }

	   //  GPRS attachment -> de-attached
	  if (! AT_expectReplyOK((uint8_t*)"AT+CGATT=0", AT_TIMEOUT_10000MS))
 800317a:	f242 7110 	movw	r1, #10000	; 0x2710
 800317e:	4813      	ldr	r0, [pc, #76]	; (80031cc <UC200_GPRSenable+0x198>)
 8003180:	f7fe fc44 	bl	8001a0c <AT_expectReplyOK>
 8003184:	4603      	mov	r3, r0
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <UC200_GPRSenable+0x160>
	  {
	    return false;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <UC200_GPRSenable+0x162>
	  }
	 }

	 return true;
 8003194:	2301      	movs	r3, #1
}
 8003196:	4618      	mov	r0, r3
 8003198:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	0801108c 	.word	0x0801108c
 80031a4:	2000079c 	.word	0x2000079c
 80031a8:	08011098 	.word	0x08011098
 80031ac:	200007bc 	.word	0x200007bc
 80031b0:	080110ac 	.word	0x080110ac
 80031b4:	200007dc 	.word	0x200007dc
 80031b8:	080110b0 	.word	0x080110b0
 80031bc:	08011088 	.word	0x08011088
 80031c0:	080110b4 	.word	0x080110b4
 80031c4:	080110c4 	.word	0x080110c4
 80031c8:	080110d4 	.word	0x080110d4
 80031cc:	080110e0 	.word	0x080110e0

080031d0 <UC200_GPRScheckIP>:

bool UC200_GPRScheckIP(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	if(! AT_expectReplyOK((uint8_t*)"AT+CGPADDR=1", AT_TIMEOUT_1000MS))
 80031d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031d8:	4806      	ldr	r0, [pc, #24]	; (80031f4 <UC200_GPRScheckIP+0x24>)
 80031da:	f7fe fc17 	bl	8001a0c <AT_expectReplyOK>
 80031de:	4603      	mov	r3, r0
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <UC200_GPRScheckIP+0x1e>
	{
		return false;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <UC200_GPRScheckIP+0x20>
	}
	return true;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	080110ec 	.word	0x080110ec

080031f8 <UC200_RTCread>:

	return true;
}

bool UC200_RTCread(uint8_t* buffer)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	/* Module response correctly? */
	if (!AT_expectReplyOK((uint8_t*)"AT+CCLK?", AT_TIMEOUT_1000MS))
 8003200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003204:	480e      	ldr	r0, [pc, #56]	; (8003240 <UC200_RTCread+0x48>)
 8003206:	f7fe fc01 	bl	8001a0c <AT_expectReplyOK>
 800320a:	4603      	mov	r3, r0
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <UC200_RTCread+0x22>
	{
		return false;
 8003216:	2300      	movs	r3, #0
 8003218:	e00d      	b.n	8003236 <UC200_RTCread+0x3e>
	}

	/* Return time message */
	if(!AT_returnString(buffer, 1, (uint8_t*)"\""))
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <UC200_RTCread+0x4c>)
 800321c:	2101      	movs	r1, #1
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe fab2 	bl	8001788 <AT_returnString>
 8003224:	4603      	mov	r3, r0
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <UC200_RTCread+0x3c>
	{
		return false;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <UC200_RTCread+0x3e>
	}
	return true;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	08011124 	.word	0x08011124
 8003244:	08011088 	.word	0x08011088

08003248 <UC200_ConvertEpochTime>:

bool UC200_ConvertEpochTime(char* str, uint64_t* epoch_time){
 8003248:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800324c:	b08a      	sub	sp, #40	; 0x28
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]

	//Array of Calendar (y,m,d,hh,mm,ss)
	uint64_t epoch = 0;
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f04f 0400 	mov.w	r4, #0
 800325c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	char* pch;
	uint16_t ymd[6];

	pch = strtok (str,","); //yy/mm/dd
 8003260:	4975      	ldr	r1, [pc, #468]	; (8003438 <UC200_ConvertEpochTime+0x1f0>)
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f00a fccc 	bl	800dc00 <strtok>
 8003268:	61b8      	str	r0, [r7, #24]
	ymd[0] = (pch[0] - '0')*10 + (pch[1] - '0'); //Get Year
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	3301      	adds	r3, #1
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4413      	add	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b30      	subs	r3, #48	; 0x30
 800328a:	b29b      	uxth	r3, r3
 800328c:	81bb      	strh	r3, [r7, #12]
	ymd[0] = ymd[0] + 2000;
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003294:	b29b      	uxth	r3, r3
 8003296:	81bb      	strh	r3, [r7, #12]
	if(pch[2] != '/') return false;
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b2f      	cmp	r3, #47	; 0x2f
 80032a0:	d001      	beq.n	80032a6 <UC200_ConvertEpochTime+0x5e>
 80032a2:	2300      	movs	r3, #0
 80032a4:	e1a0      	b.n	80035e8 <UC200_ConvertEpochTime+0x3a0>
	ymd[1] = (pch[3] - '0')*10 + (pch[4] - '0'); //Get Month
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3303      	adds	r3, #3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3b30      	subs	r3, #48	; 0x30
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	0092      	lsls	r2, r2, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3304      	adds	r3, #4
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	81fb      	strh	r3, [r7, #14]
	if(pch[5] != '/') return false;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	3305      	adds	r3, #5
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b2f      	cmp	r3, #47	; 0x2f
 80032d4:	d001      	beq.n	80032da <UC200_ConvertEpochTime+0x92>
 80032d6:	2300      	movs	r3, #0
 80032d8:	e186      	b.n	80035e8 <UC200_ConvertEpochTime+0x3a0>
	ymd[2] = (pch[6] - '0')*10 + (pch[7] - '0'); //Get Day
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3306      	adds	r3, #6
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b30      	subs	r3, #48	; 0x30
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3307      	adds	r3, #7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b30      	subs	r3, #48	; 0x30
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	823b      	strh	r3, [r7, #16]
	pch = strtok (NULL,"+"); //Day
 8003300:	494e      	ldr	r1, [pc, #312]	; (800343c <UC200_ConvertEpochTime+0x1f4>)
 8003302:	2000      	movs	r0, #0
 8003304:	f00a fc7c 	bl	800dc00 <strtok>
 8003308:	61b8      	str	r0, [r7, #24]
	ymd[3] = (pch[0] - '0')*10 + (pch[1] - '0'); //Get Hours
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	3b30      	subs	r3, #48	; 0x30
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	3301      	adds	r3, #1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4413      	add	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b30      	subs	r3, #48	; 0x30
 800332a:	b29b      	uxth	r3, r3
 800332c:	827b      	strh	r3, [r7, #18]
	if(pch[2] != ':') return false;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3302      	adds	r3, #2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b3a      	cmp	r3, #58	; 0x3a
 8003336:	d001      	beq.n	800333c <UC200_ConvertEpochTime+0xf4>
 8003338:	2300      	movs	r3, #0
 800333a:	e155      	b.n	80035e8 <UC200_ConvertEpochTime+0x3a0>
	ymd[4] = (pch[3] - '0')*10 + (pch[4] - '0'); //Get Minutes
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	3303      	adds	r3, #3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	3b30      	subs	r3, #48	; 0x30
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4413      	add	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	3304      	adds	r3, #4
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4413      	add	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b30      	subs	r3, #48	; 0x30
 800335e:	b29b      	uxth	r3, r3
 8003360:	82bb      	strh	r3, [r7, #20]
	if(pch[5] != ':') return false;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3305      	adds	r3, #5
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b3a      	cmp	r3, #58	; 0x3a
 800336a:	d001      	beq.n	8003370 <UC200_ConvertEpochTime+0x128>
 800336c:	2300      	movs	r3, #0
 800336e:	e13b      	b.n	80035e8 <UC200_ConvertEpochTime+0x3a0>
	ymd[5] = (pch[6] - '0')*10 + (pch[7] - '0'); //Get Seconds
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3306      	adds	r3, #6
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	3b30      	subs	r3, #48	; 0x30
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	4413      	add	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	3307      	adds	r3, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4413      	add	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b30      	subs	r3, #48	; 0x30
 8003392:	b29b      	uxth	r3, r3
 8003394:	82fb      	strh	r3, [r7, #22]

		    for(int i = 0; i < ymd[0]-1970; i++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e020      	b.n	80033de <UC200_ConvertEpochTime+0x196>
		    {
		        if((1970+i)%4 == 0)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <UC200_ConvertEpochTime+0x17a>
		        {
		            epoch += (86400*366);
 80033aa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033ae:	4924      	ldr	r1, [pc, #144]	; (8003440 <UC200_ConvertEpochTime+0x1f8>)
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	eb13 0b01 	adds.w	fp, r3, r1
 80033b8:	eb44 0c02 	adc.w	ip, r4, r2
 80033bc:	e9c7 bc08 	strd	fp, ip, [r7, #32]
 80033c0:	e00a      	b.n	80033d8 <UC200_ConvertEpochTime+0x190>
		        }
		        else
		        {
		            epoch += (86400*365);
 80033c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033c6:	a21a      	add	r2, pc, #104	; (adr r2, 8003430 <UC200_ConvertEpochTime+0x1e8>)
 80033c8:	e9d2 1200 	ldrd	r1, r2, [r2]
 80033cc:	eb13 0b01 	adds.w	fp, r3, r1
 80033d0:	eb44 0c02 	adc.w	ip, r4, r2
 80033d4:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		    for(int i = 0; i < ymd[0]-1970; i++)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3301      	adds	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	89bb      	ldrh	r3, [r7, #12]
 80033e0:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	dbd8      	blt.n	800339c <UC200_ConvertEpochTime+0x154>
		        }
		    }

		    switch (ymd[1])
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	2b0b      	cmp	r3, #11
 80033f0:	f200 80b4 	bhi.w	800355c <UC200_ConvertEpochTime+0x314>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UC200_ConvertEpochTime+0x1b4>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800355d 	.word	0x0800355d
 8003400:	08003545 	.word	0x08003545
 8003404:	0800350b 	.word	0x0800350b
 8003408:	080034f5 	.word	0x080034f5
 800340c:	080034df 	.word	0x080034df
 8003410:	080034c9 	.word	0x080034c9
 8003414:	080034b3 	.word	0x080034b3
 8003418:	0800349d 	.word	0x0800349d
 800341c:	08003487 	.word	0x08003487
 8003420:	08003471 	.word	0x08003471
 8003424:	0800345b 	.word	0x0800345b
 8003428:	08003445 	.word	0x08003445
 800342c:	f3af 8000 	nop.w
 8003430:	01e13380 	.word	0x01e13380
 8003434:	00000000 	.word	0x00000000
 8003438:	08011130 	.word	0x08011130
 800343c:	08011134 	.word	0x08011134
 8003440:	01e28500 	.word	0x01e28500
		    {
		        case 12: epoch += (86400*30);
 8003444:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003448:	496a      	ldr	r1, [pc, #424]	; (80035f4 <UC200_ConvertEpochTime+0x3ac>)
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	eb13 0b01 	adds.w	fp, r3, r1
 8003452:	eb44 0c02 	adc.w	ip, r4, r2
 8003456:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case 11: epoch += (86400*31);
 800345a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800345e:	4966      	ldr	r1, [pc, #408]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	eb13 0b01 	adds.w	fp, r3, r1
 8003468:	eb44 0c02 	adc.w	ip, r4, r2
 800346c:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case 10: epoch += (86400*30);
 8003470:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003474:	495f      	ldr	r1, [pc, #380]	; (80035f4 <UC200_ConvertEpochTime+0x3ac>)
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	eb13 0b01 	adds.w	fp, r3, r1
 800347e:	eb44 0c02 	adc.w	ip, r4, r2
 8003482:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  9: epoch += (86400*31);
 8003486:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800348a:	495b      	ldr	r1, [pc, #364]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	eb13 0b01 	adds.w	fp, r3, r1
 8003494:	eb44 0c02 	adc.w	ip, r4, r2
 8003498:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  8: epoch += (86400*31);
 800349c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034a0:	4955      	ldr	r1, [pc, #340]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	eb13 0b01 	adds.w	fp, r3, r1
 80034aa:	eb44 0c02 	adc.w	ip, r4, r2
 80034ae:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  7: epoch += (86400*30);
 80034b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034b6:	494f      	ldr	r1, [pc, #316]	; (80035f4 <UC200_ConvertEpochTime+0x3ac>)
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	eb13 0b01 	adds.w	fp, r3, r1
 80034c0:	eb44 0c02 	adc.w	ip, r4, r2
 80034c4:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  6: epoch += (86400*31);
 80034c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034cc:	494a      	ldr	r1, [pc, #296]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	eb13 0b01 	adds.w	fp, r3, r1
 80034d6:	eb44 0c02 	adc.w	ip, r4, r2
 80034da:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  5: epoch += (86400*30);
 80034de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034e2:	4944      	ldr	r1, [pc, #272]	; (80035f4 <UC200_ConvertEpochTime+0x3ac>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	eb13 0b01 	adds.w	fp, r3, r1
 80034ec:	eb44 0c02 	adc.w	ip, r4, r2
 80034f0:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  4: epoch += (86400*31);
 80034f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034f8:	493f      	ldr	r1, [pc, #252]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	eb13 0b01 	adds.w	fp, r3, r1
 8003502:	eb44 0c02 	adc.w	ip, r4, r2
 8003506:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  3:
		            if(ymd[0]%4 == 0)
 800350a:	89bb      	ldrh	r3, [r7, #12]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <UC200_ConvertEpochTime+0x2e6>
		            {
		                epoch += (86400*29);
 8003516:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800351a:	4938      	ldr	r1, [pc, #224]	; (80035fc <UC200_ConvertEpochTime+0x3b4>)
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	eb13 0b01 	adds.w	fp, r3, r1
 8003524:	eb44 0c02 	adc.w	ip, r4, r2
 8003528:	e9c7 bc08 	strd	fp, ip, [r7, #32]
 800352c:	e00a      	b.n	8003544 <UC200_ConvertEpochTime+0x2fc>
		            }
		            else
		            {
		                epoch += (86400*28);
 800352e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003532:	4933      	ldr	r1, [pc, #204]	; (8003600 <UC200_ConvertEpochTime+0x3b8>)
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	eb13 0b01 	adds.w	fp, r3, r1
 800353c:	eb44 0c02 	adc.w	ip, r4, r2
 8003540:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		            }
		        case  2: epoch += (86400*31);
 8003544:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003548:	492b      	ldr	r1, [pc, #172]	; (80035f8 <UC200_ConvertEpochTime+0x3b0>)
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	eb13 0b01 	adds.w	fp, r3, r1
 8003552:	eb44 0c02 	adc.w	ip, r4, r2
 8003556:	e9c7 bc08 	strd	fp, ip, [r7, #32]
		        case  1: break;
 800355a:	e000      	b.n	800355e <UC200_ConvertEpochTime+0x316>
		        default: break;
 800355c:	bf00      	nop
		    }

		    epoch += ((ymd[2] - 1)*86400);
 800355e:	8a3b      	ldrh	r3, [r7, #16]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <UC200_ConvertEpochTime+0x3bc>)
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	469b      	mov	fp, r3
 800356a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800356e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003572:	eb1b 0301 	adds.w	r3, fp, r1
 8003576:	eb4c 0402 	adc.w	r4, ip, r2
 800357a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		    epoch += (ymd[3]*3600);
 800357e:	8a7b      	ldrh	r3, [r7, #18]
 8003580:	461a      	mov	r2, r3
 8003582:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003586:	fb03 f302 	mul.w	r3, r3, r2
 800358a:	469b      	mov	fp, r3
 800358c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8003590:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003594:	eb1b 0301 	adds.w	r3, fp, r1
 8003598:	eb4c 0402 	adc.w	r4, ip, r2
 800359c:	e9c7 3408 	strd	r3, r4, [r7, #32]
		    epoch += (ymd[4]*60);
 80035a0:	8abb      	ldrh	r3, [r7, #20]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	469b      	mov	fp, r3
 80035ae:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80035b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035b6:	eb1b 0301 	adds.w	r3, fp, r1
 80035ba:	eb4c 0402 	adc.w	r4, ip, r2
 80035be:	e9c7 3408 	strd	r3, r4, [r7, #32]
		    epoch += (ymd[5]*1);
 80035c2:	8afb      	ldrh	r3, [r7, #22]
 80035c4:	fa1f fb83 	uxth.w	fp, r3
 80035c8:	f04f 0c00 	mov.w	ip, #0
 80035cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035d0:	eb1b 0301 	adds.w	r3, fp, r1
 80035d4:	eb4c 0402 	adc.w	r4, ip, r2
 80035d8:	e9c7 3408 	strd	r3, r4, [r7, #32]

		    *epoch_time = epoch;
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80035e2:	e9c2 3400 	strd	r3, r4, [r2]
		    //printf("%lld",epoch);

		  return true;
 80035e6:	2301      	movs	r3, #1
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80035f2:	bf00      	nop
 80035f4:	00278d00 	.word	0x00278d00
 80035f8:	0028de80 	.word	0x0028de80
 80035fc:	00263b80 	.word	0x00263b80
 8003600:	0024ea00 	.word	0x0024ea00
 8003604:	00015180 	.word	0x00015180

08003608 <UC200_TcpipOpen>:

bool UC200_TcpipOpen(uint8_t* server, int port)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b0a2      	sub	sp, #136	; 0x88
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
	  uint8_t cmd[128] ={0};
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f008 fcab 	bl	800bf76 <memset>
//	  uint16_t timeout = 0;

	  sprintf((char*)cmd, "AT+QIOPEN=1,0,\"TCP\",\"%s\",%d,0,0", (char*)server, port);
 8003620:	f107 0008 	add.w	r0, r7, #8
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4907      	ldr	r1, [pc, #28]	; (8003648 <UC200_TcpipOpen+0x40>)
 800362a:	f009 fbd3 	bl	800cdd4 <siprintf>
	  return(AT_sendCheckReply(cmd, (uint8_t*)"QIOPEN", AT_TIMEOUT_10000MS));
 800362e:	f107 0308 	add.w	r3, r7, #8
 8003632:	f242 7210 	movw	r2, #10000	; 0x2710
 8003636:	4905      	ldr	r1, [pc, #20]	; (800364c <UC200_TcpipOpen+0x44>)
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd ffad 	bl	8001598 <AT_sendCheckReply>
 800363e:	4603      	mov	r3, r0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3788      	adds	r7, #136	; 0x88
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	08011138 	.word	0x08011138
 800364c:	08011158 	.word	0x08011158

08003650 <UC200_TcpipClose>:

bool UC200_TcpipClose(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	return(AT_expectReplyOK((uint8_t*)"AT+QICLOSE=0", AT_TIMEOUT_1000MS));
 8003654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <UC200_TcpipClose+0x14>)
 800365a:	f7fe f9d7 	bl	8001a0c <AT_expectReplyOK>
 800365e:	4603      	mov	r3, r0
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08011160 	.word	0x08011160

08003668 <UC200_TcpipReceive>:

	  return(AT_expectReplyOK(msg, AT_TIMEOUT_1000MS));
}

bool UC200_TcpipReceive(uint16_t len)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b0a2      	sub	sp, #136	; 0x88
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
	  uint8_t cmd[128] = {0};
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f008 fc7b 	bl	800bf76 <memset>
	  sprintf((char*)cmd, "AT+QIRD=0,%d", len);
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	f107 0308 	add.w	r3, r7, #8
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <UC200_TcpipReceive+0x40>)
 8003688:	4618      	mov	r0, r3
 800368a:	f009 fba3 	bl	800cdd4 <siprintf>
	  return(AT_sendCheckReply(cmd, (uint8_t*)"+QIRD", AT_TIMEOUT_5000MS));
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4905      	ldr	r1, [pc, #20]	; (80036ac <UC200_TcpipReceive+0x44>)
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd ff7d 	bl	8001598 <AT_sendCheckReply>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3788      	adds	r7, #136	; 0x88
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	08011180 	.word	0x08011180
 80036ac:	08011190 	.word	0x08011190

080036b0 <UC200_MqttConnectMessage>:


void UC200_MqttConnectMessage (uint8_t*msg, const uint8_t* id, const uint8_t* user, const uint8_t* pass)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	   int r_ind = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]

	    //FIXED HEADER
	    //Control
	    msg[r_ind++] = (1 << 4);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	61fa      	str	r2, [r7, #28]
 80036c8:	461a      	mov	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	2210      	movs	r2, #16
 80036d0:	701a      	strb	r2, [r3, #0]
	    //Length
	    r_ind++; //Will get actual length later
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]

	    //VARIABLE HEADER
	    //Length
	    msg[r_ind++] = 0x00;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = 0x04;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	61fa      	str	r2, [r7, #28]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	2204      	movs	r2, #4
 80036f6:	701a      	strb	r2, [r3, #0]
	    //Protocol Name
	    msg[r_ind++] = 'M';
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	224d      	movs	r2, #77	; 0x4d
 8003706:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = 'Q';
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	2251      	movs	r2, #81	; 0x51
 8003716:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = 'T';
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	61fa      	str	r2, [r7, #28]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	2254      	movs	r2, #84	; 0x54
 8003726:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = 'T';
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	2254      	movs	r2, #84	; 0x54
 8003736:	701a      	strb	r2, [r3, #0]
	    //Protocol Version
	    msg[r_ind++] = 4;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	61fa      	str	r2, [r7, #28]
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
	    //Protocol Flag
	    msg[r_ind] = 0x02; //QoS0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
	    if(user != NULL) msg[r_ind] = msg[r_ind] | 0x80;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <UC200_MqttConnectMessage+0xbe>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	440b      	add	r3, r1
 8003766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
	    if(user != NULL) msg[r_ind] = msg[r_ind] | 0x40;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UC200_MqttConnectMessage+0xda>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	440b      	add	r3, r1
 8003782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
	    r_ind++;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
	    //Keep Alive
	    msg[r_ind++] = 0;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	61fa      	str	r2, [r7, #28]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = 120;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	61fa      	str	r2, [r7, #28]
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	2278      	movs	r2, #120	; 0x78
 80037ae:	701a      	strb	r2, [r3, #0]

	    //PAYLOAD - ID
	    //Length
	    msg[r_ind++] = 0x00; //Fix MSB not more than 127 char.
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	61fa      	str	r2, [r7, #28]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
	    msg[r_ind++] = strlen((char*)id);
 80037c0:	68b8      	ldr	r0, [r7, #8]
 80037c2:	f7fc fd17 	bl	80001f4 <strlen>
 80037c6:	4601      	mov	r1, r0
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	61fa      	str	r2, [r7, #28]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	b2ca      	uxtb	r2, r1
 80037d6:	701a      	strb	r2, [r3, #0]
	    //ID
	    for(int i = 0;i < (int)strlen((char*)id); i++){
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e00d      	b.n	80037fa <UC200_MqttConnectMessage+0x14a>
	        msg[r_ind++] = id[i];
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	441a      	add	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	61f9      	str	r1, [r7, #28]
 80037ea:	4619      	mov	r1, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	440b      	add	r3, r1
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	701a      	strb	r2, [r3, #0]
	    for(int i = 0;i < (int)strlen((char*)id); i++){
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	f7fc fcfa 	bl	80001f4 <strlen>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4293      	cmp	r3, r2
 8003808:	dbe9      	blt.n	80037de <UC200_MqttConnectMessage+0x12e>
	    }

	    //PAYLOAD - USER
	    if(user != NULL){
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02c      	beq.n	800386a <UC200_MqttConnectMessage+0x1ba>
	      //Length
	      msg[r_ind++] = 0x00; //Fix MSB not more than 127 char.
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	61fa      	str	r2, [r7, #28]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
	      msg[r_ind++] = strlen((char*)user);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fc fce7 	bl	80001f4 <strlen>
 8003826:	4601      	mov	r1, r0
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	b2ca      	uxtb	r2, r1
 8003836:	701a      	strb	r2, [r3, #0]
	      //ID
	      for(int i = 0;i < (int)strlen((char*)user); i++){
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e00d      	b.n	800385a <UC200_MqttConnectMessage+0x1aa>
	          msg[r_ind++] = user[i];
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	61f9      	str	r1, [r7, #28]
 800384a:	4619      	mov	r1, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	440b      	add	r3, r1
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
	      for(int i = 0;i < (int)strlen((char*)user); i++){
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fc fcca 	bl	80001f4 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4293      	cmp	r3, r2
 8003868:	dbe9      	blt.n	800383e <UC200_MqttConnectMessage+0x18e>
	      }
	    }

	    //PAYLOAD - PASS
	    if(pass != NULL){
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02c      	beq.n	80038ca <UC200_MqttConnectMessage+0x21a>
	      //Length
	      msg[r_ind++] = 0x00; //Fix MSB not more than 127 char.
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	      msg[r_ind++] = strlen((char*)pass);
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	f7fc fcb7 	bl	80001f4 <strlen>
 8003886:	4601      	mov	r1, r0
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	61fa      	str	r2, [r7, #28]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	b2ca      	uxtb	r2, r1
 8003896:	701a      	strb	r2, [r3, #0]
	      //ID
	      for(int i = 0;i < (int)strlen((char*)pass); i++){
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e00d      	b.n	80038ba <UC200_MqttConnectMessage+0x20a>
	          msg[r_ind++] = pass[i];
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	441a      	add	r2, r3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	61f9      	str	r1, [r7, #28]
 80038aa:	4619      	mov	r1, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	440b      	add	r3, r1
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
	      for(int i = 0;i < (int)strlen((char*)pass); i++){
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3301      	adds	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f7fc fc9a 	bl	80001f4 <strlen>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	dbe9      	blt.n	800389e <UC200_MqttConnectMessage+0x1ee>
	      }
	    }

	    //Summarize remaining length
	    msg[1] = r_ind-2;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3301      	adds	r3, #1
 80038d2:	3a02      	subs	r2, #2
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
}
 80038d8:	bf00      	nop
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UC200_MqttPublishMessage>:

void UC200_MqttPublishMessage(uint8_t* msg, const uint8_t* topic, const uint8_t* data)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	int r_ind = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]

	//FIXED HEADER
	//Control
	msg[r_ind++] = (3 << 4); //QoS0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	2230      	movs	r2, #48	; 0x30
 80038fe:	701a      	strb	r2, [r3, #0]
	//Length
	r_ind++; //Will get actual length later
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
	if((strlen((char*)topic) + strlen((char*)data)) >= 123){
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f7fc fc74 	bl	80001f4 <strlen>
 800390c:	4604      	mov	r4, r0
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fc fc70 	bl	80001f4 <strlen>
 8003914:	4603      	mov	r3, r0
 8003916:	4423      	add	r3, r4
 8003918:	2b7a      	cmp	r3, #122	; 0x7a
 800391a:	d902      	bls.n	8003922 <UC200_MqttPublishMessage+0x42>
		r_ind++; //Will get actual length later
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
				 //get another length byte if contain more than 123 bytes.
	}
	//VARIABLE HEADER
	//Topic Length
	msg[r_ind++] = 0x00;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	61fa      	str	r2, [r7, #28]
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
	msg[r_ind++] = strlen((char*)topic);
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f7fc fc5e 	bl	80001f4 <strlen>
 8003938:	4601      	mov	r1, r0
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	61fa      	str	r2, [r7, #28]
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	b2ca      	uxtb	r2, r1
 8003948:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < (int)strlen((char*)topic); i++){
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e00d      	b.n	800396c <UC200_MqttPublishMessage+0x8c>
		msg[r_ind++] = topic[i];
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	441a      	add	r2, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	61f9      	str	r1, [r7, #28]
 800395c:	4619      	mov	r1, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	440b      	add	r3, r1
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < (int)strlen((char*)topic); i++){
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	3301      	adds	r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7fc fc41 	bl	80001f4 <strlen>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4293      	cmp	r3, r2
 800397a:	dbe9      	blt.n	8003950 <UC200_MqttPublishMessage+0x70>
	//Topic Identifier
//	msg[r_ind++] = 0; //it is for QoS1 or QoS2
//	msg[r_ind++] = 10;
	//PAYLOAD
	//Message
	for(int i = 0;i < (int)strlen((char*)data); i++){
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e00d      	b.n	800399e <UC200_MqttPublishMessage+0xbe>
	    msg[r_ind++] = data[i];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	441a      	add	r2, r3
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	61f9      	str	r1, [r7, #28]
 800398e:	4619      	mov	r1, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	440b      	add	r3, r1
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < (int)strlen((char*)data); i++){
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fc fc28 	bl	80001f4 <strlen>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4293      	cmp	r3, r2
 80039ac:	dbe9      	blt.n	8003982 <UC200_MqttPublishMessage+0xa2>
	}

	//sprintf(uc20_demsg,"\033[0;36mSummarize Package = %d\033[0m\r\n",r_ind);
	//dbg_print(uc20_demsg);
	//Summarize remaining length
	if(r_ind < 128){
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b7f      	cmp	r3, #127	; 0x7f
 80039b2:	dc08      	bgt.n	80039c6 <UC200_MqttPublishMessage+0xe6>
		r_ind = r_ind - 2;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3b02      	subs	r3, #2
 80039b8:	61fb      	str	r3, [r7, #28]
		msg[1] = r_ind;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
	else{
		r_ind = r_ind - 3;
		msg[1] = 0xFF;
		msg[2] = 0x7F;
	}
}
 80039c4:	e028      	b.n	8003a18 <UC200_MqttPublishMessage+0x138>
	else if(r_ind >= 128 && r_ind < 16384){
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b7f      	cmp	r3, #127	; 0x7f
 80039ca:	dd1a      	ble.n	8003a02 <UC200_MqttPublishMessage+0x122>
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d2:	da16      	bge.n	8003a02 <UC200_MqttPublishMessage+0x122>
		r_ind = r_ind - 3;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3b03      	subs	r3, #3
 80039d8:	61fb      	str	r3, [r7, #28]
		msg[1] = r_ind | 0x80;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
		msg[2] = r_ind / 0x80;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da00      	bge.n	80039f4 <UC200_MqttPublishMessage+0x114>
 80039f2:	337f      	adds	r3, #127	; 0x7f
 80039f4:	11db      	asrs	r3, r3, #7
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3302      	adds	r3, #2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]
}
 8003a00:	e00a      	b.n	8003a18 <UC200_MqttPublishMessage+0x138>
		r_ind = r_ind - 3;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	61fb      	str	r3, [r7, #28]
		msg[1] = 0xFF;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	701a      	strb	r2, [r3, #0]
		msg[2] = 0x7F;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3302      	adds	r3, #2
 8003a14:	227f      	movs	r2, #127	; 0x7f
 8003a16:	701a      	strb	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <UC200_MqttSendPacket>:
	/* No message detected from desire topic*/
	return false;
}

bool UC200_MqttSendPacket(uint8_t *packet, int len)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	AT_RxClear();
 8003a2a:	f7fe f931 	bl	8001c90 <AT_RxClear>
	char EOP = 26;     // End Of Packet
 8003a2e:	231a      	movs	r3, #26
 8003a30:	72fb      	strb	r3, [r7, #11]
#if(AT_DEBUG_MODE)
	char AsciiToHex[4];
	dbg_print("\t---> ");
#endif

	for (int j = 0; j < len; j++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e009      	b.n	8003a4c <UC200_MqttSendPacket+0x2c>
	{
		printf("%c",packet[j]);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f009 f8f7 	bl	800cc34 <putchar>
	for (int j = 0; j < len; j++)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dbf1      	blt.n	8003a38 <UC200_MqttSendPacket+0x18>
	}
#if(AT_DEBUG_MODE)
	DBG_UART.Instance->TDR = EOP;
#endif

	printf("%c",EOP);
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f009 f8ec 	bl	800cc34 <putchar>
#if(AT_DEBUG_MODE)
   dbg_println("");
   dbg_print ("\t<--- "); dbg_println_size(_STORAGE.RxIndex, (char*)&_STORAGE.RxBuffer[2]);
#endif

   return AT_readlineOK(AT_TIMEOUT_5000MS);
 8003a5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a60:	f7fd ff10 	bl	8001884 <AT_readlineOK>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UC200_MQTTConnect>:


bool UC200_MQTTConnect(const uint8_t *protocol, const uint8_t *clientID, const uint8_t *username, const uint8_t *password) {
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	f6ad 0d9c 	subw	sp, sp, #2204	; 0x89c
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	f107 040c 	add.w	r4, r7, #12
 8003a84:	6020      	str	r0, [r4, #0]
 8003a86:	f107 0008 	add.w	r0, r7, #8
 8003a8a:	6001      	str	r1, [r0, #0]
 8003a8c:	1d39      	adds	r1, r7, #4
 8003a8e:	600a      	str	r2, [r1, #0]
 8003a90:	463a      	mov	r2, r7
 8003a92:	6013      	str	r3, [r2, #0]
	char mqtt_message[2048] = {0};
 8003a94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	f008 fa68 	bl	800bf76 <memset>
		char cmd[128] = {0};
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	4618      	mov	r0, r3
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f008 fa60 	bl	800bf76 <memset>
		int len;
		UC200_MqttConnectMessage(mqtt_message,clientID,username,password);
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	1d3a      	adds	r2, r7, #4
 8003aba:	f107 0108 	add.w	r1, r7, #8
 8003abe:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	f7ff fdf2 	bl	80036b0 <UC200_MqttConnectMessage>
//		memcpy(mqtt_demsg,mqtt_message,255);
		if((mqtt_message[1] & 0x80) == 0x00){
 8003acc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db06      	blt.n	8003ae6 <UC200_MQTTConnect+0x6e>
			len = mqtt_message[1]+2;
 8003ad8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	3302      	adds	r3, #2
 8003ae0:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8003ae4:	e017      	b.n	8003b16 <UC200_MQTTConnect+0x9e>
		}
		else if((mqtt_message[2] & 0x80) == 0x00){
 8003ae6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003aea:	789b      	ldrb	r3, [r3, #2]
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0d      	blt.n	8003b0e <UC200_MQTTConnect+0x96>
			len = (mqtt_message[1] & 0x7f)+(mqtt_message[2] << 7)+3;
 8003af2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003afc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b00:	789b      	ldrb	r3, [r3, #2]
 8003b02:	01db      	lsls	r3, r3, #7
 8003b04:	4413      	add	r3, r2
 8003b06:	3303      	adds	r3, #3
 8003b08:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8003b0c:	e003      	b.n	8003b16 <UC200_MQTTConnect+0x9e>
		}
		else{
			len = 0x7fff;
 8003b0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003b12:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
		}

		sprintf(cmd,"AT+QISEND=0,%d",len);
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 8003b1e:	4915      	ldr	r1, [pc, #84]	; (8003b74 <UC200_MQTTConnect+0xfc>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f009 f957 	bl	800cdd4 <siprintf>
	AT_sendNoCheck(cmd);
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fd7c 	bl	8001628 <AT_sendNoCheck>
	AT_readline(AT_TIMEOUT_5000MS, false);
 8003b30:	2100      	movs	r1, #0
 8003b32:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b36:	f7fd fe6b 	bl	8001810 <AT_readline>
  dbg_print("\t<--- ");
  dbg_print((char*)&_STORAGE.RxBuffer[2]);
  if (_STORAGE.RxBuffer[2] != '>')
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <UC200_MQTTConnect+0x100>)
 8003b3c:	79db      	ldrb	r3, [r3, #7]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b3e      	cmp	r3, #62	; 0x3e
 8003b42:	d001      	beq.n	8003b48 <UC200_MQTTConnect+0xd0>
    return false;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e00f      	b.n	8003b68 <UC200_MQTTConnect+0xf0>

  if (! UC200_MqttSendPacket((uint8_t*)mqtt_message, len))
 8003b48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b4c:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff65 	bl	8003a20 <UC200_MqttSendPacket>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <UC200_MQTTConnect+0xee>
  {
	  return false;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <UC200_MQTTConnect+0xf0>
  }
  return true;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f607 079c 	addw	r7, r7, #2204	; 0x89c
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08011170 	.word	0x08011170
 8003b78:	20000dac 	.word	0x20000dac

08003b7c <UC200_MQTTConnectCheck>:
	AT_sendParseReply((uint8_t*)"AT+QIRD=0,0", (uint8_t*)"+QIRD: ", &dataLen, ',', 2);

	return dataLen;
}

bool UC200_MQTTConnectCheck(uint8_t *clientID, uint8_t *username, uint8_t *password){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b096      	sub	sp, #88	; 0x58
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
	char msg[64];
	char asciitohex[4];
	if(UC200_MQTTConnect("MQTT", clientID, username, password))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4820      	ldr	r0, [pc, #128]	; (8003c10 <UC200_MQTTConnectCheck+0x94>)
 8003b90:	f7ff ff72 	bl	8003a78 <UC200_MQTTConnect>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d034      	beq.n	8003c04 <UC200_MQTTConnectCheck+0x88>
	{
		HAL_Delay(2000);
 8003b9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003b9e:	f001 fbd1 	bl	8005344 <HAL_Delay>
	    if(UC200_TcpipReceive(4)){
 8003ba2:	2004      	movs	r0, #4
 8003ba4:	f7ff fd60 	bl	8003668 <UC200_TcpipReceive>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d028      	beq.n	8003c00 <UC200_MQTTConnectCheck+0x84>
	    	dbg_print("\033[0;32mMQTT login success\033[0m\r\n\r\n");
	    	for(int i = 0;i < 15;i++){
 8003bae:	2300      	movs	r3, #0
 8003bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb2:	e00f      	b.n	8003bd4 <UC200_MQTTConnectCheck+0x58>
	    		sprintf(asciitohex, "%02d,", _STORAGE.RxBuffer[i]);
 8003bb4:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <UC200_MQTTConnectCheck+0x98>)
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb8:	4413      	add	r3, r2
 8003bba:	3305      	adds	r3, #5
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4914      	ldr	r1, [pc, #80]	; (8003c18 <UC200_MQTTConnectCheck+0x9c>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f009 f903 	bl	800cdd4 <siprintf>
	    	for(int i = 0;i < 15;i++){
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd6:	2b0e      	cmp	r3, #14
 8003bd8:	ddec      	ble.n	8003bb4 <UC200_MQTTConnectCheck+0x38>
	    		dbg_print(asciitohex);
	    	}
	    	if(_STORAGE.RxBuffer[15] == 0){
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <UC200_MQTTConnectCheck+0x98>)
 8003bdc:	7d1b      	ldrb	r3, [r3, #20]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <UC200_MQTTConnectCheck+0x6c>
	    		return true;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e00e      	b.n	8003c06 <UC200_MQTTConnectCheck+0x8a>
	        }
	    	else{
	    		sprintf(msg,"\033[0;31mMQTT connect failed(result=%d)\033[0m\r\n\r\n",_STORAGE.RxBuffer[15]);
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <UC200_MQTTConnectCheck+0x98>)
 8003bea:	7d1b      	ldrb	r3, [r3, #20]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4909      	ldr	r1, [pc, #36]	; (8003c1c <UC200_MQTTConnectCheck+0xa0>)
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f009 f8ec 	bl	800cdd4 <siprintf>
	    		dbg_print(msg);
	    		return false;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e002      	b.n	8003c06 <UC200_MQTTConnectCheck+0x8a>
	    	}
	    }
	    else{
	    	dbg_print("\033[0;31mMQTT connect failed(receive)\033[0m\r\n\r\n");
	    	return false;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <UC200_MQTTConnectCheck+0x8a>
	    }
	}
	else{
		dbg_print("\033[0;31mMQTT connect failed(conn)\033[0m\r\n\r\n");
		return false;
 8003c04:	2300      	movs	r3, #0
	}
	return 0;
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3758      	adds	r7, #88	; 0x58
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	080111c0 	.word	0x080111c0
 8003c14:	20000dac 	.word	0x20000dac
 8003c18:	080111c8 	.word	0x080111c8
 8003c1c:	080111d0 	.word	0x080111d0

08003c20 <UC200_MQTTPublish>:
	return 0;
}

//uint8_t pub_check;
bool UC200_MQTTPublish(const uint8_t* topic, const uint8_t* message)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	f5ad 6d09 	sub.w	sp, sp, #2192	; 0x890
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	6018      	str	r0, [r3, #0]
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	6019      	str	r1, [r3, #0]
	uint8_t mqtt_message[2048] = {0};
 8003c30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c34:	4618      	mov	r0, r3
 8003c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f008 f99a 	bl	800bf76 <memset>
	uint8_t cmd[128] = {0};
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4618      	mov	r0, r3
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	f008 f992 	bl	800bf76 <memset>
	uint8_t check;
	int len;

	UC200_MqttPublishMessage(mqtt_message, topic, message);
 8003c52:	463a      	mov	r2, r7
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	f7ff fe3f 	bl	80038e0 <UC200_MqttPublishMessage>
	if((mqtt_message[1] & 0x80) == 0x00)
 8003c62:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	db06      	blt.n	8003c7c <UC200_MQTTPublish+0x5c>
	{
		len = mqtt_message[1] + 2;
 8003c6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	3302      	adds	r3, #2
 8003c76:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8003c7a:	e017      	b.n	8003cac <UC200_MQTTPublish+0x8c>
	}
	else if((mqtt_message[2] & 0x80) == 0x00)
 8003c7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c80:	789b      	ldrb	r3, [r3, #2]
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	db0d      	blt.n	8003ca4 <UC200_MQTTPublish+0x84>
	{
		len = (mqtt_message[1] & 0x7f)+(mqtt_message[2] << 7)+3;
 8003c88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c96:	789b      	ldrb	r3, [r3, #2]
 8003c98:	01db      	lsls	r3, r3, #7
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3303      	adds	r3, #3
 8003c9e:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8003ca2:	e003      	b.n	8003cac <UC200_MQTTPublish+0x8c>
	}
	else
	{
		len = 0x7FFF;
 8003ca4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003ca8:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
	}

	AT_RxClear();
 8003cac:	f7fd fff0 	bl	8001c90 <AT_RxClear>
	sprintf((char*)cmd,"AT+QISEND=0,%d",len);
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	f8d7 288c 	ldr.w	r2, [r7, #2188]	; 0x88c
 8003cb8:	4919      	ldr	r1, [pc, #100]	; (8003d20 <UC200_MQTTPublish+0x100>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f009 f88a 	bl	800cdd4 <siprintf>
#if(AT_DEBUG_MODE)
	dbg_print("\t<--- "); dbg_println_size(_STORAGE.RxIndex, &_STORAGE.RxBuffer[2]);
#endif
	check = AT_sendCheckReply((uint8_t*)cmd,(uint8_t*)">" ,AT_TIMEOUT_1000MS);
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cc8:	4916      	ldr	r1, [pc, #88]	; (8003d24 <UC200_MQTTPublish+0x104>)
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fc64 	bl	8001598 <AT_sendCheckReply>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
	HAL_Delay(1);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f001 fb34 	bl	8005344 <HAL_Delay>
	if (strstr(&_STORAGE.RxBuffer[2],">") == NULL)
 8003cdc:	213e      	movs	r1, #62	; 0x3e
 8003cde:	4812      	ldr	r0, [pc, #72]	; (8003d28 <UC200_MQTTPublish+0x108>)
 8003ce0:	f009 f916 	bl	800cf10 <strchr>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <UC200_MQTTPublish+0xce>
	{
		return false;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e013      	b.n	8003d16 <UC200_MQTTPublish+0xf6>
	}

	check = UC200_MqttSendPacket(mqtt_message, len);
 8003cee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003cf2:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fe92 	bl	8003a20 <UC200_MqttSendPacket>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
	HAL_Delay(1);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f001 fb1e 	bl	8005344 <HAL_Delay>

	return (check);
 8003d08:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	f507 6709 	add.w	r7, r7, #2192	; 0x890
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08011170 	.word	0x08011170
 8003d24:	08011198 	.word	0x08011198
 8003d28:	20000db3 	.word	0x20000db3

08003d2c <UC200_FileNew>:
{
	return AT_expectReplyOK((uint8_t*)"AT+QFLST=\"*\"", AT_TIMEOUT_10000MS);
}

bool UC200_FileNew(uint8_t *FileName, uint8_t *data)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0b4      	sub	sp, #208	; 0xd0
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	uint8_t cmd[128] = {0};
 8003d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f008 f919 	bl	800bf76 <memset>
	uint8_t temp[32] = {0};
 8003d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d48:	2220      	movs	r2, #32
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f008 f912 	bl	800bf76 <memset>
	uint8_t handleID[32] = {0};
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	2220      	movs	r2, #32
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f008 f90b 	bl	800bf76 <memset>
	size_t  handleSize = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int     dataSize = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	sprintf((char*)cmd, "AT+QFOPEN=\"%s\",1", (char*)FileName);
 8003d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4937      	ldr	r1, [pc, #220]	; (8003e50 <UC200_FileNew+0x124>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f009 f82d 	bl	800cdd4 <siprintf>
	if (!AT_expectReplyOK(cmd, AT_TIMEOUT_5000MS))
 8003d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fe42 	bl	8001a0c <AT_expectReplyOK>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f083 0301 	eor.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <UC200_FileNew+0x6c>
	{
		return false;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e056      	b.n	8003e46 <UC200_FileNew+0x11a>
	}
	AT_returnString(temp, 1, (uint8_t*)":");
 8003d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <UC200_FileNew+0x128>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fcf1 	bl	8001788 <AT_returnString>
	/* magic number 9: white space at head and response \r\n\r\nOK\r\n at tail */
	handleSize = (size_t)(strlen((char*)temp) - 9);
 8003da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fa22 	bl	80001f4 <strlen>
 8003db0:	4603      	mov	r3, r0
 8003db2:	3b09      	subs	r3, #9
 8003db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	/* Data start from temp[1], temp[0] is white space */
	memcpy(handleID, &temp[1], handleSize);
 8003db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dbc:	1c59      	adds	r1, r3, #1
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f008 f8ca 	bl	800bf60 <memcpy>

	memset(cmd, 0, 128);
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f008 f8ce 	bl	800bf76 <memset>
	dataSize = (int)(strlen((char*)data));
 8003dda:	6838      	ldr	r0, [r7, #0]
 8003ddc:	f7fc fa0a 	bl	80001f4 <strlen>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	sprintf((char*)cmd, "AT+QFWRITE=%s,%d", handleID, dataSize);
 8003de6:	f107 0208 	add.w	r2, r7, #8
 8003dea:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003df2:	4919      	ldr	r1, [pc, #100]	; (8003e58 <UC200_FileNew+0x12c>)
 8003df4:	f008 ffee 	bl	800cdd4 <siprintf>
	if(AT_sendCheckReply(cmd, (uint8_t*)"CONNECT", AT_TIMEOUT_5000MS))
 8003df8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4916      	ldr	r1, [pc, #88]	; (8003e5c <UC200_FileNew+0x130>)
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fbc8 	bl	8001598 <AT_sendCheckReply>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <UC200_FileNew+0xec>
	{   /* Open file success */
		if(AT_expectReplyOK(data, AT_TIMEOUT_5000MS))
 8003e0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f7fd fdfa 	bl	8001a0c <AT_expectReplyOK>
			/* Do nothing */
		}
	}

	/* Write success/Write fail */
	memset(cmd, 0, 128);
 8003e18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f008 f8a8 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QFCLOSE=%s", handleID);
 8003e26:	f107 0208 	add.w	r2, r7, #8
 8003e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e2e:	490c      	ldr	r1, [pc, #48]	; (8003e60 <UC200_FileNew+0x134>)
 8003e30:	4618      	mov	r0, r3
 8003e32:	f008 ffcf 	bl	800cdd4 <siprintf>
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_5000MS));
 8003e36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fde4 	bl	8001a0c <AT_expectReplyOK>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	37d0      	adds	r7, #208	; 0xd0
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	08011210 	.word	0x08011210
 8003e54:	08011224 	.word	0x08011224
 8003e58:	08011228 	.word	0x08011228
 8003e5c:	0801123c 	.word	0x0801123c
 8003e60:	08011244 	.word	0x08011244

08003e64 <UC200_FileRead>:
	sprintf((char*)cmd, "AT+QFCLOSE=%s", handleID);
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
}

bool UC200_FileRead(uint8_t *FileName, uint8_t *OutBuffer, uint32_t len)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0be      	sub	sp, #248	; 0xf8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	uint8_t cmd[128] = {0};
 8003e70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f008 f87c 	bl	800bf76 <memset>
	uint8_t temp[64] = {0};
 8003e7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f008 f875 	bl	800bf76 <memset>
	uint8_t handleID[32] = {0};
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	2220      	movs	r2, #32
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f008 f86e 	bl	800bf76 <memset>
	size_t  handleSize = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	if(len > AT_CORE_BUFFER_SIZE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <UC200_FileRead+0x4a>
	{
		return false;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e07d      	b.n	8003faa <UC200_FileRead+0x146>
	}

	sprintf((char*)cmd, "AT+QFOPEN=\"%s\",2", (char*)FileName);
 8003eae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	493f      	ldr	r1, [pc, #252]	; (8003fb4 <UC200_FileRead+0x150>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f008 ff8c 	bl	800cdd4 <siprintf>
	if (!AT_expectReplyOK(cmd, AT_TIMEOUT_5000MS))
 8003ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ec0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fd fda1 	bl	8001a0c <AT_expectReplyOK>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UC200_FileRead+0x76>
	{
		return false;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e067      	b.n	8003faa <UC200_FileRead+0x146>
	}
	AT_returnString(temp, 1, (uint8_t*)":");
 8003eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ede:	4a36      	ldr	r2, [pc, #216]	; (8003fb8 <UC200_FileRead+0x154>)
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd fc50 	bl	8001788 <AT_returnString>
	/* magic number 9: white space at head and response \r\n\r\nOK\r\n at tail */
	handleSize = (size_t)(strlen((char*)temp) - 9);
 8003ee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc f981 	bl	80001f4 <strlen>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	3b09      	subs	r3, #9
 8003ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	/* Data start from temp[1], temp[0] is white space */
	memcpy(handleID, &temp[1], handleSize);
 8003efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f008 f829 	bl	800bf60 <memcpy>

	/* Seek file to beginning point */
	memset(cmd, 0, 128);
 8003f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f008 f82d 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QFSEEK=%s,0,0", handleID);
 8003f1c:	f107 0214 	add.w	r2, r7, #20
 8003f20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f24:	4925      	ldr	r1, [pc, #148]	; (8003fbc <UC200_FileRead+0x158>)
 8003f26:	4618      	mov	r0, r3
 8003f28:	f008 ff54 	bl	800cdd4 <siprintf>
	if(AT_expectReplyOK(cmd, AT_TIMEOUT_5000MS))
 8003f2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f30:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fd69 	bl	8001a0c <AT_expectReplyOK>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01d      	beq.n	8003f7c <UC200_FileRead+0x118>
	{
		memset(cmd, 0, 128);
 8003f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f008 f814 	bl	800bf76 <memset>
		sprintf((char*)cmd, (char*)"AT+QFREAD=%s,%d", handleID, (int)len);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f107 0214 	add.w	r2, r7, #20
 8003f54:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8003f58:	4919      	ldr	r1, [pc, #100]	; (8003fc0 <UC200_FileRead+0x15c>)
 8003f5a:	f008 ff3b 	bl	800cdd4 <siprintf>
		if(AT_expectReplyOK(cmd, AT_TIMEOUT_5000MS))
 8003f5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f62:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fd50 	bl	8001a0c <AT_expectReplyOK>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <UC200_FileRead+0x118>
		{
			AT_returnString(OutBuffer, 1, (uint8_t*)"\r\n");
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <UC200_FileRead+0x160>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	68b8      	ldr	r0, [r7, #8]
 8003f78:	f7fd fc06 	bl	8001788 <AT_returnString>
		}
	}

	/* Write success/Write fail */
	memset(cmd, 0, 128);
 8003f7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f007 fff6 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QFCLOSE=%s", handleID);
 8003f8a:	f107 0214 	add.w	r2, r7, #20
 8003f8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f92:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <UC200_FileRead+0x164>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f008 ff1d 	bl	800cdd4 <siprintf>
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
 8003f9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd fd32 	bl	8001a0c <AT_expectReplyOK>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	37f8      	adds	r7, #248	; 0xf8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	0801127c 	.word	0x0801127c
 8003fb8:	08011224 	.word	0x08011224
 8003fbc:	08011290 	.word	0x08011290
 8003fc0:	080112a4 	.word	0x080112a4
 8003fc4:	080112b4 	.word	0x080112b4
 8003fc8:	08011244 	.word	0x08011244

08003fcc <UC200_FileDelete>:

bool UC200_FileDelete(uint8_t *FileName)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0a2      	sub	sp, #136	; 0x88
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[128] = {0};
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f007 ffca 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QFDEL=\"%s\"", (char*)FileName);
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	490d      	ldr	r1, [pc, #52]	; (8004020 <UC200_FileDelete+0x54>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f008 fef2 	bl	800cdd4 <siprintf>

	/* If no available file, assume delete success */
	if(!UC200_FileCheck(FileName))
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f817 	bl	8004024 <UC200_FileCheck>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <UC200_FileDelete+0x3a>
	{
		return true;
 8004002:	2301      	movs	r3, #1
 8004004:	e007      	b.n	8004016 <UC200_FileDelete+0x4a>
	}

	return (AT_expectReplyOK(cmd, AT_TIMEOUT_10000MS));
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	f242 7110 	movw	r1, #10000	; 0x2710
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fcfc 	bl	8001a0c <AT_expectReplyOK>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3788      	adds	r7, #136	; 0x88
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	080112b8 	.word	0x080112b8

08004024 <UC200_FileCheck>:
	sprintf((char*)cmd, "AT+QFCLOSE=%ld", handleID);
	return (AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
}

bool UC200_FileCheck(uint8_t *FileName)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0a2      	sub	sp, #136	; 0x88
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[128] = {0};
 800402c:	f107 0308 	add.w	r3, r7, #8
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f007 ff9e 	bl	800bf76 <memset>
	sprintf((char*)cmd, "AT+QFLST=%s", FileName);
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4907      	ldr	r1, [pc, #28]	; (8004060 <UC200_FileCheck+0x3c>)
 8004042:	4618      	mov	r0, r3
 8004044:	f008 fec6 	bl	800cdd4 <siprintf>
	return(AT_expectReplyOK(cmd, AT_TIMEOUT_1000MS));
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fcdb 	bl	8001a0c <AT_expectReplyOK>
 8004056:	4603      	mov	r3, r0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3788      	adds	r7, #136	; 0x88
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	08011300 	.word	0x08011300

08004064 <ssd1306_Reset>:
#include "ssd1306.h"

static I2C_HandleTypeDef *_I2C;

void ssd1306_Reset(void) {
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af04      	add	r7, sp, #16
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Status;
	while(HAL_I2C_GetState(_I2C) != HAL_I2C_STATE_READY){}
 800407e:	bf00      	nop
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <ssd1306_WriteCommand+0x48>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f002 ff85 	bl	8006f94 <HAL_I2C_GetState>
 800408a:	4603      	mov	r3, r0
 800408c:	2b20      	cmp	r3, #32
 800408e:	d1f7      	bne.n	8004080 <ssd1306_WriteCommand+0xc>
	Status = HAL_I2C_Mem_Write(_I2C, SSD1306_I2C_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &byte, 1, 10000);
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <ssd1306_WriteCommand+0x48>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	f242 7310 	movw	r3, #10000	; 0x2710
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	2301      	movs	r3, #1
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2301      	movs	r3, #1
 80040a4:	2200      	movs	r2, #0
 80040a6:	2178      	movs	r1, #120	; 0x78
 80040a8:	f002 fe60 	bl	8006d6c <HAL_I2C_Mem_Write>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]

	if(Status != HAL_OK){
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
		return;
	}
}
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200008a4 	.word	0x200008a4

080040c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status;
	while(HAL_I2C_GetState(_I2C) != HAL_I2C_STATE_READY){}
 80040ca:	bf00      	nop
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <ssd1306_WriteData+0x48>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f002 ff5f 	bl	8006f94 <HAL_I2C_GetState>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d1f7      	bne.n	80040cc <ssd1306_WriteData+0xc>
	Status = HAL_I2C_Mem_Write(_I2C, SSD1306_I2C_ADDR, 0x40, I2C_MEMADD_SIZE_8BIT, buffer, buff_size, 10000);
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <ssd1306_WriteData+0x48>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80040e8:	9202      	str	r2, [sp, #8]
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	2240      	movs	r2, #64	; 0x40
 80040f4:	2178      	movs	r1, #120	; 0x78
 80040f6:	f002 fe39 	bl	8006d6c <HAL_I2C_Mem_Write>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
	if(Status != HAL_OK){
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
		return;
	}
}
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	200008a4 	.word	0x200008a4

0800410c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(I2C_HandleTypeDef *i2c) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	_I2C = i2c;
 8004114:	4a36      	ldr	r2, [pc, #216]	; (80041f0 <ssd1306_Init+0xe4>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]

	// Reset OLED
	ssd1306_Reset();
 800411a:	f7ff ffa3 	bl	8004064 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800411e:	2064      	movs	r0, #100	; 0x64
 8004120:	f001 f910 	bl	8005344 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8004124:	20ae      	movs	r0, #174	; 0xae
 8004126:	f7ff ffa5 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800412a:	2020      	movs	r0, #32
 800412c:	f7ff ffa2 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8004130:	2010      	movs	r0, #16
 8004132:	f7ff ff9f 	bl	8004074 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004136:	20b0      	movs	r0, #176	; 0xb0
 8004138:	f7ff ff9c 	bl	8004074 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800413c:	20c8      	movs	r0, #200	; 0xc8
 800413e:	f7ff ff99 	bl	8004074 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004142:	2000      	movs	r0, #0
 8004144:	f7ff ff96 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004148:	2010      	movs	r0, #16
 800414a:	f7ff ff93 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800414e:	2040      	movs	r0, #64	; 0x40
 8004150:	f7ff ff90 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8004154:	2081      	movs	r0, #129	; 0x81
 8004156:	f7ff ff8d 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800415a:	20ff      	movs	r0, #255	; 0xff
 800415c:	f7ff ff8a 	bl	8004074 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004160:	20a1      	movs	r0, #161	; 0xa1
 8004162:	f7ff ff87 	bl	8004074 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004166:	20a6      	movs	r0, #166	; 0xa6
 8004168:	f7ff ff84 	bl	8004074 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800416c:	20a8      	movs	r0, #168	; 0xa8
 800416e:	f7ff ff81 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8004172:	203f      	movs	r0, #63	; 0x3f
 8004174:	f7ff ff7e 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004178:	20a4      	movs	r0, #164	; 0xa4
 800417a:	f7ff ff7b 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800417e:	20d3      	movs	r0, #211	; 0xd3
 8004180:	f7ff ff78 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004184:	2000      	movs	r0, #0
 8004186:	f7ff ff75 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800418a:	20d5      	movs	r0, #213	; 0xd5
 800418c:	f7ff ff72 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004190:	20f0      	movs	r0, #240	; 0xf0
 8004192:	f7ff ff6f 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004196:	20d9      	movs	r0, #217	; 0xd9
 8004198:	f7ff ff6c 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800419c:	2022      	movs	r0, #34	; 0x22
 800419e:	f7ff ff69 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80041a2:	20da      	movs	r0, #218	; 0xda
 80041a4:	f7ff ff66 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80041a8:	2012      	movs	r0, #18
 80041aa:	f7ff ff63 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80041ae:	20db      	movs	r0, #219	; 0xdb
 80041b0:	f7ff ff60 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80041b4:	2020      	movs	r0, #32
 80041b6:	f7ff ff5d 	bl	8004074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80041ba:	208d      	movs	r0, #141	; 0x8d
 80041bc:	f7ff ff5a 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80041c0:	2014      	movs	r0, #20
 80041c2:	f7ff ff57 	bl	8004074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80041c6:	20af      	movs	r0, #175	; 0xaf
 80041c8:	f7ff ff54 	bl	8004074 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f000 f813 	bl	80041f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80041d2:	f000 f833 	bl	800423c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
#ifdef FIRST_2PXL_DEAD
    SSD1306.CurrentX = 2;
#else
    SSD1306.CurrentX = 0;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <ssd1306_Init+0xe8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	801a      	strh	r2, [r3, #0]
#endif
    SSD1306.CurrentY = 0;
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <ssd1306_Init+0xe8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <ssd1306_Init+0xe8>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	715a      	strb	r2, [r3, #5]
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200008a4 	.word	0x200008a4
 80041f4:	20000cb8 	.word	0x20000cb8

080041f8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e00d      	b.n	8004224 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <ssd1306_Fill+0x1a>
 800420e:	2100      	movs	r1, #0
 8004210:	e000      	b.n	8004214 <ssd1306_Fill+0x1c>
 8004212:	21ff      	movs	r1, #255	; 0xff
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <ssd1306_Fill+0x40>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	460a      	mov	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800422a:	d3ed      	bcc.n	8004208 <ssd1306_Fill+0x10>
    }
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	200008a8 	.word	0x200008a8

0800423c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8004242:	2300      	movs	r3, #0
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	e01a      	b.n	800427e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i);
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	3b50      	subs	r3, #80	; 0x50
 800424c:	b2db      	uxtb	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff10 	bl	8004074 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004254:	2000      	movs	r0, #0
 8004256:	f7ff ff0d 	bl	8004074 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800425a:	2010      	movs	r0, #16
 800425c:	f7ff ff0a 	bl	8004074 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004260:	79fa      	ldrb	r2, [r7, #7]
 8004262:	4613      	mov	r3, r2
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	4413      	add	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	461a      	mov	r2, r3
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <ssd1306_UpdateScreen+0x50>)
 800426e:	4413      	add	r3, r2
 8004270:	2182      	movs	r1, #130	; 0x82
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff24 	bl	80040c0 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	3301      	adds	r3, #1
 800427c:	71fb      	strb	r3, [r7, #7]
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b07      	cmp	r3, #7
 8004282:	d9e1      	bls.n	8004248 <ssd1306_UpdateScreen+0xc>
    }
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200008a8 	.word	0x200008a8

08004290 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004290:	b490      	push	{r4, r7}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
 800429a:	460b      	mov	r3, r1
 800429c:	71bb      	strb	r3, [r7, #6]
 800429e:	4613      	mov	r3, r2
 80042a0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2b81      	cmp	r3, #129	; 0x81
 80042a6:	d857      	bhi.n	8004358 <ssd1306_DrawPixel+0xc8>
 80042a8:	79bb      	ldrb	r3, [r7, #6]
 80042aa:	2b3f      	cmp	r3, #63	; 0x3f
 80042ac:	d854      	bhi.n	8004358 <ssd1306_DrawPixel+0xc8>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80042ae:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <ssd1306_DrawPixel+0xd4>)
 80042b0:	791b      	ldrb	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d006      	beq.n	80042c4 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 80042b6:	797b      	ldrb	r3, [r7, #5]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
#if (HAVE_DEAD_PIXEL)
	x = x+DEAD_PIXEL_EACH_ROW;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	3301      	adds	r3, #1
 80042c8:	71fb      	strb	r3, [r7, #7]
#endif
    if(color == White) {
 80042ca:	797b      	ldrb	r3, [r7, #5]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d120      	bne.n	8004312 <ssd1306_DrawPixel+0x82>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80042d0:	79fa      	ldrb	r2, [r7, #7]
 80042d2:	79bb      	ldrb	r3, [r7, #6]
 80042d4:	08db      	lsrs	r3, r3, #3
 80042d6:	b2d8      	uxtb	r0, r3
 80042d8:	4601      	mov	r1, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	440b      	add	r3, r1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	4a20      	ldr	r2, [pc, #128]	; (8004368 <ssd1306_DrawPixel+0xd8>)
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	b25a      	sxtb	r2, r3
 80042ea:	79bb      	ldrb	r3, [r7, #6]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	b25b      	sxtb	r3, r3
 80042f8:	4313      	orrs	r3, r2
 80042fa:	b25c      	sxtb	r4, r3
 80042fc:	79fa      	ldrb	r2, [r7, #7]
 80042fe:	4601      	mov	r1, r0
 8004300:	460b      	mov	r3, r1
 8004302:	019b      	lsls	r3, r3, #6
 8004304:	440b      	add	r3, r1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	b2e1      	uxtb	r1, r4
 800430c:	4a16      	ldr	r2, [pc, #88]	; (8004368 <ssd1306_DrawPixel+0xd8>)
 800430e:	54d1      	strb	r1, [r2, r3]
 8004310:	e023      	b.n	800435a <ssd1306_DrawPixel+0xca>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004312:	79fa      	ldrb	r2, [r7, #7]
 8004314:	79bb      	ldrb	r3, [r7, #6]
 8004316:	08db      	lsrs	r3, r3, #3
 8004318:	b2d8      	uxtb	r0, r3
 800431a:	4601      	mov	r1, r0
 800431c:	460b      	mov	r3, r1
 800431e:	019b      	lsls	r3, r3, #6
 8004320:	440b      	add	r3, r1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4413      	add	r3, r2
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <ssd1306_DrawPixel+0xd8>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	b25a      	sxtb	r2, r3
 800432c:	79bb      	ldrb	r3, [r7, #6]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	b25b      	sxtb	r3, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	b25b      	sxtb	r3, r3
 800433e:	4013      	ands	r3, r2
 8004340:	b25c      	sxtb	r4, r3
 8004342:	79fa      	ldrb	r2, [r7, #7]
 8004344:	4601      	mov	r1, r0
 8004346:	460b      	mov	r3, r1
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	440b      	add	r3, r1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	b2e1      	uxtb	r1, r4
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <ssd1306_DrawPixel+0xd8>)
 8004354:	54d1      	strb	r1, [r2, r3]
 8004356:	e000      	b.n	800435a <ssd1306_DrawPixel+0xca>
        return;
 8004358:	bf00      	nop
    }
}
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bc90      	pop	{r4, r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000cb8 	.word	0x20000cb8
 8004368:	200008a8 	.word	0x200008a8

0800436c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	4604      	mov	r4, r0
 8004374:	1d38      	adds	r0, r7, #4
 8004376:	e880 0006 	stmia.w	r0, {r1, r2}
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	4613      	mov	r3, r2
 8004382:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <ssd1306_WriteChar+0xfc>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	793b      	ldrb	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	2b81      	cmp	r3, #129	; 0x81
 8004390:	dc06      	bgt.n	80043a0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004392:	4b35      	ldr	r3, [pc, #212]	; (8004468 <ssd1306_WriteChar+0xfc>)
 8004394:	885b      	ldrh	r3, [r3, #2]
 8004396:	461a      	mov	r2, r3
 8004398:	797b      	ldrb	r3, [r7, #5]
 800439a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800439c:	2b3f      	cmp	r3, #63	; 0x3f
 800439e:	dd01      	ble.n	80043a4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e05d      	b.n	8004460 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e04c      	b.n	8004444 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3b20      	subs	r3, #32
 80043b0:	7979      	ldrb	r1, [r7, #5]
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	440b      	add	r3, r1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e034      	b.n	8004434 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <ssd1306_WriteChar+0xfc>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	b2d8      	uxtb	r0, r3
 80043e8:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <ssd1306_WriteChar+0xfc>)
 80043ea:	885b      	ldrh	r3, [r3, #2]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	7bba      	ldrb	r2, [r7, #14]
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7ff ff49 	bl	8004290 <ssd1306_DrawPixel>
 80043fe:	e016      	b.n	800442e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <ssd1306_WriteChar+0xfc>)
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4413      	add	r3, r2
 800440c:	b2d8      	uxtb	r0, r3
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <ssd1306_WriteChar+0xfc>)
 8004410:	885b      	ldrh	r3, [r3, #2]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	b2d9      	uxtb	r1, r3
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	f7ff ff31 	bl	8004290 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3301      	adds	r3, #1
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	793b      	ldrb	r3, [r7, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4293      	cmp	r3, r2
 800443c:	d3c5      	bcc.n	80043ca <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	797b      	ldrb	r3, [r7, #5]
 8004446:	461a      	mov	r2, r3
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4293      	cmp	r3, r2
 800444c:	d3ad      	bcc.n	80043aa <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <ssd1306_WriteChar+0xfc>)
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	793b      	ldrb	r3, [r7, #4]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4413      	add	r3, r2
 8004458:	b29a      	uxth	r2, r3
 800445a:	4b03      	ldr	r3, [pc, #12]	; (8004468 <ssd1306_WriteChar+0xfc>)
 800445c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3724      	adds	r7, #36	; 0x24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}
 8004468:	20000cb8 	.word	0x20000cb8

0800446c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	1d38      	adds	r0, r7, #4
 8004476:	e880 0006 	stmia.w	r0, {r1, r2}
 800447a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800447c:	e012      	b.n	80044a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	7818      	ldrb	r0, [r3, #0]
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	1d3a      	adds	r2, r7, #4
 8004486:	ca06      	ldmia	r2, {r1, r2}
 8004488:	f7ff ff70 	bl	800436c <ssd1306_WriteChar>
 800448c:	4603      	mov	r3, r0
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d002      	beq.n	800449e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	e008      	b.n	80044b0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e8      	bne.n	800447e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	781b      	ldrb	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	460a      	mov	r2, r1
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
#ifdef FIRST_2PXL_DEAD
	SSD1306.CurrentX = x+2;
#else
	SSD1306.CurrentX = x;
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <ssd1306_SetCursor+0x2c>)
 80044ce:	801a      	strh	r2, [r3, #0]
#endif
    SSD1306.CurrentY = y;
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <ssd1306_SetCursor+0x2c>)
 80044d6:	805a      	strh	r2, [r3, #2]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000cb8 	.word	0x20000cb8

080044e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80044ee:	463b      	mov	r3, r7
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
 80044fc:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004500:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <MX_ADC1_Init+0xc4>)
 8004502:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800450a:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800451e:	2204      	movs	r2, #4
 8004520:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004524:	2200      	movs	r2, #0
 8004526:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800452a:	2200      	movs	r2, #0
 800452c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004530:	2201      	movs	r2, #1
 8004532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004534:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800453e:	2201      	movs	r2, #1
 8004540:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004544:	2200      	movs	r2, #0
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800454a:	2200      	movs	r2, #0
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004558:	2200      	movs	r2, #0
 800455a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <MX_ADC1_Init+0xc0>)
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004564:	4810      	ldr	r0, [pc, #64]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004566:	f001 f92b 	bl	80057c0 <HAL_ADC_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8004570:	f000 fa9e 	bl	8004ab0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MX_ADC1_Init+0xc8>)
 8004576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004578:	2306      	movs	r3, #6
 800457a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800457c:	2307      	movs	r3, #7
 800457e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004580:	237f      	movs	r3, #127	; 0x7f
 8004582:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004584:	2304      	movs	r3, #4
 8004586:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800458c:	463b      	mov	r3, r7
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <MX_ADC1_Init+0xc0>)
 8004592:	f001 fb8b 	bl	8005cac <HAL_ADC_ConfigChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800459c:	f000 fa88 	bl	8004ab0 <Error_Handler>
  }

}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20001974 	.word	0x20001974
 80045ac:	50040000 	.word	0x50040000
 80045b0:	1d500080 	.word	0x1d500080

080045b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_ADC_MspInit+0x74>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d124      	bne.n	8004620 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	4a0e      	ldr	r2, [pc, #56]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_ADC_MspInit+0x78>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VIN_ADC_Pin|BATT_ADC_Pin;
 8004606:	230c      	movs	r3, #12
 8004608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800460a:	2303      	movs	r3, #3
 800460c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800461c:	f002 f96c 	bl	80068f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004620:	bf00      	nop
 8004622:	3728      	adds	r7, #40	; 0x28
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	50040000 	.word	0x50040000
 800462c:	40021000 	.word	0x40021000

08004630 <ADC_ChannelConfig>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void ADC_ChannelConfig(uint32_t channel){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	_Config.Channel = channel;
 8004638:	4a06      	ldr	r2, [pc, #24]	; (8004654 <ADC_ChannelConfig+0x24>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6013      	str	r3, [r2, #0]
	_Config.Rank = ADC_REGULAR_RANK_1;
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <ADC_ChannelConfig+0x24>)
 8004640:	2206      	movs	r2, #6
 8004642:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc1, &_Config);
 8004644:	4903      	ldr	r1, [pc, #12]	; (8004654 <ADC_ChannelConfig+0x24>)
 8004646:	4804      	ldr	r0, [pc, #16]	; (8004658 <ADC_ChannelConfig+0x28>)
 8004648:	f001 fb30 	bl	8005cac <HAL_ADC_ConfigChannel>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	200019dc 	.word	0x200019dc
 8004658:	20001974 	.word	0x20001974

0800465c <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> SharedAnalog_PA2
     PA3   ------> SharedAnalog_PA3
*/
void MX_GPIO_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004672:	4b56      	ldr	r3, [pc, #344]	; (80047cc <MX_GPIO_Init+0x170>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	4a55      	ldr	r2, [pc, #340]	; (80047cc <MX_GPIO_Init+0x170>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <MX_GPIO_Init+0x170>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800468a:	4b50      	ldr	r3, [pc, #320]	; (80047cc <MX_GPIO_Init+0x170>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4a4f      	ldr	r2, [pc, #316]	; (80047cc <MX_GPIO_Init+0x170>)
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004696:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <MX_GPIO_Init+0x170>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <MX_GPIO_Init+0x170>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	4a49      	ldr	r2, [pc, #292]	; (80047cc <MX_GPIO_Init+0x170>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <MX_GPIO_Init+0x170>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ba:	4b44      	ldr	r3, [pc, #272]	; (80047cc <MX_GPIO_Init+0x170>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	4a43      	ldr	r2, [pc, #268]	; (80047cc <MX_GPIO_Init+0x170>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <MX_GPIO_Init+0x170>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_PWR_KEY_Pin|GSM_RST_Pin|STM_DTR_GSM_Pin|HV_OUT1_Pin, GPIO_PIN_RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	f648 1180 	movw	r1, #35200	; 0x8980
 80046d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046dc:	f002 fa9e 	bl	8006c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPS_RESET_Pin|GPS_PWR_CTRL_Pin|OPTIGA_RST_Pin|GSM_WAKEUP_Pin 
 80046e0:	2200      	movs	r2, #0
 80046e2:	f249 113e 	movw	r1, #37182	; 0x913e
 80046e6:	483a      	ldr	r0, [pc, #232]	; (80047d0 <MX_GPIO_Init+0x174>)
 80046e8:	f002 fa98 	bl	8006c1c <HAL_GPIO_WritePin>
                          |HV_OUT2_Pin|BATT_ADC_EN_Pin|VIN_ADC_EN_Pin|SENSOR_PWR_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_TIMER_Pin;
 80046ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_TIMER_GPIO_Port, &GPIO_InitStruct);
 80046fa:	f107 0314 	add.w	r3, r7, #20
 80046fe:	4619      	mov	r1, r3
 8004700:	4834      	ldr	r0, [pc, #208]	; (80047d4 <MX_GPIO_Init+0x178>)
 8004702:	f002 f8f9 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8004706:	230b      	movs	r3, #11
 8004708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800470a:	2303      	movs	r3, #3
 800470c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	482f      	ldr	r0, [pc, #188]	; (80047d8 <MX_GPIO_Init+0x17c>)
 800471a:	f002 f8ed 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VIN_ADC_Pin|BATT_ADC_Pin;
 800471e:	230c      	movs	r3, #12
 8004720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004722:	2303      	movs	r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004734:	f002 f8e0 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CHARGE_STATUS_Pin|NET_MODE_Pin|NET_STATUS_Pin|STM_CTS_GSM_Pin;
 8004738:	f241 0370 	movw	r3, #4208	; 0x1070
 800473c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4619      	mov	r1, r3
 800474c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004750:	f002 f8d2 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GSM_PWR_KEY_Pin|GSM_RST_Pin|STM_DTR_GSM_Pin|HV_OUT1_Pin;
 8004754:	f648 1380 	movw	r3, #35200	; 0x8980
 8004758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475a:	2301      	movs	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004770:	f002 f8c2 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004778:	2303      	movs	r3, #3
 800477a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4619      	mov	r1, r3
 8004786:	4812      	ldr	r0, [pc, #72]	; (80047d0 <MX_GPIO_Init+0x174>)
 8004788:	f002 f8b6 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin|GPS_PWR_CTRL_Pin|OPTIGA_RST_Pin|GSM_WAKEUP_Pin 
 800478c:	f249 133e 	movw	r3, #37182	; 0x913e
 8004790:	617b      	str	r3, [r7, #20]
                          |HV_OUT2_Pin|BATT_ADC_EN_Pin|VIN_ADC_EN_Pin|SENSOR_PWR_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004792:	2301      	movs	r3, #1
 8004794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	4619      	mov	r1, r3
 80047a4:	480a      	ldr	r0, [pc, #40]	; (80047d0 <MX_GPIO_Init+0x174>)
 80047a6:	f002 f8a7 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TAMPER_Pin|IO_1_WIRE_Pin|IO_DOORSW_Pin;
 80047aa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80047ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	4619      	mov	r1, r3
 80047be:	4804      	ldr	r0, [pc, #16]	; (80047d0 <MX_GPIO_Init+0x174>)
 80047c0:	f002 f89a 	bl	80068f8 <HAL_GPIO_Init>

}
 80047c4:	bf00      	nop
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	48000400 	.word	0x48000400
 80047d4:	48000800 	.word	0x48000800
 80047d8:	48001c00 	.word	0x48001c00

080047dc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <MX_I2C2_Init+0x74>)
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <MX_I2C2_Init+0x78>)
 80047e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <MX_I2C2_Init+0x74>)
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <MX_I2C2_Init+0x7c>)
 80047ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <MX_I2C2_Init+0x74>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <MX_I2C2_Init+0x74>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <MX_I2C2_Init+0x74>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <MX_I2C2_Init+0x74>)
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <MX_I2C2_Init+0x74>)
 8004806:	2200      	movs	r2, #0
 8004808:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <MX_I2C2_Init+0x74>)
 800480c:	2200      	movs	r2, #0
 800480e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <MX_I2C2_Init+0x74>)
 8004812:	2200      	movs	r2, #0
 8004814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004816:	480e      	ldr	r0, [pc, #56]	; (8004850 <MX_I2C2_Init+0x74>)
 8004818:	f002 fa18 	bl	8006c4c <HAL_I2C_Init>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004822:	f000 f945 	bl	8004ab0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004826:	2100      	movs	r1, #0
 8004828:	4809      	ldr	r0, [pc, #36]	; (8004850 <MX_I2C2_Init+0x74>)
 800482a:	f002 fd89 	bl	8007340 <HAL_I2CEx_ConfigAnalogFilter>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004834:	f000 f93c 	bl	8004ab0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004838:	2100      	movs	r1, #0
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <MX_I2C2_Init+0x74>)
 800483c:	f002 fdcb 	bl	80073d6 <HAL_I2CEx_ConfigDigitalFilter>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004846:	f000 f933 	bl	8004ab0 <Error_Handler>
  }

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200019f4 	.word	0x200019f4
 8004854:	40005800 	.word	0x40005800
 8004858:	00707cbb 	.word	0x00707cbb

0800485c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <HAL_I2C_MspInit+0x7c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d128      	bne.n	80048d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_I2C_MspInit+0x80>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	4a16      	ldr	r2, [pc, #88]	; (80048dc <HAL_I2C_MspInit+0x80>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <HAL_I2C_MspInit+0x80>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004896:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800489a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800489c:	2312      	movs	r3, #18
 800489e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a0:	2301      	movs	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a4:	2303      	movs	r3, #3
 80048a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80048a8:	2304      	movs	r3, #4
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	4619      	mov	r1, r3
 80048b2:	480b      	ldr	r0, [pc, #44]	; (80048e0 <HAL_I2C_MspInit+0x84>)
 80048b4:	f002 f820 	bl	80068f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_I2C_MspInit+0x80>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	4a07      	ldr	r2, [pc, #28]	; (80048dc <HAL_I2C_MspInit+0x80>)
 80048be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048c2:	6593      	str	r3, [r2, #88]	; 0x58
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_I2C_MspInit+0x80>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80048d0:	bf00      	nop
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40005800 	.word	0x40005800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	48000400 	.word	0x48000400

080048e4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <MX_IWDG_Init+0x34>)
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <MX_IWDG_Init+0x38>)
 80048ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <MX_IWDG_Init+0x34>)
 80048f0:	2206      	movs	r2, #6
 80048f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <MX_IWDG_Init+0x34>)
 80048f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80048fa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <MX_IWDG_Init+0x34>)
 80048fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004902:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004904:	4804      	ldr	r0, [pc, #16]	; (8004918 <MX_IWDG_Init+0x34>)
 8004906:	f002 fdb2 	bl	800746e <HAL_IWDG_Init>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004910:	f000 f8ce 	bl	8004ab0 <Error_Handler>
  }

}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20001a40 	.word	0x20001a40
 800491c:	40003000 	.word	0x40003000

08004920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <main+0x48>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f008 f995 	bl	800cc5c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004932:	f000 fc96 	bl	8005262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004936:	f000 f819 	bl	800496c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800493a:	f7ff fe8f 	bl	800465c <MX_GPIO_Init>
  MX_ADC1_Init();
 800493e:	f7ff fdd3 	bl	80044e8 <MX_ADC1_Init>
  MX_I2C2_Init();
 8004942:	f7ff ff4b 	bl	80047dc <MX_I2C2_Init>
  MX_UART4_Init();
 8004946:	f000 fabb 	bl	8004ec0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800494a:	f000 fae9 	bl	8004f20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800494e:	f000 fb1f 	bl	8004f90 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8004952:	f000 f8b5 	bl	8004ac0 <MX_RTC_Init>
  MX_TIM1_Init();
 8004956:	f000 fa3f 	bl	8004dd8 <MX_TIM1_Init>
  MX_IWDG_Init();
 800495a:	f7ff ffc3 	bl	80048e4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  Setup();
 800495e:	f005 fc91 	bl	800a284 <Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Loop();
 8004962:	f005 fe55 	bl	800a610 <Loop>
 8004966:	e7fc      	b.n	8004962 <main+0x42>
 8004968:	20000014 	.word	0x20000014

0800496c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b0b0      	sub	sp, #192	; 0xc0
 8004970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004976:	2244      	movs	r2, #68	; 0x44
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f007 fafb 	bl	800bf76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004990:	463b      	mov	r3, r7
 8004992:	2268      	movs	r2, #104	; 0x68
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f007 faed 	bl	800bf76 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800499c:	f002 fdbe 	bl	800751c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <SystemClock_Config+0x13c>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a40      	ldr	r2, [pc, #256]	; (8004aa8 <SystemClock_Config+0x13c>)
 80049a8:	f023 0318 	bic.w	r3, r3, #24
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80049b0:	231c      	movs	r3, #28
 80049b2:	67fb      	str	r3, [r7, #124]	; 0x7c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80049cc:	2360      	movs	r3, #96	; 0x60
 80049ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049d2:	2302      	movs	r3, #2
 80049d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80049d8:	2301      	movs	r3, #1
 80049da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 16;
 80049e4:	2310      	movs	r3, #16
 80049e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049ea:	2307      	movs	r3, #7
 80049ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049f0:	2302      	movs	r3, #2
 80049f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049f6:	2302      	movs	r3, #2
 80049f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 fdff 	bl	8007604 <HAL_RCC_OscConfig>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004a0c:	f000 f850 	bl	8004ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a10:	230f      	movs	r3, #15
 8004a12:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a14:	2303      	movs	r3, #3
 8004a16:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a20:	2300      	movs	r3, #0
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a28:	2101      	movs	r1, #1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 fa0a 	bl	8007e44 <HAL_RCC_ClockConfig>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8004a36:	f000 f83b 	bl	8004ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <SystemClock_Config+0x140>)
 8004a3c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004a46:	2300      	movs	r3, #0
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004a4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a58:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004a62:	2310      	movs	r3, #16
 8004a64:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004a66:	2307      	movs	r3, #7
 8004a68:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a76:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 fbe6 	bl	800824c <HAL_RCCEx_PeriphCLKConfig>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8004a86:	f000 f813 	bl	8004ab0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a8e:	f002 fd63 	bl	8007558 <HAL_PWREx_ControlVoltageScaling>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SystemClock_Config+0x130>
  {
    Error_Handler();
 8004a98:	f000 f80a 	bl	8004ab0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004a9c:	f003 fe40 	bl	8008720 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004aa0:	bf00      	nop
 8004aa2:	37c0      	adds	r7, #192	; 0xc0
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	0002408d 	.word	0x0002408d

08004ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <MX_RTC_Init+0x48>)
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <MX_RTC_Init+0x4c>)
 8004ac8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <MX_RTC_Init+0x48>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <MX_RTC_Init+0x48>)
 8004ad2:	227f      	movs	r2, #127	; 0x7f
 8004ad4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <MX_RTC_Init+0x48>)
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <MX_RTC_Init+0x48>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <MX_RTC_Init+0x48>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <MX_RTC_Init+0x48>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <MX_RTC_Init+0x48>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004af4:	4804      	ldr	r0, [pc, #16]	; (8004b08 <MX_RTC_Init+0x48>)
 8004af6:	f003 ff13 	bl	8008920 <HAL_RTC_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004b00:	f7ff ffd6 	bl	8004ab0 <Error_Handler>
  }

}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20001a50 	.word	0x20001a50
 8004b0c:	40002800 	.word	0x40002800

08004b10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <HAL_RTC_MspInit+0x30>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d107      	bne.n	8004b32 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_RTC_MspInit+0x34>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <HAL_RTC_MspInit+0x34>)
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40002800 	.word	0x40002800
 8004b44:	40021000 	.word	0x40021000

08004b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_MspInit+0x44>)
 8004b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_MspInit+0x44>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6613      	str	r3, [r2, #96]	; 0x60
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <HAL_MspInit+0x44>)
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_MspInit+0x44>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <HAL_MspInit+0x44>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6593      	str	r3, [r2, #88]	; 0x58
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_MspInit+0x44>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000

08004b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	dbg_println("### Hard Fault ###");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ba2:	e7fe      	b.n	8004ba2 <HardFault_Handler+0x4>

08004ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba8:	e7fe      	b.n	8004ba8 <MemManage_Handler+0x4>

08004baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bae:	e7fe      	b.n	8004bae <BusFault_Handler+0x4>

08004bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bb4:	e7fe      	b.n	8004bb4 <UsageFault_Handler+0x4>

08004bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004be4:	f000 fb90 	bl	8005308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	DENSORAM_RxCallBack();
 8004bf0:	f7fc fa5a 	bl	80010a8 <DENSORAM_RxCallBack>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bf4:	4802      	ldr	r0, [pc, #8]	; (8004c00 <USART1_IRQHandler+0x14>)
 8004bf6:	f004 fc39 	bl	800946c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20001b34 	.word	0x20001b34

08004c04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	gnss_RxCallback();
 8004c08:	f7fd f968 	bl	8001edc <gnss_RxCallback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <USART3_IRQHandler+0x14>)
 8004c0e:	f004 fc2d 	bl	800946c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20001ab4 	.word	0x20001ab4

08004c1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	UC200_RxCallback();
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <UART4_IRQHandler+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4798      	blx	r3
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c26:	4803      	ldr	r0, [pc, #12]	; (8004c34 <UART4_IRQHandler+0x18>)
 8004c28:	f004 fc20 	bl	800946c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20001970 	.word	0x20001970
 8004c34:	20001bb4 	.word	0x20001bb4

08004c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e00a      	b.n	8004c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	4601      	mov	r1, r0
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	60ba      	str	r2, [r7, #8]
 8004c56:	b2ca      	uxtb	r2, r1
 8004c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	dbf0      	blt.n	8004c4a <_read+0x12>
	}

return len;
 8004c68:	687b      	ldr	r3, [r7, #4]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e009      	b.n	8004c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	60ba      	str	r2, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 faa3 	bl	80051d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3301      	adds	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dbf1      	blt.n	8004c84 <_write+0x12>
	}
	return len;
 8004ca0:	687b      	ldr	r3, [r7, #4]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_close>:

int _close(int file)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <_isatty>:

int _isatty(int file)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8004cea:	2301      	movs	r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <_sbrk+0x50>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <_sbrk+0x16>
		heap_end = &end;
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <_sbrk+0x50>)
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <_sbrk+0x54>)
 8004d28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <_sbrk+0x50>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <_sbrk+0x50>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	466a      	mov	r2, sp
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d907      	bls.n	8004d4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004d3e:	f007 f8e5 	bl	800bf0c <__errno>
 8004d42:	4602      	mov	r2, r0
 8004d44:	230c      	movs	r3, #12
 8004d46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4c:	e006      	b.n	8004d5c <_sbrk+0x48>
	}

	heap_end += incr;
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <_sbrk+0x50>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <_sbrk+0x50>)
 8004d58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000cc0 	.word	0x20000cc0
 8004d68:	20002748 	.word	0x20002748

08004d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <SystemInit+0x64>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <SystemInit+0x64>)
 8004d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <SystemInit+0x68>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <SystemInit+0x68>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <SystemInit+0x68>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <SystemInit+0x68>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0f      	ldr	r2, [pc, #60]	; (8004dd4 <SystemInit+0x68>)
 8004d98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004d9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <SystemInit+0x68>)
 8004da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004da8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <SystemInit+0x68>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <SystemInit+0x68>)
 8004db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <SystemInit+0x68>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <SystemInit+0x64>)
 8004dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004df8:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <MX_TIM1_Init+0xa4>)
 8004dfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004dfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e0c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8004e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e24:	4814      	ldr	r0, [pc, #80]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e26:	f003 febc 	bl	8008ba2 <HAL_TIM_Base_Init>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8004e30:	f7ff fe3e 	bl	8004ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	4619      	mov	r1, r3
 8004e40:	480d      	ldr	r0, [pc, #52]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e42:	f003 fed9 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004e4c:	f7ff fe30 	bl	8004ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e50:	2300      	movs	r3, #0
 8004e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4805      	ldr	r0, [pc, #20]	; (8004e78 <MX_TIM1_Init+0xa0>)
 8004e62:	f004 f88b 	bl	8008f7c <HAL_TIMEx_MasterConfigSynchronization>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004e6c:	f7ff fe20 	bl	8004ab0 <Error_Handler>
  }

}
 8004e70:	bf00      	nop
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20001a74 	.word	0x20001a74
 8004e7c:	40012c00 	.word	0x40012c00

08004e80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <HAL_TIM_Base_MspInit+0x38>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10b      	bne.n	8004eaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_TIM_Base_MspInit+0x3c>)
 8004e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_TIM_Base_MspInit+0x3c>)
 8004e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_TIM_Base_MspInit+0x3c>)
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <MX_UART4_Init+0x5c>)
 8004ec8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ed0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <MX_UART4_Init+0x58>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ee6:	220c      	movs	r2, #12
 8004ee8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <MX_UART4_Init+0x58>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <MX_UART4_Init+0x58>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <MX_UART4_Init+0x58>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_UART4_Init+0x58>)
 8004f04:	f004 f8a8 	bl	8009058 <HAL_UART_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004f0e:	f7ff fdcf 	bl	8004ab0 <Error_Handler>
  }

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20001bb4 	.word	0x20001bb4
 8004f1c:	40004c00 	.word	0x40004c00

08004f20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004f24:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f26:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <MX_USART1_UART_Init+0x6c>)
 8004f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f2c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f46:	220c      	movs	r2, #12
 8004f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f5e:	2203      	movs	r2, #3
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f72:	4805      	ldr	r0, [pc, #20]	; (8004f88 <MX_USART1_UART_Init+0x68>)
 8004f74:	f004 f870 	bl	8009058 <HAL_UART_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8004f7e:	f7ff fd97 	bl	8004ab0 <Error_Handler>
  }

}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20001b34 	.word	0x20001b34
 8004f8c:	40013800 	.word	0x40013800

08004f90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <MX_USART3_UART_Init+0x5c>)
 8004f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fb6:	220c      	movs	r2, #12
 8004fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fd2:	4805      	ldr	r0, [pc, #20]	; (8004fe8 <MX_USART3_UART_Init+0x58>)
 8004fd4:	f004 f840 	bl	8009058 <HAL_UART_Init>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004fde:	f7ff fd67 	bl	8004ab0 <Error_Handler>
  }

}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20001ab4 	.word	0x20001ab4
 8004fec:	40004800 	.word	0x40004800

08004ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6d      	ldr	r2, [pc, #436]	; (80051c4 <HAL_UART_MspInit+0x1d4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d142      	bne.n	8005098 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005012:	4b6d      	ldr	r3, [pc, #436]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	4a6c      	ldr	r2, [pc, #432]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
 800501e:	4b6a      	ldr	r3, [pc, #424]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502a:	4b67      	ldr	r3, [pc, #412]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	4a66      	ldr	r2, [pc, #408]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005036:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = STM_TX_GSM_Pin;
 8005042:	2301      	movs	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2302      	movs	r3, #2
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	2300      	movs	r3, #0
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504e:	2303      	movs	r3, #3
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005052:	2308      	movs	r3, #8
 8005054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STM_TX_GSM_GPIO_Port, &GPIO_InitStruct);
 8005056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505a:	4619      	mov	r1, r3
 800505c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005060:	f001 fc4a 	bl	80068f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_RX_GSM_Pin;
 8005064:	2302      	movs	r3, #2
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800506c:	2301      	movs	r3, #1
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005074:	2308      	movs	r3, #8
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STM_RX_GSM_GPIO_Port, &GPIO_InitStruct);
 8005078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005082:	f001 fc39 	bl	80068f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8005086:	2200      	movs	r2, #0
 8005088:	2101      	movs	r1, #1
 800508a:	2034      	movs	r0, #52	; 0x34
 800508c:	f001 fbbd 	bl	800680a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005090:	2034      	movs	r0, #52	; 0x34
 8005092:	f001 fbd6 	bl	8006842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005096:	e090      	b.n	80051ba <HAL_UART_MspInit+0x1ca>
  else if(uartHandle->Instance==USART1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a4b      	ldr	r2, [pc, #300]	; (80051cc <HAL_UART_MspInit+0x1dc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d144      	bne.n	800512c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a2:	4b49      	ldr	r3, [pc, #292]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a6:	4a48      	ldr	r2, [pc, #288]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ac:	6613      	str	r3, [r2, #96]	; 0x60
 80050ae:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ba:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	4a42      	ldr	r2, [pc, #264]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050c6:	4b40      	ldr	r3, [pc, #256]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_DBG_Pin;
 80050d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d8:	2302      	movs	r3, #2
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e0:	2303      	movs	r3, #3
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050e4:	2307      	movs	r3, #7
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART_TX_DBG_GPIO_Port, &GPIO_InitStruct);
 80050e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ec:	4619      	mov	r1, r3
 80050ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f2:	f001 fc01 	bl	80068f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_DBG_Pin;
 80050f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fc:	2302      	movs	r3, #2
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005100:	2302      	movs	r3, #2
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005104:	2303      	movs	r3, #3
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005108:	2307      	movs	r3, #7
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART_RX_DBG_GPIO_Port, &GPIO_InitStruct);
 800510c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005110:	4619      	mov	r1, r3
 8005112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005116:	f001 fbef 	bl	80068f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800511a:	2200      	movs	r2, #0
 800511c:	2101      	movs	r1, #1
 800511e:	2025      	movs	r0, #37	; 0x25
 8005120:	f001 fb73 	bl	800680a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005124:	2025      	movs	r0, #37	; 0x25
 8005126:	f001 fb8c 	bl	8006842 <HAL_NVIC_EnableIRQ>
}
 800512a:	e046      	b.n	80051ba <HAL_UART_MspInit+0x1ca>
  else if(uartHandle->Instance==USART3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <HAL_UART_MspInit+0x1e0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d141      	bne.n	80051ba <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005136:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	4a23      	ldr	r2, [pc, #140]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6593      	str	r3, [r2, #88]	; 0x58
 8005142:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_UART_MspInit+0x1d8>)
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_GPS_Pin;
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	2302      	movs	r3, #2
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005174:	2303      	movs	r3, #3
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005178:	2307      	movs	r3, #7
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART_TX_GPS_GPIO_Port, &GPIO_InitStruct);
 800517c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005180:	4619      	mov	r1, r3
 8005182:	4814      	ldr	r0, [pc, #80]	; (80051d4 <HAL_UART_MspInit+0x1e4>)
 8005184:	f001 fbb8 	bl	80068f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_GPS_Pin;
 8005188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518e:	2302      	movs	r3, #2
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005192:	2301      	movs	r3, #1
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005196:	2303      	movs	r3, #3
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800519a:	2307      	movs	r3, #7
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART_RX_GPS_GPIO_Port, &GPIO_InitStruct);
 800519e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051a2:	4619      	mov	r1, r3
 80051a4:	480b      	ldr	r0, [pc, #44]	; (80051d4 <HAL_UART_MspInit+0x1e4>)
 80051a6:	f001 fba7 	bl	80068f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80051aa:	2200      	movs	r2, #0
 80051ac:	2102      	movs	r1, #2
 80051ae:	2027      	movs	r0, #39	; 0x27
 80051b0:	f001 fb2b 	bl	800680a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80051b4:	2027      	movs	r0, #39	; 0x27
 80051b6:	f001 fb44 	bl	8006842 <HAL_NVIC_EnableIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3738      	adds	r7, #56	; 0x38
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40004c00 	.word	0x40004c00
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40013800 	.word	0x40013800
 80051d0:	40004800 	.word	0x40004800
 80051d4:	48000400 	.word	0x48000400

080051d8 <__io_putchar>:
  }
} 

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	UART4->TDR = (uint16_t)ch;
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <__io_putchar+0x30>)
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	b292      	uxth	r2, r2
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
	while(!__HAL_UART_GET_FLAG(&huart4, UART_FLAG_TC));
 80051e8:	bf00      	nop
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <__io_putchar+0x34>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d1f8      	bne.n	80051ea <__io_putchar+0x12>
	return ch;
 80051f8:	687b      	ldr	r3, [r7, #4]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40004c00 	.word	0x40004c00
 800520c:	20001bb4 	.word	0x20001bb4

08005210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005248 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005216:	e003      	b.n	8005220 <LoopCopyDataInit>

08005218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800521a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800521c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800521e:	3104      	adds	r1, #4

08005220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005220:	480b      	ldr	r0, [pc, #44]	; (8005250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005228:	d3f6      	bcc.n	8005218 <CopyDataInit>
	ldr	r2, =_sbss
 800522a:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <LoopForever+0x12>)
	b	LoopFillZerobss
 800522c:	e002      	b.n	8005234 <LoopFillZerobss>

0800522e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800522e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005230:	f842 3b04 	str.w	r3, [r2], #4

08005234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <LoopForever+0x16>)
	cmp	r2, r3
 8005236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005238:	d3f9      	bcc.n	800522e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800523a:	f7ff fd97 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800523e:	f006 fe6b 	bl	800bf18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005242:	f7ff fb6d 	bl	8004920 <main>

08005246 <LoopForever>:

LoopForever:
    b LoopForever
 8005246:	e7fe      	b.n	8005246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005248:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800524c:	0801243c 	.word	0x0801243c
	ldr	r0, =_sdata
 8005250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005254:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8005258:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 800525c:	20002744 	.word	0x20002744

08005260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005260:	e7fe      	b.n	8005260 <ADC1_IRQHandler>

08005262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800526c:	2003      	movs	r0, #3
 800526e:	f001 fac1 	bl	80067f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005272:	2000      	movs	r0, #0
 8005274:	f000 f80e 	bl	8005294 <HAL_InitTick>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	71fb      	strb	r3, [r7, #7]
 8005282:	e001      	b.n	8005288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005284:	f7ff fc60 	bl	8004b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005288:	79fb      	ldrb	r3, [r7, #7]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80052a0:	4b16      	ldr	r3, [pc, #88]	; (80052fc <HAL_InitTick+0x68>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d022      	beq.n	80052ee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_InitTick+0x6c>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_InitTick+0x68>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 face 	bl	800685e <HAL_SYSTICK_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d809      	bhi.n	80052e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052ce:	2200      	movs	r2, #0
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	f001 fa98 	bl	800680a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_InitTick+0x70>)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	e007      	b.n	80052f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
 80052e6:	e004      	b.n	80052f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e001      	b.n	80052f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000010 	.word	0x20000010
 8005300:	20000008 	.word	0x20000008
 8005304:	2000000c 	.word	0x2000000c

08005308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_IncTick+0x1c>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_IncTick+0x20>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4413      	add	r3, r2
 8005316:	4a03      	ldr	r2, [pc, #12]	; (8005324 <HAL_IncTick+0x1c>)
 8005318:	6013      	str	r3, [r2, #0]
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20001c34 	.word	0x20001c34
 8005328:	20000010 	.word	0x20000010

0800532c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return uwTick;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_GetTick+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20001c34 	.word	0x20001c34

08005344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800534c:	f7ff ffee 	bl	800532c <HAL_GetTick>
 8005350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d004      	beq.n	8005368 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_Delay+0x40>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005368:	bf00      	nop
 800536a:	f7ff ffdf 	bl	800532c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	429a      	cmp	r2, r3
 8005378:	d8f7      	bhi.n	800536a <HAL_Delay+0x26>
  {
  }
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000010 	.word	0x20000010

08005388 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80053f0:	b490      	push	{r4, r7}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3360      	adds	r3, #96	; 0x60
 8005402:	461a      	mov	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <LL_ADC_SetOffset+0x40>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005422:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bc90      	pop	{r4, r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	03fff000 	.word	0x03fff000

08005434 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005434:	b490      	push	{r4, r7}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3360      	adds	r3, #96	; 0x60
 8005442:	461a      	mov	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bc90      	pop	{r4, r7}
 800545a:	4770      	bx	lr

0800545c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800545c:	b490      	push	{r4, r7}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3360      	adds	r3, #96	; 0x60
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4313      	orrs	r3, r2
 8005480:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bc90      	pop	{r4, r7}
 800548a:	4770      	bx	lr

0800548c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	615a      	str	r2, [r3, #20]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80054d8:	b490      	push	{r4, r7}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3330      	adds	r3, #48	; 0x30
 80054e8:	461a      	mov	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	4413      	add	r3, r2
 80054f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	211f      	movs	r1, #31
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	401a      	ands	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0e9b      	lsrs	r3, r3, #26
 800550e:	f003 011f 	and.w	r1, r3, #31
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bc90      	pop	{r4, r7}
 8005528:	4770      	bx	lr

0800552a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800552a:	b490      	push	{r4, r7}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3314      	adds	r3, #20
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	0e5b      	lsrs	r3, r3, #25
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	0d1b      	lsrs	r3, r3, #20
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2107      	movs	r1, #7
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	401a      	ands	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	0d1b      	lsrs	r3, r3, #20
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bc90      	pop	{r4, r7}
 8005578:	4770      	bx	lr
	...

0800557c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005594:	43db      	mvns	r3, r3
 8005596:	401a      	ands	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0318 	and.w	r3, r3, #24
 800559e:	4908      	ldr	r1, [pc, #32]	; (80055c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80055a0:	40d9      	lsrs	r1, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	400b      	ands	r3, r1
 80055a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	0007ffff 	.word	0x0007ffff

080055c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80055d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6093      	str	r3, [r2, #8]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fc:	d101      	bne.n	8005602 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005624:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564c:	d101      	bne.n	8005652 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005674:	f043 0201 	orr.w	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005698:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <LL_ADC_IsEnabled+0x18>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <LL_ADC_IsEnabled+0x1a>
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d101      	bne.n	80056ee <LL_ADC_IsDisableOngoing+0x18>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <LL_ADC_IsDisableOngoing+0x1a>
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800570c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005710:	f043 0204 	orr.w	r2, r3, #4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d101      	bne.n	8005764 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d101      	bne.n	80057b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e12d      	b.n	8005a36 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fe fee3 	bl	80045b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fef1 	bl	80055e8 <LL_ADC_IsDeepPowerDownEnabled>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fed7 	bl	80055c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ff0c 	bl	8005638 <LL_ADC_IsInternalRegulatorEnabled>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d113      	bne.n	800584e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fef0 	bl	8005610 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005830:	4b83      	ldr	r3, [pc, #524]	; (8005a40 <HAL_ADC_Init+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	4a83      	ldr	r2, [pc, #524]	; (8005a44 <HAL_ADC_Init+0x284>)
 8005838:	fba2 2303 	umull	r2, r3, r2, r3
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005840:	e002      	b.n	8005848 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3b01      	subs	r3, #1
 8005846:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f9      	bne.n	8005842 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fef0 	bl	8005638 <LL_ADC_IsInternalRegulatorEnabled>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ff64 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8005884:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 80c8 	bne.w	8005a24 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 80c4 	bne.w	8005a24 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80058a4:	f043 0202 	orr.w	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fefd 	bl	80056b0 <LL_ADC_IsEnabled>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058bc:	4862      	ldr	r0, [pc, #392]	; (8005a48 <HAL_ADC_Init+0x288>)
 80058be:	f7ff fef7 	bl	80056b0 <LL_ADC_IsEnabled>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	485f      	ldr	r0, [pc, #380]	; (8005a4c <HAL_ADC_Init+0x28c>)
 80058d0:	f7ff fd5a 	bl	8005388 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7e5b      	ldrb	r3, [r3, #25]
 80058d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80058e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80058ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d106      	bne.n	8005910 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	3b01      	subs	r3, #1
 8005908:	045b      	lsls	r3, r3, #17
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_ADC_Init+0x290>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	430b      	orrs	r3, r1
 800593e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff01 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 800594a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff22 	bl	800579a <LL_ADC_INJ_IsConversionOngoing>
 8005956:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d140      	bne.n	80059e0 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d13d      	bne.n	80059e0 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7e1b      	ldrb	r3, [r3, #24]
 800596c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800596e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005976:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005986:	f023 0306 	bic.w	r3, r3, #6
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	69b9      	ldr	r1, [r7, #24]
 8005990:	430b      	orrs	r3, r1
 8005992:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800599a:	2b01      	cmp	r3, #1
 800599c:	d118      	bne.n	80059d0 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059b4:	4311      	orrs	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059c0:	430a      	orrs	r2, r1
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e007      	b.n	80059e0 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d10c      	bne.n	8005a02 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f023 010f 	bic.w	r1, r3, #15
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005a00:	e007      	b.n	8005a12 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 020f 	bic.w	r2, r2, #15
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	; 0x58
 8005a22:	e007      	b.n	8005a34 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	f043 0210 	orr.w	r2, r3, #16
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000008 	.word	0x20000008
 8005a44:	053e2d63 	.word	0x053e2d63
 8005a48:	50040000 	.word	0x50040000
 8005a4c:	50040300 	.word	0x50040300
 8005a50:	fff0c007 	.word	0xfff0c007

08005a54 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe73 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d14f      	bne.n	8005b0c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_ADC_Start+0x26>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e04b      	b.n	8005b12 <HAL_ADC_Start+0xbe>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd34 	bl	80064f0 <ADC_Enable>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d137      	bne.n	8005b02 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	d106      	bne.n	8005ac2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab8:	f023 0206 	bic.w	r2, r3, #6
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ac0:	e002      	b.n	8005ac8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	221c      	movs	r2, #28
 8005ace:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fdfe 	bl	80056fc <LL_ADC_REG_StartConversion>
 8005b00:	e006      	b.n	8005b10 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005b0a:	e001      	b.n	8005b10 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_ADC_Stop+0x16>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e023      	b.n	8005b78 <HAL_ADC_Stop+0x5e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005b38:	2103      	movs	r1, #3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fc24 	bl	8006388 <ADC_ConversionStop>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d111      	bne.n	8005b6e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fd2a 	bl	80065a4 <ADC_Disable>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	f043 0201 	orr.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d102      	bne.n	8005b98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005b92:	2308      	movs	r3, #8
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e010      	b.n	8005bba <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e068      	b.n	8005c88 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005bba:	f7ff fbb7 	bl	800532c <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005bc0:	e01a      	b.n	8005bf8 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d016      	beq.n	8005bf8 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005bca:	f7ff fbaf 	bl	800532c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <HAL_ADC_PollForConversion+0x60>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	f043 0204 	orr.w	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e047      	b.n	8005c88 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0dd      	beq.n	8005bc2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fc4b 	bl	80054b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01c      	beq.n	8005c5c <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	7e5b      	ldrb	r3, [r3, #25]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d118      	bne.n	8005c5c <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d111      	bne.n	8005c5c <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d104      	bne.n	8005c74 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e008      	b.n	8005c86 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	220c      	movs	r2, #12
 8005c84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b0a6      	sub	sp, #152	; 0x98
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x22>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e352      	b.n	8006374 <HAL_ADC_ConfigChannel+0x6c8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fd36 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 8337 	bne.w	8006356 <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d824      	bhi.n	8005d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	3b02      	subs	r3, #2
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d81b      	bhi.n	8005d32 <HAL_ADC_ConfigChannel+0x86>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_ADC_ConfigChannel+0x54>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d19 	.word	0x08005d19
 8005d08:	08005d21 	.word	0x08005d21
 8005d0c:	08005d29 	.word	0x08005d29
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	220c      	movs	r2, #12
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e011      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2212      	movs	r2, #18
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e00d      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2218      	movs	r2, #24
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e009      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e004      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2206      	movs	r2, #6
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e000      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005d3a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f7ff fbc5 	bl	80054d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fcfa 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8005d58:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fd1a 	bl	800579a <LL_ADC_INJ_IsConversionOngoing>
 8005d66:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 8163 	bne.w	800603a <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 815e 	bne.w	800603a <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d86:	d10f      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	4619      	mov	r1, r3
 8005d94:	f7ff fbc9 	bl	800552a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fb73 	bl	800548c <LL_ADC_SetSamplingTimeCommonConfig>
 8005da6:	e00e      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f7ff fbb8 	bl	800552a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fb63 	bl	800548c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d00a      	beq.n	8005dfe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6919      	ldr	r1, [r3, #16]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	f7ff fafa 	bl	80053f0 <LL_ADC_SetOffset>
 8005dfc:	e11d      	b.n	800603a <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fb15 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <HAL_ADC_ConfigChannel+0x17e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fb0a 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005e20:	4603      	mov	r3, r0
 8005e22:	0e9b      	lsrs	r3, r3, #26
 8005e24:	f003 021f 	and.w	r2, r3, #31
 8005e28:	e012      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x1a4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff faff 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e48:	fab3 f383 	clz	r3, r3
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x1bc>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	0e9b      	lsrs	r3, r3, #26
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	e00a      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x1d2>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	fa93 f3a3 	rbit	r3, r3
 8005e74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e78:	fab3 f383 	clz	r3, r3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d106      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fae6 	bl	800545c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff facc 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x210>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fac1 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	0e9b      	lsrs	r3, r3, #26
 8005eb6:	f003 021f 	and.w	r2, r3, #31
 8005eba:	e010      	b.n	8005ede <HAL_ADC_ConfigChannel+0x232>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fab6 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ece:	fa93 f3a3 	rbit	r3, r3
 8005ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	fab3 f383 	clz	r3, r3
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x24a>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	0e9b      	lsrs	r3, r3, #26
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	e00a      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x260>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	fa93 f3a3 	rbit	r3, r3
 8005f02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f06:	fab3 f383 	clz	r3, r3
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d106      	bne.n	8005f1e <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2101      	movs	r1, #1
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fa9f 	bl	800545c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fa85 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x29e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fa7a 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005f40:	4603      	mov	r3, r0
 8005f42:	0e9b      	lsrs	r3, r3, #26
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	e010      	b.n	8005f6c <HAL_ADC_ConfigChannel+0x2c0>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2102      	movs	r1, #2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fa6f 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f5c:	fa93 f3a3 	rbit	r3, r3
 8005f60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8005f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f64:	fab3 f383 	clz	r3, r3
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x2d8>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0e9b      	lsrs	r3, r3, #26
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	e00a      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x2ee>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8c:	fa93 f3a3 	rbit	r3, r3
 8005f90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d106      	bne.n	8005fac <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fa58 	bl	800545c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2103      	movs	r1, #3
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fa3e 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x32c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fa33 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	0e9b      	lsrs	r3, r3, #26
 8005fd2:	f003 021f 	and.w	r2, r3, #31
 8005fd6:	e010      	b.n	8005ffa <HAL_ADC_ConfigChannel+0x34e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2103      	movs	r1, #3
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fa28 	bl	8005434 <LL_ADC_GetOffsetChannel>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fea:	fa93 f3a3 	rbit	r3, r3
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	fab3 f383 	clz	r3, r3
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	2b00      	cmp	r3, #0
 8006004:	d105      	bne.n	8006012 <HAL_ADC_ConfigChannel+0x366>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	0e9b      	lsrs	r3, r3, #26
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	e00a      	b.n	8006028 <HAL_ADC_ConfigChannel+0x37c>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601a:	fa93 f3a3 	rbit	r3, r3
 800601e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	429a      	cmp	r2, r3
 800602a:	d106      	bne.n	800603a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2200      	movs	r2, #0
 8006032:	2103      	movs	r1, #3
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fa11 	bl	800545c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fb36 	bl	80056b0 <LL_ADC_IsEnabled>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 810c 	bne.w	8006264 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	461a      	mov	r2, r3
 800605a:	f7ff fa8f 	bl	800557c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4aa8      	ldr	r2, [pc, #672]	; (8006304 <HAL_ADC_ConfigChannel+0x658>)
 8006064:	4293      	cmp	r3, r2
 8006066:	f040 80fd 	bne.w	8006264 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <HAL_ADC_ConfigChannel+0x3e6>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	0e9b      	lsrs	r3, r3, #26
 8006080:	3301      	adds	r3, #1
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b09      	cmp	r3, #9
 8006088:	bf94      	ite	ls
 800608a:	2301      	movls	r3, #1
 800608c:	2300      	movhi	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	e012      	b.n	80060b8 <HAL_ADC_ConfigChannel+0x40c>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	fab3 f383 	clz	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	bf94      	ite	ls
 80060b2:	2301      	movls	r3, #1
 80060b4:	2300      	movhi	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d064      	beq.n	8006186 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_ADC_ConfigChannel+0x42c>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	0e9b      	lsrs	r3, r3, #26
 80060ce:	3301      	adds	r3, #1
 80060d0:	069b      	lsls	r3, r3, #26
 80060d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060d6:	e00e      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x44a>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	fa93 f3a3 	rbit	r3, r3
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	fab3 f383 	clz	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	069b      	lsls	r3, r3, #26
 80060f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x46a>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	0e9b      	lsrs	r3, r3, #26
 8006108:	3301      	adds	r3, #1
 800610a:	f003 031f 	and.w	r3, r3, #31
 800610e:	2101      	movs	r1, #1
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	e010      	b.n	8006138 <HAL_ADC_ConfigChannel+0x48c>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	fa93 f3a3 	rbit	r3, r3
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	fab3 f383 	clz	r3, r3
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3301      	adds	r3, #1
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	2101      	movs	r1, #1
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	ea42 0103 	orr.w	r1, r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <HAL_ADC_ConfigChannel+0x4b2>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0e9b      	lsrs	r3, r3, #26
 800614e:	3301      	adds	r3, #1
 8006150:	f003 021f 	and.w	r2, r3, #31
 8006154:	4613      	mov	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	e011      	b.n	8006182 <HAL_ADC_ConfigChannel+0x4d6>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	fa93 f3a3 	rbit	r3, r3
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	3301      	adds	r3, #1
 8006176:	f003 021f 	and.w	r2, r3, #31
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006182:	430b      	orrs	r3, r1
 8006184:	e069      	b.n	800625a <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <HAL_ADC_ConfigChannel+0x4f6>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	0e9b      	lsrs	r3, r3, #26
 8006198:	3301      	adds	r3, #1
 800619a:	069b      	lsls	r3, r3, #26
 800619c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061a0:	e00e      	b.n	80061c0 <HAL_ADC_ConfigChannel+0x514>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	61fb      	str	r3, [r7, #28]
  return result;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3301      	adds	r3, #1
 80061ba:	069b      	lsls	r3, r3, #26
 80061bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x534>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	0e9b      	lsrs	r3, r3, #26
 80061d2:	3301      	adds	r3, #1
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	e010      	b.n	8006202 <HAL_ADC_ConfigChannel+0x556>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	617b      	str	r3, [r7, #20]
  return result;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	fab3 f383 	clz	r3, r3
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	ea42 0103 	orr.w	r1, r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <HAL_ADC_ConfigChannel+0x582>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	0e9b      	lsrs	r3, r3, #26
 8006218:	3301      	adds	r3, #1
 800621a:	f003 021f 	and.w	r2, r3, #31
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	3b1e      	subs	r3, #30
 8006226:	051b      	lsls	r3, r3, #20
 8006228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800622c:	e014      	b.n	8006258 <HAL_ADC_ConfigChannel+0x5ac>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	60fb      	str	r3, [r7, #12]
  return result;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	3301      	adds	r3, #1
 8006246:	f003 021f 	and.w	r2, r3, #31
 800624a:	4613      	mov	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	3b1e      	subs	r3, #30
 8006252:	051b      	lsls	r3, r3, #20
 8006254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006258:	430b      	orrs	r3, r1
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	6892      	ldr	r2, [r2, #8]
 800625e:	4619      	mov	r1, r3
 8006260:	f7ff f963 	bl	800552a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <HAL_ADC_ConfigChannel+0x65c>)
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d07b      	beq.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006270:	4826      	ldr	r0, [pc, #152]	; (800630c <HAL_ADC_ConfigChannel+0x660>)
 8006272:	f7ff f8af 	bl	80053d4 <LL_ADC_GetCommonPathInternalCh>
 8006276:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <HAL_ADC_ConfigChannel+0x664>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d126      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x626>
 8006284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d120      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_ADC_ConfigChannel+0x668>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d166      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800629a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800629e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062a2:	4619      	mov	r1, r3
 80062a4:	4819      	ldr	r0, [pc, #100]	; (800630c <HAL_ADC_ConfigChannel+0x660>)
 80062a6:	f7ff f882 	bl	80053ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_ADC_ConfigChannel+0x66c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	099b      	lsrs	r3, r3, #6
 80062b0:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_ADC_ConfigChannel+0x670>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	099a      	lsrs	r2, r3, #6
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80062c2:	e002      	b.n	80062ca <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f9      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062d0:	e04a      	b.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a12      	ldr	r2, [pc, #72]	; (8006320 <HAL_ADC_ConfigChannel+0x674>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d123      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x678>
 80062dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d11d      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <HAL_ADC_ConfigChannel+0x668>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d13a      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062fa:	4619      	mov	r1, r3
 80062fc:	4803      	ldr	r0, [pc, #12]	; (800630c <HAL_ADC_ConfigChannel+0x660>)
 80062fe:	f7ff f856 	bl	80053ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006302:	e031      	b.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
 8006304:	407f0000 	.word	0x407f0000
 8006308:	80080000 	.word	0x80080000
 800630c:	50040300 	.word	0x50040300
 8006310:	c7520000 	.word	0xc7520000
 8006314:	50040000 	.word	0x50040000
 8006318:	20000008 	.word	0x20000008
 800631c:	053e2d63 	.word	0x053e2d63
 8006320:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a14      	ldr	r2, [pc, #80]	; (800637c <HAL_ADC_ConfigChannel+0x6d0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d11c      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800632e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <HAL_ADC_ConfigChannel+0x6d4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d111      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800634c:	4619      	mov	r1, r3
 800634e:	480d      	ldr	r0, [pc, #52]	; (8006384 <HAL_ADC_ConfigChannel+0x6d8>)
 8006350:	f7ff f82d 	bl	80053ae <LL_ADC_SetCommonPathInternalCh>
 8006354:	e008      	b.n	8006368 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006370:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006374:	4618      	mov	r0, r3
 8006376:	3798      	adds	r7, #152	; 0x98
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	80000001 	.word	0x80000001
 8006380:	50040000 	.word	0x50040000
 8006384:	50040300 	.word	0x50040300

08006388 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f9d4 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 80063a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff f9f5 	bl	800579a <LL_ADC_INJ_IsConversionOngoing>
 80063b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8090 	beq.w	80064e0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d02a      	beq.n	8006424 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7e5b      	ldrb	r3, [r3, #25]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d126      	bne.n	8006424 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7e1b      	ldrb	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d122      	bne.n	8006424 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80063de:	2301      	movs	r3, #1
 80063e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80063e2:	e014      	b.n	800640e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4a41      	ldr	r2, [pc, #260]	; (80064ec <ADC_ConversionStop+0x164>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d90d      	bls.n	8006408 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f043 0201 	orr.w	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e06c      	b.n	80064e2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d1e3      	bne.n	80063e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2240      	movs	r2, #64	; 0x40
 8006422:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d014      	beq.n	8006454 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f98c 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00c      	beq.n	8006454 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff f949 	bl	80056d6 <LL_ADC_IsDisableOngoing>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff f968 	bl	8005724 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d014      	beq.n	8006484 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f99b 	bl	800579a <LL_ADC_INJ_IsConversionOngoing>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f931 	bl	80056d6 <LL_ADC_IsDisableOngoing>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff f977 	bl	8005772 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d004      	beq.n	8006494 <ADC_ConversionStop+0x10c>
 800648a:	2b03      	cmp	r3, #3
 800648c:	d105      	bne.n	800649a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800648e:	230c      	movs	r3, #12
 8006490:	617b      	str	r3, [r7, #20]
        break;
 8006492:	e005      	b.n	80064a0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006494:	2308      	movs	r3, #8
 8006496:	617b      	str	r3, [r7, #20]
        break;
 8006498:	e002      	b.n	80064a0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800649a:	2304      	movs	r3, #4
 800649c:	617b      	str	r3, [r7, #20]
        break;
 800649e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80064a0:	f7fe ff44 	bl	800532c <HAL_GetTick>
 80064a4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80064a6:	e014      	b.n	80064d2 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80064a8:	f7fe ff40 	bl	800532c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d90d      	bls.n	80064d2 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	f043 0210 	orr.w	r2, r3, #16
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f043 0201 	orr.w	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	a33fffff 	.word	0xa33fffff

080064f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff f8d7 	bl	80056b0 <LL_ADC_IsEnabled>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d146      	bne.n	8006596 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <ADC_Enable+0xb0>)
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	f043 0210 	orr.w	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e032      	b.n	8006598 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff f892 	bl	8005660 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800653c:	f7fe fef6 	bl	800532c <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006542:	e021      	b.n	8006588 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff f8b1 	bl	80056b0 <LL_ADC_IsEnabled>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f881 	bl	8005660 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800655e:	f7fe fee5 	bl	800532c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d90d      	bls.n	8006588 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657c:	f043 0201 	orr.w	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e007      	b.n	8006598 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d1d6      	bne.n	8006544 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	8000003f 	.word	0x8000003f

080065a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff f890 	bl	80056d6 <LL_ADC_IsDisableOngoing>
 80065b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff f877 	bl	80056b0 <LL_ADC_IsEnabled>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d040      	beq.n	800664a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13d      	bne.n	800664a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 030d 	and.w	r3, r3, #13
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10c      	bne.n	80065f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff f851 	bl	8005688 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2203      	movs	r2, #3
 80065ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80065ee:	f7fe fe9d 	bl	800532c <HAL_GetTick>
 80065f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80065f4:	e022      	b.n	800663c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fa:	f043 0210 	orr.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	f043 0201 	orr.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e01c      	b.n	800664c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006612:	f7fe fe8b 	bl	800532c <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d90d      	bls.n	800663c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	f043 0210 	orr.w	r2, r3, #16
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	f043 0201 	orr.w	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e007      	b.n	800664c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e3      	bne.n	8006612 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <__NVIC_SetPriorityGrouping+0x44>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006670:	4013      	ands	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800667c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <__NVIC_SetPriorityGrouping+0x44>)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	60d3      	str	r3, [r2, #12]
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	e000ed00 	.word	0xe000ed00

0800669c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <__NVIC_GetPriorityGrouping+0x18>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	0a1b      	lsrs	r3, r3, #8
 80066a6:	f003 0307 	and.w	r3, r3, #7
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	e000ed00 	.word	0xe000ed00

080066b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db0b      	blt.n	80066e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	f003 021f 	and.w	r2, r3, #31
 80066d0:	4907      	ldr	r1, [pc, #28]	; (80066f0 <__NVIC_EnableIRQ+0x38>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2001      	movs	r0, #1
 80066da:	fa00 f202 	lsl.w	r2, r0, r2
 80066de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e100 	.word	0xe000e100

080066f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	6039      	str	r1, [r7, #0]
 80066fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006704:	2b00      	cmp	r3, #0
 8006706:	db0a      	blt.n	800671e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	490c      	ldr	r1, [pc, #48]	; (8006740 <__NVIC_SetPriority+0x4c>)
 800670e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006712:	0112      	lsls	r2, r2, #4
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	440b      	add	r3, r1
 8006718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800671c:	e00a      	b.n	8006734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	4908      	ldr	r1, [pc, #32]	; (8006744 <__NVIC_SetPriority+0x50>)
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	3b04      	subs	r3, #4
 800672c:	0112      	lsls	r2, r2, #4
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	440b      	add	r3, r1
 8006732:	761a      	strb	r2, [r3, #24]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	e000e100 	.word	0xe000e100
 8006744:	e000ed00 	.word	0xe000ed00

08006748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006748:	b480      	push	{r7}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f1c3 0307 	rsb	r3, r3, #7
 8006762:	2b04      	cmp	r3, #4
 8006764:	bf28      	it	cs
 8006766:	2304      	movcs	r3, #4
 8006768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3304      	adds	r3, #4
 800676e:	2b06      	cmp	r3, #6
 8006770:	d902      	bls.n	8006778 <NVIC_EncodePriority+0x30>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3b03      	subs	r3, #3
 8006776:	e000      	b.n	800677a <NVIC_EncodePriority+0x32>
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800677c:	f04f 32ff 	mov.w	r2, #4294967295
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43da      	mvns	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	401a      	ands	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006790:	f04f 31ff 	mov.w	r1, #4294967295
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	43d9      	mvns	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067a0:	4313      	orrs	r3, r2
         );
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3724      	adds	r7, #36	; 0x24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c0:	d301      	bcc.n	80067c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067c2:	2301      	movs	r3, #1
 80067c4:	e00f      	b.n	80067e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067c6:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <SysTick_Config+0x40>)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ce:	210f      	movs	r1, #15
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	f7ff ff8e 	bl	80066f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <SysTick_Config+0x40>)
 80067da:	2200      	movs	r2, #0
 80067dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <SysTick_Config+0x40>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000e010 	.word	0xe000e010

080067f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff ff29 	bl	8006654 <__NVIC_SetPriorityGrouping>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	4603      	mov	r3, r0
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800681c:	f7ff ff3e 	bl	800669c <__NVIC_GetPriorityGrouping>
 8006820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	f7ff ff8e 	bl	8006748 <NVIC_EncodePriority>
 800682c:	4602      	mov	r2, r0
 800682e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006832:	4611      	mov	r1, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff5d 	bl	80066f4 <__NVIC_SetPriority>
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	4603      	mov	r3, r0
 800684a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800684c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ff31 	bl	80066b8 <__NVIC_EnableIRQ>
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff ffa2 	bl	80067b0 <SysTick_Config>
 800686c:	4603      	mov	r3, r0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d005      	beq.n	800689a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2204      	movs	r2, #4
 8006892:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e029      	b.n	80068ee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 020e 	bic.w	r2, r2, #14
 80068a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	f003 021c 	and.w	r2, r3, #28
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2101      	movs	r1, #1
 80068c8:	fa01 f202 	lsl.w	r2, r1, r2
 80068cc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
    }
  }
  return status;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006906:	e154      	b.n	8006bb2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2101      	movs	r1, #1
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	fa01 f303 	lsl.w	r3, r1, r3
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8146 	beq.w	8006bac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d00b      	beq.n	8006940 <HAL_GPIO_Init+0x48>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d007      	beq.n	8006940 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006934:	2b11      	cmp	r3, #17
 8006936:	d003      	beq.n	8006940 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b12      	cmp	r3, #18
 800693e:	d130      	bne.n	80069a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	2203      	movs	r2, #3
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	43db      	mvns	r3, r3
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4013      	ands	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006976:	2201      	movs	r2, #1
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43db      	mvns	r3, r3
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4013      	ands	r3, r2
 8006984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	f003 0201 	and.w	r2, r3, #1
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2203      	movs	r2, #3
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d003      	beq.n	80069e2 <HAL_GPIO_Init+0xea>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b12      	cmp	r3, #18
 80069e0:	d123      	bne.n	8006a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	08da      	lsrs	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3208      	adds	r2, #8
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	220f      	movs	r2, #15
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43db      	mvns	r3, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4013      	ands	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	08da      	lsrs	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3208      	adds	r2, #8
 8006a24:	6939      	ldr	r1, [r7, #16]
 8006a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	2203      	movs	r2, #3
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 0203 	and.w	r2, r3, #3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a0 	beq.w	8006bac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a6c:	4b58      	ldr	r3, [pc, #352]	; (8006bd0 <HAL_GPIO_Init+0x2d8>)
 8006a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a70:	4a57      	ldr	r2, [pc, #348]	; (8006bd0 <HAL_GPIO_Init+0x2d8>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6613      	str	r3, [r2, #96]	; 0x60
 8006a78:	4b55      	ldr	r3, [pc, #340]	; (8006bd0 <HAL_GPIO_Init+0x2d8>)
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006a84:	4a53      	ldr	r2, [pc, #332]	; (8006bd4 <HAL_GPIO_Init+0x2dc>)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	089b      	lsrs	r3, r3, #2
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006aae:	d019      	beq.n	8006ae4 <HAL_GPIO_Init+0x1ec>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a49      	ldr	r2, [pc, #292]	; (8006bd8 <HAL_GPIO_Init+0x2e0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d013      	beq.n	8006ae0 <HAL_GPIO_Init+0x1e8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a48      	ldr	r2, [pc, #288]	; (8006bdc <HAL_GPIO_Init+0x2e4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00d      	beq.n	8006adc <HAL_GPIO_Init+0x1e4>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a47      	ldr	r2, [pc, #284]	; (8006be0 <HAL_GPIO_Init+0x2e8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d007      	beq.n	8006ad8 <HAL_GPIO_Init+0x1e0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a46      	ldr	r2, [pc, #280]	; (8006be4 <HAL_GPIO_Init+0x2ec>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_GPIO_Init+0x1dc>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	e008      	b.n	8006ae6 <HAL_GPIO_Init+0x1ee>
 8006ad4:	2307      	movs	r3, #7
 8006ad6:	e006      	b.n	8006ae6 <HAL_GPIO_Init+0x1ee>
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e004      	b.n	8006ae6 <HAL_GPIO_Init+0x1ee>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e002      	b.n	8006ae6 <HAL_GPIO_Init+0x1ee>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <HAL_GPIO_Init+0x1ee>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	f002 0203 	and.w	r2, r2, #3
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	4093      	lsls	r3, r2
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006af6:	4937      	ldr	r1, [pc, #220]	; (8006bd4 <HAL_GPIO_Init+0x2dc>)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	089b      	lsrs	r3, r3, #2
 8006afc:	3302      	adds	r3, #2
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b04:	4b38      	ldr	r3, [pc, #224]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4013      	ands	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b28:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	43db      	mvns	r3, r3
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b52:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b58:	4b23      	ldr	r3, [pc, #140]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4013      	ands	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b7c:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b82:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f aea3 	bne.w	8006908 <HAL_GPIO_Init+0x10>
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	48000400 	.word	0x48000400
 8006bdc:	48000800 	.word	0x48000800
 8006be0:	48000c00 	.word	0x48000c00
 8006be4:	48001000 	.word	0x48001000
 8006be8:	40010400 	.word	0x40010400

08006bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
 8006c08:	e001      	b.n	8006c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c2c:	787b      	ldrb	r3, [r7, #1]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c38:	e002      	b.n	8006c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c3a:	887a      	ldrh	r2, [r7, #2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e081      	b.n	8006d62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fd fdf2 	bl	800485c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2224      	movs	r2, #36	; 0x24
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	e006      	b.n	8006cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d104      	bne.n	8006ce6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	ea42 0103 	orr.w	r1, r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69d9      	ldr	r1, [r3, #28]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	f040 80f9 	bne.w	8006f86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <HAL_I2C_Mem_Write+0x34>
 8006d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d105      	bne.n	8006dac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0ed      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_I2C_Mem_Write+0x4e>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e0e6      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fe fab3 	bl	800532c <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2319      	movs	r3, #25
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f963 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0d1      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2221      	movs	r2, #33	; 0x21
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2240      	movs	r2, #64	; 0x40
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a3a      	ldr	r2, [r7, #32]
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e0c:	88f8      	ldrh	r0, [r7, #6]
 8006e0e:	893a      	ldrh	r2, [r7, #8]
 8006e10:	8979      	ldrh	r1, [r7, #10]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f8c7 	bl	8006fb0 <I2C_RequestMemoryWrite>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0a9      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2bff      	cmp	r3, #255	; 0xff
 8006e3c:	d90e      	bls.n	8006e5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	22ff      	movs	r2, #255	; 0xff
 8006e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	8979      	ldrh	r1, [r7, #10]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fa45 	bl	80072e4 <I2C_TransferConfig>
 8006e5a:	e00f      	b.n	8006e7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	8979      	ldrh	r1, [r7, #10]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fa34 	bl	80072e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f94d 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e07b      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d034      	beq.n	8006f34 <HAL_I2C_Mem_Write+0x1c8>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d130      	bne.n	8006f34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	; 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f8df 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e04d      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2bff      	cmp	r3, #255	; 0xff
 8006ef4:	d90e      	bls.n	8006f14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	8979      	ldrh	r1, [r7, #10]
 8006f04:	2300      	movs	r3, #0
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f9e9 	bl	80072e4 <I2C_TransferConfig>
 8006f12:	e00f      	b.n	8006f34 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	8979      	ldrh	r1, [r7, #10]
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f9d8 	bl	80072e4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d19e      	bne.n	8006e7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f92c 	bl	80071a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e01a      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2220      	movs	r2, #32
 8006f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_I2C_Mem_Write+0x224>)
 8006f66:	400b      	ands	r3, r1
 8006f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e000      	b.n	8006f88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	fe00e800 	.word	0xfe00e800

08006f94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa2:	b2db      	uxtb	r3, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	817b      	strh	r3, [r7, #10]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	813b      	strh	r3, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	8979      	ldrh	r1, [r7, #10]
 8006fd0:	4b20      	ldr	r3, [pc, #128]	; (8007054 <I2C_RequestMemoryWrite+0xa4>)
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f983 	bl	80072e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f89c 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e02c      	b.n	800704c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d105      	bne.n	8007004 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff8:	893b      	ldrh	r3, [r7, #8]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	629a      	str	r2, [r3, #40]	; 0x28
 8007002:	e015      	b.n	8007030 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	b29b      	uxth	r3, r3
 800700a:	b2da      	uxtb	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	69b9      	ldr	r1, [r7, #24]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f882 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e012      	b.n	800704c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2200      	movs	r2, #0
 8007038:	2180      	movs	r1, #128	; 0x80
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f830 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	80002000 	.word	0x80002000

08007058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d103      	bne.n	8007076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	d007      	beq.n	8007094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	619a      	str	r2, [r3, #24]
  }
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b0:	e022      	b.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d01e      	beq.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fe f937 	bl	800532c <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d113      	bne.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e00f      	b.n	8007118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4013      	ands	r3, r2
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	429a      	cmp	r2, r3
 8007106:	bf0c      	ite	eq
 8007108:	2301      	moveq	r3, #1
 800710a:	2300      	movne	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	429a      	cmp	r2, r3
 8007114:	d0cd      	beq.n	80070b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800712c:	e02c      	b.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f870 	bl	8007218 <I2C_IsAcknowledgeFailed>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e02a      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d01e      	beq.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714a:	f7fe f8ef 	bl	800532c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	f043 0220 	orr.w	r2, r3, #32
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e007      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d1cb      	bne.n	800712e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	e028      	b.n	8007200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f830 	bl	8007218 <I2C_IsAcknowledgeFailed>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e026      	b.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fe f8b3 	bl	800532c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d113      	bne.n	8007200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e007      	b.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b20      	cmp	r3, #32
 800720c:	d1cf      	bne.n	80071ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d151      	bne.n	80072d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007232:	e022      	b.n	800727a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d01e      	beq.n	800727a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723c:	f7fe f876 	bl	800532c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <I2C_IsAcknowledgeFailed+0x3a>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d113      	bne.n	800727a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	f043 0220 	orr.w	r2, r3, #32
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e02e      	b.n	80072d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b20      	cmp	r3, #32
 8007286:	d1d5      	bne.n	8007234 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2210      	movs	r2, #16
 800728e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2220      	movs	r2, #32
 8007296:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fedd 	bl	8007058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80072aa:	400b      	ands	r3, r1
 80072ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	f043 0204 	orr.w	r2, r3, #4
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	fe00e800 	.word	0xfe00e800

080072e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	817b      	strh	r3, [r7, #10]
 80072f2:	4613      	mov	r3, r2
 80072f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	0d5b      	lsrs	r3, r3, #21
 8007300:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <I2C_TransferConfig+0x58>)
 8007306:	430b      	orrs	r3, r1
 8007308:	43db      	mvns	r3, r3
 800730a:	ea02 0103 	and.w	r1, r2, r3
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007314:	7a7b      	ldrb	r3, [r7, #9]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	431a      	orrs	r2, r3
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	431a      	orrs	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	03ff63ff 	.word	0x03ff63ff

08007340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b20      	cmp	r3, #32
 8007354:	d138      	bne.n	80073c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007360:	2302      	movs	r3, #2
 8007362:	e032      	b.n	80073ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6819      	ldr	r1, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e000      	b.n	80073ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
  }
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d139      	bne.n	8007460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e033      	b.n	8007462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2224      	movs	r2, #36	; 0x24
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e038      	b.n	80074f2 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007488:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f245 5255 	movw	r2, #21845	; 0x5555
 8007492:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6852      	ldr	r2, [r2, #4]
 800749c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6892      	ldr	r2, [r2, #8]
 80074a6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80074a8:	f7fd ff40 	bl	800532c <HAL_GetTick>
 80074ac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80074ae:	e008      	b.n	80074c2 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80074b0:	f7fd ff3c 	bl	800532c <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b30      	cmp	r3, #48	; 0x30
 80074bc:	d901      	bls.n	80074c2 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e017      	b.n	80074f2 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f1      	bne.n	80074b0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d005      	beq.n	80074e6 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	68d2      	ldr	r2, [r2, #12]
 80074e2:	611a      	str	r2, [r3, #16]
 80074e4:	e004      	b.n	80074f0 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80074ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800750a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800752a:	6013      	str	r3, [r2, #0]
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40007000 	.word	0x40007000

0800753c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007540:	4b04      	ldr	r3, [pc, #16]	; (8007554 <HAL_PWREx_GetVoltageRange+0x18>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40007000 	.word	0x40007000

08007558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007566:	d130      	bne.n	80075ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d038      	beq.n	80075e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007576:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800757e:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007584:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007586:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2232      	movs	r2, #50	; 0x32
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	0c9b      	lsrs	r3, r3, #18
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800759c:	e002      	b.n	80075a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075a4:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d102      	bne.n	80075b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f2      	bne.n	800759e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c4:	d110      	bne.n	80075e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e00f      	b.n	80075ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d6:	d007      	beq.n	80075e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075e0:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40007000 	.word	0x40007000
 80075fc:	20000008 	.word	0x20000008
 8007600:	431bde83 	.word	0x431bde83

08007604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f000 bc11 	b.w	8007e3a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007618:	4ba0      	ldr	r3, [pc, #640]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 030c 	and.w	r3, r3, #12
 8007620:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007622:	4b9e      	ldr	r3, [pc, #632]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80e4 	beq.w	8007802 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <HAL_RCC_OscConfig+0x4c>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b0c      	cmp	r3, #12
 8007644:	f040 808b 	bne.w	800775e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b01      	cmp	r3, #1
 800764c:	f040 8087 	bne.w	800775e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007650:	4b92      	ldr	r3, [pc, #584]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <HAL_RCC_OscConfig+0x64>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e3e8      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1a      	ldr	r2, [r3, #32]
 800766c:	4b8b      	ldr	r3, [pc, #556]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_RCC_OscConfig+0x7e>
 8007678:	4b88      	ldr	r3, [pc, #544]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007680:	e005      	b.n	800768e <HAL_RCC_OscConfig+0x8a>
 8007682:	4b86      	ldr	r3, [pc, #536]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007688:	091b      	lsrs	r3, r3, #4
 800768a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800768e:	4293      	cmp	r3, r2
 8007690:	d223      	bcs.n	80076da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fd78 	bl	800818c <RCC_SetFlashLatencyFromMSIRange>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e3c9      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076a6:	4b7d      	ldr	r3, [pc, #500]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a7c      	ldr	r2, [pc, #496]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	4b7a      	ldr	r3, [pc, #488]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	4977      	ldr	r1, [pc, #476]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076c4:	4b75      	ldr	r3, [pc, #468]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	4972      	ldr	r1, [pc, #456]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	e025      	b.n	8007726 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076da:	4b70      	ldr	r3, [pc, #448]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6f      	ldr	r2, [pc, #444]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076e0:	f043 0308 	orr.w	r3, r3, #8
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	4b6d      	ldr	r3, [pc, #436]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	496a      	ldr	r1, [pc, #424]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076f8:	4b68      	ldr	r3, [pc, #416]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	4965      	ldr	r1, [pc, #404]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007708:	4313      	orrs	r3, r2
 800770a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fd38 	bl	800818c <RCC_SetFlashLatencyFromMSIRange>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e389      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007726:	f000 fc6f 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 800772a:	4601      	mov	r1, r0
 800772c:	4b5b      	ldr	r3, [pc, #364]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	4a5a      	ldr	r2, [pc, #360]	; (80078a0 <HAL_RCC_OscConfig+0x29c>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	fa21 f303 	lsr.w	r3, r1, r3
 8007742:	4a58      	ldr	r2, [pc, #352]	; (80078a4 <HAL_RCC_OscConfig+0x2a0>)
 8007744:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007746:	4b58      	ldr	r3, [pc, #352]	; (80078a8 <HAL_RCC_OscConfig+0x2a4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd fda2 	bl	8005294 <HAL_InitTick>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d052      	beq.n	8007800 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	e36d      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d032      	beq.n	80077cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007766:	4b4d      	ldr	r3, [pc, #308]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4c      	ldr	r2, [pc, #304]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007772:	f7fd fddb 	bl	800532c <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800777a:	f7fd fdd7 	bl	800532c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e356      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800778c:	4b43      	ldr	r3, [pc, #268]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007798:	4b40      	ldr	r3, [pc, #256]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a3f      	ldr	r2, [pc, #252]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800779e:	f043 0308 	orr.w	r3, r3, #8
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	4b3d      	ldr	r3, [pc, #244]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	493a      	ldr	r1, [pc, #232]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077b6:	4b39      	ldr	r3, [pc, #228]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	4935      	ldr	r1, [pc, #212]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	604b      	str	r3, [r1, #4]
 80077ca:	e01a      	b.n	8007802 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077cc:	4b33      	ldr	r3, [pc, #204]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a32      	ldr	r2, [pc, #200]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077d2:	f023 0301 	bic.w	r3, r3, #1
 80077d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077d8:	f7fd fda8 	bl	800532c <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077e0:	f7fd fda4 	bl	800532c <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e323      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80077f2:	4b2a      	ldr	r3, [pc, #168]	; (800789c <HAL_RCC_OscConfig+0x298>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0x1dc>
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d073      	beq.n	80078f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d005      	beq.n	8007820 <HAL_RCC_OscConfig+0x21c>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d10e      	bne.n	8007838 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d10b      	bne.n	8007838 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007820:	4b1e      	ldr	r3, [pc, #120]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d063      	beq.n	80078f4 <HAL_RCC_OscConfig+0x2f0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d15f      	bne.n	80078f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e300      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007840:	d106      	bne.n	8007850 <HAL_RCC_OscConfig+0x24c>
 8007842:	4b16      	ldr	r3, [pc, #88]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a15      	ldr	r2, [pc, #84]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	e01d      	b.n	800788c <HAL_RCC_OscConfig+0x288>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007858:	d10c      	bne.n	8007874 <HAL_RCC_OscConfig+0x270>
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a0f      	ldr	r2, [pc, #60]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a0c      	ldr	r2, [pc, #48]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800786c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e00b      	b.n	800788c <HAL_RCC_OscConfig+0x288>
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <HAL_RCC_OscConfig+0x298>)
 800787a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a05      	ldr	r2, [pc, #20]	; (800789c <HAL_RCC_OscConfig+0x298>)
 8007886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800788a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01b      	beq.n	80078cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fd fd4a 	bl	800532c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800789a:	e010      	b.n	80078be <HAL_RCC_OscConfig+0x2ba>
 800789c:	40021000 	.word	0x40021000
 80078a0:	080120a0 	.word	0x080120a0
 80078a4:	20000008 	.word	0x20000008
 80078a8:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ac:	f7fd fd3e 	bl	800532c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	; 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e2bd      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078be:	4baf      	ldr	r3, [pc, #700]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x2a8>
 80078ca:	e014      	b.n	80078f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fd fd2e 	bl	800532c <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d4:	f7fd fd2a 	bl	800532c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	; 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e2a9      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078e6:	4ba5      	ldr	r3, [pc, #660]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCC_OscConfig+0x2d0>
 80078f2:	e000      	b.n	80078f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d060      	beq.n	80079c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b04      	cmp	r3, #4
 8007906:	d005      	beq.n	8007914 <HAL_RCC_OscConfig+0x310>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b0c      	cmp	r3, #12
 800790c:	d119      	bne.n	8007942 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d116      	bne.n	8007942 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007914:	4b99      	ldr	r3, [pc, #612]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <HAL_RCC_OscConfig+0x328>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e286      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792c:	4b93      	ldr	r3, [pc, #588]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	061b      	lsls	r3, r3, #24
 800793a:	4990      	ldr	r1, [pc, #576]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 800793c:	4313      	orrs	r3, r2
 800793e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007940:	e040      	b.n	80079c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d023      	beq.n	8007992 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800794a:	4b8c      	ldr	r3, [pc, #560]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a8b      	ldr	r2, [pc, #556]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007956:	f7fd fce9 	bl	800532c <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800795e:	f7fd fce5 	bl	800532c <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e264      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007970:	4b82      	ldr	r3, [pc, #520]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0f0      	beq.n	800795e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797c:	4b7f      	ldr	r3, [pc, #508]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	061b      	lsls	r3, r3, #24
 800798a:	497c      	ldr	r1, [pc, #496]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 800798c:	4313      	orrs	r3, r2
 800798e:	604b      	str	r3, [r1, #4]
 8007990:	e018      	b.n	80079c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007992:	4b7a      	ldr	r3, [pc, #488]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a79      	ldr	r2, [pc, #484]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800799c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fd fcc5 	bl	800532c <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a6:	f7fd fcc1 	bl	800532c <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e240      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079b8:	4b70      	ldr	r3, [pc, #448]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f0      	bne.n	80079a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d03c      	beq.n	8007a4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01c      	beq.n	8007a12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079d8:	4b68      	ldr	r3, [pc, #416]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 80079da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079de:	4a67      	ldr	r2, [pc, #412]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e8:	f7fd fca0 	bl	800532c <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079f0:	f7fd fc9c 	bl	800532c <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e21b      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a02:	4b5e      	ldr	r3, [pc, #376]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0ef      	beq.n	80079f0 <HAL_RCC_OscConfig+0x3ec>
 8007a10:	e01b      	b.n	8007a4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a12:	4b5a      	ldr	r3, [pc, #360]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a18:	4a58      	ldr	r2, [pc, #352]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a22:	f7fd fc83 	bl	800532c <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a28:	e008      	b.n	8007a3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a2a:	f7fd fc7f 	bl	800532c <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e1fe      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a3c:	4b4f      	ldr	r3, [pc, #316]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ef      	bne.n	8007a2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80a6 	beq.w	8007ba4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007a5c:	4b47      	ldr	r3, [pc, #284]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10d      	bne.n	8007a84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a68:	4b44      	ldr	r3, [pc, #272]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6c:	4a43      	ldr	r2, [pc, #268]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a72:	6593      	str	r3, [r2, #88]	; 0x58
 8007a74:	4b41      	ldr	r3, [pc, #260]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a80:	2301      	movs	r3, #1
 8007a82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a84:	4b3e      	ldr	r3, [pc, #248]	; (8007b80 <HAL_RCC_OscConfig+0x57c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d118      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a90:	4b3b      	ldr	r3, [pc, #236]	; (8007b80 <HAL_RCC_OscConfig+0x57c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a3a      	ldr	r2, [pc, #232]	; (8007b80 <HAL_RCC_OscConfig+0x57c>)
 8007a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a9c:	f7fd fc46 	bl	800532c <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa4:	f7fd fc42 	bl	800532c <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e1c1      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ab6:	4b32      	ldr	r3, [pc, #200]	; (8007b80 <HAL_RCC_OscConfig+0x57c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d108      	bne.n	8007adc <HAL_RCC_OscConfig+0x4d8>
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ada:	e024      	b.n	8007b26 <HAL_RCC_OscConfig+0x522>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b05      	cmp	r3, #5
 8007ae2:	d110      	bne.n	8007b06 <HAL_RCC_OscConfig+0x502>
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aea:	4a24      	ldr	r2, [pc, #144]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007aec:	f043 0304 	orr.w	r3, r3, #4
 8007af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007af4:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b04:	e00f      	b.n	8007b26 <HAL_RCC_OscConfig+0x522>
 8007b06:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b16:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007b1e:	f023 0304 	bic.w	r3, r3, #4
 8007b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b2e:	f7fd fbfd 	bl	800532c <HAL_GetTick>
 8007b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b34:	e00a      	b.n	8007b4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b36:	f7fd fbf9 	bl	800532c <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e176      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <HAL_RCC_OscConfig+0x578>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ed      	beq.n	8007b36 <HAL_RCC_OscConfig+0x532>
 8007b5a:	e01a      	b.n	8007b92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5c:	f7fd fbe6 	bl	800532c <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b62:	e00f      	b.n	8007b84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b64:	f7fd fbe2 	bl	800532c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d906      	bls.n	8007b84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e15f      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
 8007b7a:	bf00      	nop
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b84:	4baa      	ldr	r3, [pc, #680]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e8      	bne.n	8007b64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b92:	7ffb      	ldrb	r3, [r7, #31]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d105      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b98:	4ba5      	ldr	r3, [pc, #660]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9c:	4aa4      	ldr	r2, [pc, #656]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d03c      	beq.n	8007c2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01c      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bb8:	4b9d      	ldr	r3, [pc, #628]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bbe:	4a9c      	ldr	r2, [pc, #624]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007bc0:	f043 0301 	orr.w	r3, r3, #1
 8007bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc8:	f7fd fbb0 	bl	800532c <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bd0:	f7fd fbac 	bl	800532c <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e12b      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007be2:	4b93      	ldr	r3, [pc, #588]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0ef      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x5cc>
 8007bf0:	e01b      	b.n	8007c2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bf2:	4b8f      	ldr	r3, [pc, #572]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bf8:	4a8d      	ldr	r2, [pc, #564]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c02:	f7fd fb93 	bl	800532c <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c0a:	f7fd fb8f 	bl	800532c <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e10e      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c1c:	4b84      	ldr	r3, [pc, #528]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1ef      	bne.n	8007c0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8102 	beq.w	8007e38 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	f040 80c5 	bne.w	8007dc8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007c3e:	4b7c      	ldr	r3, [pc, #496]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f003 0203 	and.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d12c      	bne.n	8007cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d123      	bne.n	8007cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d11b      	bne.n	8007cac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d113      	bne.n	8007cac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	3b01      	subs	r3, #1
 8007c92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d109      	bne.n	8007cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d067      	beq.n	8007d7c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d062      	beq.n	8007d78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007cb2:	4b5f      	ldr	r3, [pc, #380]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0bb      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007cc2:	4b5b      	ldr	r3, [pc, #364]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a5a      	ldr	r2, [pc, #360]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ccc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007cce:	f7fd fb2d 	bl	800532c <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd6:	f7fd fb29 	bl	800532c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e0a8      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ce8:	4b51      	ldr	r3, [pc, #324]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cf4:	4b4e      	ldr	r3, [pc, #312]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <HAL_RCC_OscConfig+0x830>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d04:	3a01      	subs	r2, #1
 8007d06:	0112      	lsls	r2, r2, #4
 8007d08:	4311      	orrs	r1, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d0e:	0212      	lsls	r2, r2, #8
 8007d10:	4311      	orrs	r1, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d16:	0852      	lsrs	r2, r2, #1
 8007d18:	3a01      	subs	r2, #1
 8007d1a:	0552      	lsls	r2, r2, #21
 8007d1c:	4311      	orrs	r1, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d22:	0852      	lsrs	r2, r2, #1
 8007d24:	3a01      	subs	r2, #1
 8007d26:	0652      	lsls	r2, r2, #25
 8007d28:	4311      	orrs	r1, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d2e:	06d2      	lsls	r2, r2, #27
 8007d30:	430a      	orrs	r2, r1
 8007d32:	493f      	ldr	r1, [pc, #252]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007d38:	4b3d      	ldr	r3, [pc, #244]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a3c      	ldr	r2, [pc, #240]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d44:	4b3a      	ldr	r3, [pc, #232]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4a39      	ldr	r2, [pc, #228]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d50:	f7fd faec 	bl	800532c <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d58:	f7fd fae8 	bl	800532c <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e067      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d6a:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d76:	e05f      	b.n	8007e38 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e05e      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d7c:	4b2c      	ldr	r3, [pc, #176]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d157      	bne.n	8007e38 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d88:	4b29      	ldr	r3, [pc, #164]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d94:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4a25      	ldr	r2, [pc, #148]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007da0:	f7fd fac4 	bl	800532c <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da8:	f7fd fac0 	bl	800532c <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e03f      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dba:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0f0      	beq.n	8007da8 <HAL_RCC_OscConfig+0x7a4>
 8007dc6:	e037      	b.n	8007e38 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b0c      	cmp	r3, #12
 8007dcc:	d02d      	beq.n	8007e2a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dce:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dd8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007dda:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d105      	bne.n	8007df2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007de6:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	4a11      	ldr	r2, [pc, #68]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	4a0e      	ldr	r2, [pc, #56]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007df8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e02:	f7fd fa93 	bl	800532c <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e0a:	f7fd fa8f 	bl	800532c <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e00e      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <HAL_RCC_OscConfig+0x82c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f0      	bne.n	8007e0a <HAL_RCC_OscConfig+0x806>
 8007e28:	e006      	b.n	8007e38 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e005      	b.n	8007e3a <HAL_RCC_OscConfig+0x836>
 8007e2e:	bf00      	nop
 8007e30:	40021000 	.word	0x40021000
 8007e34:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop

08007e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0c8      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e58:	4b66      	ldr	r3, [pc, #408]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d910      	bls.n	8007e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e66:	4b63      	ldr	r3, [pc, #396]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f023 0207 	bic.w	r2, r3, #7
 8007e6e:	4961      	ldr	r1, [pc, #388]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e76:	4b5f      	ldr	r3, [pc, #380]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0b0      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d04c      	beq.n	8007f2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d107      	bne.n	8007eac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9c:	4b56      	ldr	r3, [pc, #344]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d121      	bne.n	8007eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e09e      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d107      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eb4:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d115      	bne.n	8007eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e092      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ecc:	4b4a      	ldr	r3, [pc, #296]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e086      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007edc:	4b46      	ldr	r3, [pc, #280]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e07e      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eec:	4b42      	ldr	r3, [pc, #264]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f023 0203 	bic.w	r2, r3, #3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	493f      	ldr	r1, [pc, #252]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efe:	f7fd fa15 	bl	800532c <HAL_GetTick>
 8007f02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f04:	e00a      	b.n	8007f1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f06:	f7fd fa11 	bl	800532c <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e066      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1c:	4b36      	ldr	r3, [pc, #216]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 020c 	and.w	r2, r3, #12
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d1eb      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	492c      	ldr	r1, [pc, #176]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f4c:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d210      	bcs.n	8007f7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5a:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 0207 	bic.w	r2, r3, #7
 8007f62:	4924      	ldr	r1, [pc, #144]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f6a:	4b22      	ldr	r3, [pc, #136]	; (8007ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d001      	beq.n	8007f7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e036      	b.n	8007fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d008      	beq.n	8007f9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4918      	ldr	r1, [pc, #96]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4910      	ldr	r1, [pc, #64]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fba:	f000 f825 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	091b      	lsrs	r3, r3, #4
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007fcc:	5cd3      	ldrb	r3, [r2, r3]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007fda:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd f958 	bl	8005294 <HAL_InitTick>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	72fb      	strb	r3, [r7, #11]

  return status;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40022000 	.word	0x40022000
 8007ff8:	40021000 	.word	0x40021000
 8007ffc:	080120a0 	.word	0x080120a0
 8008000:	20000008 	.word	0x20000008
 8008004:	2000000c 	.word	0x2000000c

08008008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008016:	4b3d      	ldr	r3, [pc, #244]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 030c 	and.w	r3, r3, #12
 800801e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008020:	4b3a      	ldr	r3, [pc, #232]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_GetSysClockFreq+0x34>
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b0c      	cmp	r3, #12
 8008034:	d121      	bne.n	800807a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d11e      	bne.n	800807a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800803c:	4b33      	ldr	r3, [pc, #204]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d107      	bne.n	8008058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008048:	4b30      	ldr	r3, [pc, #192]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 800804a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	e005      	b.n	8008064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008058:	4b2c      	ldr	r3, [pc, #176]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	091b      	lsrs	r3, r3, #4
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008064:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <HAL_RCC_GetSysClockFreq+0x108>)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10d      	bne.n	8008090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008078:	e00a      	b.n	8008090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d102      	bne.n	8008086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008080:	4b24      	ldr	r3, [pc, #144]	; (8008114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e004      	b.n	8008090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b08      	cmp	r3, #8
 800808a:	d101      	bne.n	8008090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800808c:	4b22      	ldr	r3, [pc, #136]	; (8008118 <HAL_RCC_GetSysClockFreq+0x110>)
 800808e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b0c      	cmp	r3, #12
 8008094:	d133      	bne.n	80080fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d002      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0xa4>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d003      	beq.n	80080b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80080aa:	e005      	b.n	80080b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80080ac:	4b19      	ldr	r3, [pc, #100]	; (8008114 <HAL_RCC_GetSysClockFreq+0x10c>)
 80080ae:	617b      	str	r3, [r7, #20]
      break;
 80080b0:	e005      	b.n	80080be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_RCC_GetSysClockFreq+0x110>)
 80080b4:	617b      	str	r3, [r7, #20]
      break;
 80080b6:	e002      	b.n	80080be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	617b      	str	r3, [r7, #20]
      break;
 80080bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	3301      	adds	r3, #1
 80080ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	0a1b      	lsrs	r3, r3, #8
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	fb02 f203 	mul.w	r2, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080e4:	4b09      	ldr	r3, [pc, #36]	; (800810c <HAL_RCC_GetSysClockFreq+0x104>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	0e5b      	lsrs	r3, r3, #25
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	3301      	adds	r3, #1
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80080fe:	69bb      	ldr	r3, [r7, #24]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3724      	adds	r7, #36	; 0x24
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40021000 	.word	0x40021000
 8008110:	080120b8 	.word	0x080120b8
 8008114:	00f42400 	.word	0x00f42400
 8008118:	007a1200 	.word	0x007a1200

0800811c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <HAL_RCC_GetHCLKFreq+0x14>)
 8008122:	681b      	ldr	r3, [r3, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000008 	.word	0x20000008

08008134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008138:	f7ff fff0 	bl	800811c <HAL_RCC_GetHCLKFreq>
 800813c:	4601      	mov	r1, r0
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4a04      	ldr	r2, [pc, #16]	; (800815c <HAL_RCC_GetPCLK1Freq+0x28>)
 800814a:	5cd3      	ldrb	r3, [r2, r3]
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40021000 	.word	0x40021000
 800815c:	080120b0 	.word	0x080120b0

08008160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008164:	f7ff ffda 	bl	800811c <HAL_RCC_GetHCLKFreq>
 8008168:	4601      	mov	r1, r0
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	0adb      	lsrs	r3, r3, #11
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	4a04      	ldr	r2, [pc, #16]	; (8008188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008176:	5cd3      	ldrb	r3, [r2, r3]
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008180:	4618      	mov	r0, r3
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40021000 	.word	0x40021000
 8008188:	080120b0 	.word	0x080120b0

0800818c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008198:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800819a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80081a4:	f7ff f9ca 	bl	800753c <HAL_PWREx_GetVoltageRange>
 80081a8:	6178      	str	r0, [r7, #20]
 80081aa:	e014      	b.n	80081d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80081ac:	4b25      	ldr	r3, [pc, #148]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	4a24      	ldr	r2, [pc, #144]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b6:	6593      	str	r3, [r2, #88]	; 0x58
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80081c4:	f7ff f9ba 	bl	800753c <HAL_PWREx_GetVoltageRange>
 80081c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80081ca:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081dc:	d10b      	bne.n	80081f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d919      	bls.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2ba0      	cmp	r3, #160	; 0xa0
 80081e8:	d902      	bls.n	80081f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80081ea:	2302      	movs	r3, #2
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	e013      	b.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80081f0:	2301      	movs	r3, #1
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	e010      	b.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b80      	cmp	r3, #128	; 0x80
 80081fa:	d902      	bls.n	8008202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80081fc:	2303      	movs	r3, #3
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e00a      	b.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d102      	bne.n	800820e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008208:	2302      	movs	r3, #2
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	e004      	b.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b70      	cmp	r3, #112	; 0x70
 8008212:	d101      	bne.n	8008218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008214:	2301      	movs	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008218:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f023 0207 	bic.w	r2, r3, #7
 8008220:	4909      	ldr	r1, [pc, #36]	; (8008248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d001      	beq.n	800823a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40021000 	.word	0x40021000
 8008248:	40022000 	.word	0x40022000

0800824c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008254:	2300      	movs	r3, #0
 8008256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008258:	2300      	movs	r3, #0
 800825a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	2b00      	cmp	r3, #0
 8008266:	d02f      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008270:	d005      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008276:	d015      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800827c:	e00f      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800827e:	4b5d      	ldr	r3, [pc, #372]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4a5c      	ldr	r2, [pc, #368]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008288:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800828a:	e00c      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	2100      	movs	r1, #0
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fa54 	bl	8008740 <RCCEx_PLLSAI1_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	74fb      	strb	r3, [r7, #19]
      break;
 80082a2:	e000      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80082a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a6:	7cfb      	ldrb	r3, [r7, #19]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10b      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082ac:	4b51      	ldr	r3, [pc, #324]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ba:	494e      	ldr	r1, [pc, #312]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80082c2:	e001      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	7cfb      	ldrb	r3, [r7, #19]
 80082c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 809e 	beq.w	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082d6:	2300      	movs	r3, #0
 80082d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082da:	4b46      	ldr	r3, [pc, #280]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80082ea:	2300      	movs	r3, #0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082f0:	4b40      	ldr	r3, [pc, #256]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f4:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fa:	6593      	str	r3, [r2, #88]	; 0x58
 80082fc:	4b3d      	ldr	r3, [pc, #244]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80082fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008308:	2301      	movs	r3, #1
 800830a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800830c:	4b3a      	ldr	r3, [pc, #232]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a39      	ldr	r2, [pc, #228]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008318:	f7fd f808 	bl	800532c <HAL_GetTick>
 800831c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800831e:	e009      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008320:	f7fd f804 	bl	800532c <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d902      	bls.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	74fb      	strb	r3, [r7, #19]
        break;
 8008332:	e005      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008334:	4b30      	ldr	r3, [pc, #192]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0ef      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d15a      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008346:	4b2b      	ldr	r3, [pc, #172]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008350:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01e      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	429a      	cmp	r2, r3
 8008360:	d019      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800836e:	4b21      	ldr	r3, [pc, #132]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008374:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800837a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800837e:	4b1d      	ldr	r3, [pc, #116]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008384:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800838a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800838e:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d016      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a0:	f7fc ffc4 	bl	800532c <HAL_GetTick>
 80083a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083a6:	e00b      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a8:	f7fc ffc0 	bl	800532c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d902      	bls.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	74fb      	strb	r3, [r7, #19]
            break;
 80083be:	e006      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0ec      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80083ce:	7cfb      	ldrb	r3, [r7, #19]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e2:	4904      	ldr	r1, [pc, #16]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083ea:	e009      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083ec:	7cfb      	ldrb	r3, [r7, #19]
 80083ee:	74bb      	strb	r3, [r7, #18]
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80083f2:	bf00      	nop
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7cfb      	ldrb	r3, [r7, #19]
 80083fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008400:	7c7b      	ldrb	r3, [r7, #17]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008406:	4b9e      	ldr	r3, [pc, #632]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	4a9d      	ldr	r2, [pc, #628]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800840c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800841e:	4b98      	ldr	r3, [pc, #608]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f023 0203 	bic.w	r2, r3, #3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	4994      	ldr	r1, [pc, #592]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008440:	4b8f      	ldr	r3, [pc, #572]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	f023 020c 	bic.w	r2, r3, #12
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	498c      	ldr	r1, [pc, #560]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008462:	4b87      	ldr	r3, [pc, #540]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	4983      	ldr	r1, [pc, #524]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008484:	4b7e      	ldr	r3, [pc, #504]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	497b      	ldr	r1, [pc, #492]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084a6:	4b76      	ldr	r3, [pc, #472]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	4972      	ldr	r1, [pc, #456]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084c8:	4b6d      	ldr	r3, [pc, #436]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d6:	496a      	ldr	r1, [pc, #424]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084ea:	4b65      	ldr	r3, [pc, #404]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f8:	4961      	ldr	r1, [pc, #388]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800850c:	4b5c      	ldr	r3, [pc, #368]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	4959      	ldr	r1, [pc, #356]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800852e:	4b54      	ldr	r3, [pc, #336]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	4950      	ldr	r1, [pc, #320]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008550:	4b4b      	ldr	r3, [pc, #300]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	4948      	ldr	r1, [pc, #288]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008572:	4b43      	ldr	r3, [pc, #268]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008578:	f023 0203 	bic.w	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	493f      	ldr	r1, [pc, #252]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008582:	4313      	orrs	r3, r2
 8008584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d028      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008594:	4b3a      	ldr	r3, [pc, #232]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	4937      	ldr	r1, [pc, #220]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b4:	4b32      	ldr	r3, [pc, #200]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4a31      	ldr	r2, [pc, #196]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	60d3      	str	r3, [r2, #12]
 80085c0:	e011      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085ca:	d10c      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f8b4 	bl	8008740 <RCCEx_PLLSAI1_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80085e2:	7cfb      	ldrb	r3, [r7, #19]
 80085e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d028      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085f2:	4b23      	ldr	r3, [pc, #140]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008600:	491f      	ldr	r1, [pc, #124]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008610:	d106      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008612:	4b1b      	ldr	r3, [pc, #108]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	4a1a      	ldr	r2, [pc, #104]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800861c:	60d3      	str	r3, [r2, #12]
 800861e:	e011      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008628:	d10c      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	2101      	movs	r1, #1
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f885 	bl	8008740 <RCCEx_PLLSAI1_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800863a:	7cfb      	ldrb	r3, [r7, #19]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d02b      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008660:	4313      	orrs	r3, r2
 8008662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800866e:	d109      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008670:	4b03      	ldr	r3, [pc, #12]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4a02      	ldr	r2, [pc, #8]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800867a:	60d3      	str	r3, [r2, #12]
 800867c:	e014      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800867e:	bf00      	nop
 8008680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800868c:	d10c      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f853 	bl	8008740 <RCCEx_PLLSAI1_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800869e:	7cfb      	ldrb	r3, [r7, #19]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01c      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086b4:	4b19      	ldr	r3, [pc, #100]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c2:	4916      	ldr	r1, [pc, #88]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d2:	d10c      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	2102      	movs	r1, #2
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f830 	bl	8008740 <RCCEx_PLLSAI1_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086e4:	7cfb      	ldrb	r3, [r7, #19]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80086ea:	7cfb      	ldrb	r3, [r7, #19]
 80086ec:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80086fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008708:	4904      	ldr	r1, [pc, #16]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800870a:	4313      	orrs	r3, r2
 800870c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008710:	7cbb      	ldrb	r3, [r7, #18]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40021000 	.word	0x40021000

08008720 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a04      	ldr	r2, [pc, #16]	; (800873c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800872a:	f043 0304 	orr.w	r3, r3, #4
 800872e:	6013      	str	r3, [r2, #0]
}
 8008730:	bf00      	nop
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40021000 	.word	0x40021000

08008740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800874e:	4b73      	ldr	r3, [pc, #460]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800875a:	4b70      	ldr	r3, [pc, #448]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f003 0203 	and.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d10d      	bne.n	8008786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
       ||
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008772:	4b6a      	ldr	r3, [pc, #424]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
       ||
 8008782:	429a      	cmp	r2, r3
 8008784:	d044      	beq.n	8008810 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	73fb      	strb	r3, [r7, #15]
 800878a:	e041      	b.n	8008810 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d00c      	beq.n	80087ae <RCCEx_PLLSAI1_Config+0x6e>
 8008794:	2b03      	cmp	r3, #3
 8008796:	d013      	beq.n	80087c0 <RCCEx_PLLSAI1_Config+0x80>
 8008798:	2b01      	cmp	r3, #1
 800879a:	d120      	bne.n	80087de <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800879c:	4b5f      	ldr	r3, [pc, #380]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11d      	bne.n	80087e4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ac:	e01a      	b.n	80087e4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087ae:	4b5b      	ldr	r3, [pc, #364]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d116      	bne.n	80087e8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087be:	e013      	b.n	80087e8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087c0:	4b56      	ldr	r3, [pc, #344]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10f      	bne.n	80087ec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087cc:	4b53      	ldr	r3, [pc, #332]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087dc:	e006      	b.n	80087ec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	73fb      	strb	r3, [r7, #15]
      break;
 80087e2:	e004      	b.n	80087ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087e4:	bf00      	nop
 80087e6:	e002      	b.n	80087ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087e8:	bf00      	nop
 80087ea:	e000      	b.n	80087ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10d      	bne.n	8008810 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087f4:	4b49      	ldr	r3, [pc, #292]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	3b01      	subs	r3, #1
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	430b      	orrs	r3, r1
 800880a:	4944      	ldr	r1, [pc, #272]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d17c      	bne.n	8008910 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008816:	4b41      	ldr	r3, [pc, #260]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a40      	ldr	r2, [pc, #256]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800881c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008822:	f7fc fd83 	bl	800532c <HAL_GetTick>
 8008826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008828:	e009      	b.n	800883e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800882a:	f7fc fd7f 	bl	800532c <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d902      	bls.n	800883e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
        break;
 800883c:	e005      	b.n	800884a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800883e:	4b37      	ldr	r3, [pc, #220]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1ef      	bne.n	800882a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d15f      	bne.n	8008910 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d110      	bne.n	8008878 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008856:	4b31      	ldr	r3, [pc, #196]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800885e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6892      	ldr	r2, [r2, #8]
 8008866:	0211      	lsls	r1, r2, #8
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68d2      	ldr	r2, [r2, #12]
 800886c:	06d2      	lsls	r2, r2, #27
 800886e:	430a      	orrs	r2, r1
 8008870:	492a      	ldr	r1, [pc, #168]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008872:	4313      	orrs	r3, r2
 8008874:	610b      	str	r3, [r1, #16]
 8008876:	e027      	b.n	80088c8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d112      	bne.n	80088a4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800887e:	4b27      	ldr	r3, [pc, #156]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008886:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6892      	ldr	r2, [r2, #8]
 800888e:	0211      	lsls	r1, r2, #8
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6912      	ldr	r2, [r2, #16]
 8008894:	0852      	lsrs	r2, r2, #1
 8008896:	3a01      	subs	r2, #1
 8008898:	0552      	lsls	r2, r2, #21
 800889a:	430a      	orrs	r2, r1
 800889c:	491f      	ldr	r1, [pc, #124]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	610b      	str	r3, [r1, #16]
 80088a2:	e011      	b.n	80088c8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088a4:	4b1d      	ldr	r3, [pc, #116]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6892      	ldr	r2, [r2, #8]
 80088b4:	0211      	lsls	r1, r2, #8
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6952      	ldr	r2, [r2, #20]
 80088ba:	0852      	lsrs	r2, r2, #1
 80088bc:	3a01      	subs	r2, #1
 80088be:	0652      	lsls	r2, r2, #25
 80088c0:	430a      	orrs	r2, r1
 80088c2:	4916      	ldr	r1, [pc, #88]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088c8:	4b14      	ldr	r3, [pc, #80]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a13      	ldr	r2, [pc, #76]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7fc fd2a 	bl	800532c <HAL_GetTick>
 80088d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088da:	e009      	b.n	80088f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088dc:	f7fc fd26 	bl	800532c <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d902      	bls.n	80088f0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	73fb      	strb	r3, [r7, #15]
          break;
 80088ee:	e005      	b.n	80088fc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088f0:	4b0a      	ldr	r3, [pc, #40]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0ef      	beq.n	80088dc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4904      	ldr	r1, [pc, #16]	; (800891c <RCCEx_PLLSAI1_Config+0x1dc>)
 800890c:	4313      	orrs	r3, r2
 800890e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40021000 	.word	0x40021000

08008920 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d06c      	beq.n	8008a0c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fc f8e2 	bl	8004b10 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	22ca      	movs	r2, #202	; 0xca
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2253      	movs	r2, #83	; 0x53
 8008962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f87c 	bl	8008a62 <RTC_EnterInitMode>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d14b      	bne.n	8008a0c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008986:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6899      	ldr	r1, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	431a      	orrs	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68d2      	ldr	r2, [r2, #12]
 80089ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6919      	ldr	r1, [r3, #16]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	041a      	lsls	r2, r3, #16
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f87f 	bl	8008ac8 <RTC_ExitInitMode>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11b      	bne.n	8008a0c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0203 	bic.w	r2, r2, #3
 80089e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	22ff      	movs	r2, #255	; 0xff
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a2c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008a2e:	f7fc fc7d 	bl	800532c <HAL_GetTick>
 8008a32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a34:	e009      	b.n	8008a4a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a36:	f7fc fc79 	bl	800532c <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a44:	d901      	bls.n	8008a4a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e007      	b.n	8008a5a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0ee      	beq.n	8008a36 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d120      	bne.n	8008abe <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008a86:	f7fc fc51 	bl	800532c <HAL_GetTick>
 8008a8a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a8c:	e00d      	b.n	8008aaa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008a8e:	f7fc fc4d 	bl	800532c <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a9c:	d905      	bls.n	8008aaa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <RTC_EnterInitMode+0x5c>
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d1e7      	bne.n	8008a8e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008ad4:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ade:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10c      	bne.n	8008b06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff92 	bl	8008a16 <HAL_RTC_WaitForSynchro>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01e      	beq.n	8008b36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2203      	movs	r2, #3
 8008afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	73fb      	strb	r3, [r7, #15]
 8008b04:	e017      	b.n	8008b36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	4a0d      	ldr	r2, [pc, #52]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008b0c:	f023 0320 	bic.w	r3, r3, #32
 8008b10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff ff7f 	bl	8008a16 <HAL_RTC_WaitForSynchro>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2203      	movs	r2, #3
 8008b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	4a04      	ldr	r2, [pc, #16]	; (8008b40 <RTC_ExitInitMode+0x78>)
 8008b30:	f043 0320 	orr.w	r3, r3, #32
 8008b34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40002800 	.word	0x40002800

08008b44 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3350      	adds	r3, #80	; 0x50
 8008b56:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	009a      	lsls	r2, r3, #2
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	4413      	add	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6013      	str	r3, [r2, #0]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3350      	adds	r3, #80	; 0x50
 8008b86:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e01d      	b.n	8008bf0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fc f959 	bl	8004e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f000 f8c3 	bl	8008d6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_TIM_ConfigClockSource+0x18>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e0a8      	b.n	8008d62 <HAL_TIM_ConfigClockSource+0x16a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	d067      	beq.n	8008d1c <HAL_TIM_ConfigClockSource+0x124>
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d80b      	bhi.n	8008c68 <HAL_TIM_ConfigClockSource+0x70>
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d073      	beq.n	8008d3c <HAL_TIM_ConfigClockSource+0x144>
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d802      	bhi.n	8008c5e <HAL_TIM_ConfigClockSource+0x66>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d06f      	beq.n	8008d3c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c5c:	e078      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d06c      	beq.n	8008d3c <HAL_TIM_ConfigClockSource+0x144>
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d06a      	beq.n	8008d3c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008c66:	e073      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c68:	2b70      	cmp	r3, #112	; 0x70
 8008c6a:	d00d      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x90>
 8008c6c:	2b70      	cmp	r3, #112	; 0x70
 8008c6e:	d804      	bhi.n	8008c7a <HAL_TIM_ConfigClockSource+0x82>
 8008c70:	2b50      	cmp	r3, #80	; 0x50
 8008c72:	d033      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0xe4>
 8008c74:	2b60      	cmp	r3, #96	; 0x60
 8008c76:	d041      	beq.n	8008cfc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008c78:	e06a      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7e:	d066      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x156>
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c84:	d017      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008c86:	e063      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6899      	ldr	r1, [r3, #8]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f000 f950 	bl	8008f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008caa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	609a      	str	r2, [r3, #8]
      break;
 8008cb4:	e04c      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f000 f939 	bl	8008f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cd8:	609a      	str	r2, [r3, #8]
      break;
 8008cda:	e039      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6859      	ldr	r1, [r3, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f000 f8ad 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2150      	movs	r1, #80	; 0x50
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f906 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008cfa:	e029      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f000 f8cc 	bl	8008ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2160      	movs	r1, #96	; 0x60
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f8f6 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008d1a:	e019      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	6859      	ldr	r1, [r3, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f000 f88d 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f8e6 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008d3a:	e009      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f000 f8dd 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008d4c:	e000      	b.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <TIM_Base_SetConfig+0xcc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d007      	beq.n	8008d94 <TIM_Base_SetConfig+0x28>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8a:	d003      	beq.n	8008d94 <TIM_Base_SetConfig+0x28>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a2b      	ldr	r2, [pc, #172]	; (8008e3c <TIM_Base_SetConfig+0xd0>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d108      	bne.n	8008da6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a23      	ldr	r2, [pc, #140]	; (8008e38 <TIM_Base_SetConfig+0xcc>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00f      	beq.n	8008dce <TIM_Base_SetConfig+0x62>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d00b      	beq.n	8008dce <TIM_Base_SetConfig+0x62>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a20      	ldr	r2, [pc, #128]	; (8008e3c <TIM_Base_SetConfig+0xd0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d007      	beq.n	8008dce <TIM_Base_SetConfig+0x62>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <TIM_Base_SetConfig+0xd4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d003      	beq.n	8008dce <TIM_Base_SetConfig+0x62>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a1e      	ldr	r2, [pc, #120]	; (8008e44 <TIM_Base_SetConfig+0xd8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d108      	bne.n	8008de0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a0c      	ldr	r2, [pc, #48]	; (8008e38 <TIM_Base_SetConfig+0xcc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_Base_SetConfig+0xb0>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0c      	ldr	r2, [pc, #48]	; (8008e40 <TIM_Base_SetConfig+0xd4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0xb0>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a0b      	ldr	r2, [pc, #44]	; (8008e44 <TIM_Base_SetConfig+0xd8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d103      	bne.n	8008e24 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	615a      	str	r2, [r3, #20]
}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40012c00 	.word	0x40012c00
 8008e3c:	40000400 	.word	0x40000400
 8008e40:	40014000 	.word	0x40014000
 8008e44:	40014400 	.word	0x40014400

08008e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0201 	bic.w	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f023 030a 	bic.w	r3, r3, #10
 8008e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b087      	sub	sp, #28
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0210 	bic.w	r2, r3, #16
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	031b      	lsls	r3, r3, #12
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f043 0307 	orr.w	r3, r3, #7
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	609a      	str	r2, [r3, #8]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	021a      	lsls	r2, r3, #8
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	609a      	str	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e054      	b.n	800903e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a24      	ldr	r2, [pc, #144]	; (800904c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d108      	bne.n	8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a17      	ldr	r2, [pc, #92]	; (800904c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00e      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d009      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a13      	ldr	r2, [pc, #76]	; (8009050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d004      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a11      	ldr	r2, [pc, #68]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d10c      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4313      	orrs	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40012c00 	.word	0x40012c00
 8009050:	40000400 	.word	0x40000400
 8009054:	40014000 	.word	0x40014000

08009058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e040      	b.n	80090ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fb ffb8 	bl	8004ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2224      	movs	r2, #36	; 0x24
 8009084:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0201 	bic.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fb56 	bl	8009748 <UART_SetConfig>
 800909c:	4603      	mov	r3, r0
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e022      	b.n	80090ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fe8a 	bl	8009dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 ff11 	bl	8009f0c <UART_CheckIdleState>
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08a      	sub	sp, #40	; 0x28
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	4613      	mov	r3, r2
 8009102:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009108:	2b20      	cmp	r3, #32
 800910a:	f040 8081 	bne.w	8009210 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <HAL_UART_Transmit+0x26>
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e079      	b.n	8009212 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_UART_Transmit+0x38>
 8009128:	2302      	movs	r3, #2
 800912a:	e072      	b.n	8009212 <HAL_UART_Transmit+0x11e>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2221      	movs	r2, #33	; 0x21
 800913e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009140:	f7fc f8f4 	bl	800532c <HAL_GetTick>
 8009144:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	88fa      	ldrh	r2, [r7, #6]
 800914a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915e:	d108      	bne.n	8009172 <HAL_UART_Transmit+0x7e>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009168:	2300      	movs	r3, #0
 800916a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	e003      	b.n	800917a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009182:	e02d      	b.n	80091e0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2200      	movs	r2, #0
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 ff01 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e039      	b.n	8009212 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10b      	bne.n	80091bc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	881a      	ldrh	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091b0:	b292      	uxth	r2, r2
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	3302      	adds	r3, #2
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	e008      	b.n	80091ce <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	781a      	ldrb	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	b292      	uxth	r2, r2
 80091c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3301      	adds	r3, #1
 80091cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1cb      	bne.n	8009184 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2200      	movs	r2, #0
 80091f4:	2140      	movs	r1, #64	; 0x40
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fecd 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e005      	b.n	8009212 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2220      	movs	r2, #32
 800920a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	e000      	b.n	8009212 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009210:	2302      	movs	r3, #2
  }
}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8009224:	2301      	movs	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8009236:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00f      	beq.n	8009270 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d104      	bne.n	8009268 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009262:	4a48      	ldr	r2, [pc, #288]	; (8009384 <HAL_UART_Abort_IT+0x168>)
 8009264:	639a      	str	r2, [r3, #56]	; 0x38
 8009266:	e003      	b.n	8009270 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926c:	2200      	movs	r2, #0
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00f      	beq.n	8009298 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d104      	bne.n	8009290 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	4a3f      	ldr	r2, [pc, #252]	; (8009388 <HAL_UART_Abort_IT+0x16c>)
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
 800928e:	e003      	b.n	8009298 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009294:	2200      	movs	r2, #0
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d11a      	bne.n	80092dc <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092b4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00e      	beq.n	80092dc <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fd fad7 	bl	8006876 <HAL_DMA_Abort_IT>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d2:	2200      	movs	r2, #0
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
 80092d6:	e001      	b.n	80092dc <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        abortcplt = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e6:	2b40      	cmp	r3, #64	; 0x40
 80092e8:	d11c      	bne.n	8009324 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d010      	beq.n	8009324 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009306:	4618      	mov	r0, r3
 8009308:	f7fd fab5 	bl	8006876 <HAL_DMA_Abort_IT>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d006      	beq.n	8009320 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009316:	2200      	movs	r2, #0
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800931a:	2301      	movs	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
 800931e:	e001      	b.n	8009324 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        abortcplt = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d127      	bne.n	800937a <HAL_UART_Abort_IT+0x15e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
    huart->TxISR = NULL;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	665a      	str	r2, [r3, #100]	; 0x64

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	220f      	movs	r2, #15
 8009352:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	8b1b      	ldrh	r3, [r3, #24]
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0208 	orr.w	r2, r2, #8
 8009364:	b292      	uxth	r2, r2
 8009366:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2220      	movs	r2, #32
 800936c:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f9d3 	bl	8009720 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	0800a0f9 	.word	0x0800a0f9
 8009388:	0800a15b 	.word	0x0800a15b

0800938c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0201 	bic.w	r2, r2, #1
 80093b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d13b      	bne.n	800943a <HAL_UART_AbortReceive_IT+0xae>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d013      	beq.n	8009402 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093de:	4a22      	ldr	r2, [pc, #136]	; (8009468 <HAL_UART_AbortReceive_IT+0xdc>)
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fd fa45 	bl	8006876 <HAL_DMA_Abort_IT>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d034      	beq.n	800945c <HAL_UART_AbortReceive_IT+0xd0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	e02c      	b.n	800945c <HAL_UART_AbortReceive_IT+0xd0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	220f      	movs	r2, #15
 8009416:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	8b1b      	ldrh	r3, [r3, #24]
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0208 	orr.w	r2, r2, #8
 8009428:	b292      	uxth	r2, r2
 800942a:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f97e 	bl	8009734 <HAL_UART_AbortReceiveCpltCallback>
 8009438:	e010      	b.n	800945c <HAL_UART_AbortReceive_IT+0xd0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	220f      	movs	r2, #15
 800944e:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2220      	movs	r2, #32
 8009454:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f96c 	bl	8009734 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	0800a1d1 	.word	0x0800a1d1

0800946c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009492:	4013      	ands	r3, r2
 8009494:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d113      	bne.n	80094c4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00e      	beq.n	80094c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d009      	beq.n	80094c4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 8114 	beq.w	80096e2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	4798      	blx	r3
      }
      return;
 80094c2:	e10e      	b.n	80096e2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80d6 	beq.w	8009678 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d105      	bne.n	80094e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80cb 	beq.w	8009678 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00e      	beq.n	800950a <HAL_UART_IRQHandler+0x9e>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2201      	movs	r2, #1
 80094fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009502:	f043 0201 	orr.w	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00e      	beq.n	8009532 <HAL_UART_IRQHandler+0xc6>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2202      	movs	r2, #2
 8009524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	f043 0204 	orr.w	r2, r3, #4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00e      	beq.n	800955a <HAL_UART_IRQHandler+0xee>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2204      	movs	r2, #4
 800954c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009552:	f043 0202 	orr.w	r2, r3, #2
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b00      	cmp	r3, #0
 8009562:	d013      	beq.n	800958c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009574:	2b00      	cmp	r3, #0
 8009576:	d009      	beq.n	800958c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2208      	movs	r2, #8
 800957e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009584:	f043 0208 	orr.w	r2, r3, #8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00f      	beq.n	80095b6 <HAL_UART_IRQHandler+0x14a>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	f043 0220 	orr.w	r2, r3, #32
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8093 	beq.w	80096e6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d007      	beq.n	80095e4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d004      	beq.n	8009602 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d031      	beq.n	8009666 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd42 	bl	800a08c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009612:	2b40      	cmp	r3, #64	; 0x40
 8009614:	d123      	bne.n	800965e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009624:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d013      	beq.n	8009656 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009632:	4a30      	ldr	r2, [pc, #192]	; (80096f4 <HAL_UART_IRQHandler+0x288>)
 8009634:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963a:	4618      	mov	r0, r3
 800963c:	f7fd f91b 	bl	8006876 <HAL_DMA_Abort_IT>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d016      	beq.n	8009674 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009654:	e00e      	b.n	8009674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f858 	bl	800970c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965c:	e00a      	b.n	8009674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f854 	bl	800970c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009664:	e006      	b.n	8009674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f850 	bl	800970c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009672:	e038      	b.n	80096e6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009674:	bf00      	nop
    return;
 8009676:	e036      	b.n	80096e6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00d      	beq.n	800969e <HAL_UART_IRQHandler+0x232>
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fdd6 	bl	800a248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800969c:	e026      	b.n	80096ec <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00d      	beq.n	80096c4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d008      	beq.n	80096c4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d017      	beq.n	80096ea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
    }
    return;
 80096c2:	e012      	b.n	80096ea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00e      	beq.n	80096ec <HAL_UART_IRQHandler+0x280>
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fd9c 	bl	800a216 <UART_EndTransmit_IT>
    return;
 80096de:	bf00      	nop
 80096e0:	e004      	b.n	80096ec <HAL_UART_IRQHandler+0x280>
      return;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <HAL_UART_IRQHandler+0x280>
    return;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_UART_IRQHandler+0x280>
    return;
 80096ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80096ec:	3720      	adds	r7, #32
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	0800a0cd 	.word	0x0800a0cd

080096f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009748:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800974c:	b08a      	sub	sp, #40	; 0x28
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009752:	2300      	movs	r3, #0
 8009754:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	4313      	orrs	r3, r2
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	4bb0      	ldr	r3, [pc, #704]	; (8009a40 <UART_SetConfig+0x2f8>)
 800977e:	4013      	ands	r3, r2
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6812      	ldr	r2, [r2, #0]
 8009784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009786:	430b      	orrs	r3, r1
 8009788:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4aa6      	ldr	r2, [pc, #664]	; (8009a44 <UART_SetConfig+0x2fc>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d004      	beq.n	80097ba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b6:	4313      	orrs	r3, r2
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a9d      	ldr	r2, [pc, #628]	; (8009a48 <UART_SetConfig+0x300>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d126      	bne.n	8009826 <UART_SetConfig+0xde>
 80097d8:	4b9c      	ldr	r3, [pc, #624]	; (8009a4c <UART_SetConfig+0x304>)
 80097da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d81a      	bhi.n	800981c <UART_SetConfig+0xd4>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <UART_SetConfig+0xa4>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	0800980d 	.word	0x0800980d
 80097f4:	08009805 	.word	0x08009805
 80097f8:	08009815 	.word	0x08009815
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009802:	e0d6      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009804:	2302      	movs	r3, #2
 8009806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800980a:	e0d2      	b.n	80099b2 <UART_SetConfig+0x26a>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009812:	e0ce      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800981a:	e0ca      	b.n	80099b2 <UART_SetConfig+0x26a>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009822:	bf00      	nop
 8009824:	e0c5      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a89      	ldr	r2, [pc, #548]	; (8009a50 <UART_SetConfig+0x308>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d138      	bne.n	80098a2 <UART_SetConfig+0x15a>
 8009830:	4b86      	ldr	r3, [pc, #536]	; (8009a4c <UART_SetConfig+0x304>)
 8009832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009836:	f003 030c 	and.w	r3, r3, #12
 800983a:	2b0c      	cmp	r3, #12
 800983c:	d82c      	bhi.n	8009898 <UART_SetConfig+0x150>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <UART_SetConfig+0xfc>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009879 	.word	0x08009879
 8009848:	08009899 	.word	0x08009899
 800984c:	08009899 	.word	0x08009899
 8009850:	08009899 	.word	0x08009899
 8009854:	08009889 	.word	0x08009889
 8009858:	08009899 	.word	0x08009899
 800985c:	08009899 	.word	0x08009899
 8009860:	08009899 	.word	0x08009899
 8009864:	08009881 	.word	0x08009881
 8009868:	08009899 	.word	0x08009899
 800986c:	08009899 	.word	0x08009899
 8009870:	08009899 	.word	0x08009899
 8009874:	08009891 	.word	0x08009891
 8009878:	2300      	movs	r3, #0
 800987a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800987e:	e098      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009880:	2302      	movs	r3, #2
 8009882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009886:	e094      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009888:	2304      	movs	r3, #4
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800988e:	e090      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009890:	2308      	movs	r3, #8
 8009892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009896:	e08c      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009898:	2310      	movs	r3, #16
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800989e:	bf00      	nop
 80098a0:	e087      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a6b      	ldr	r2, [pc, #428]	; (8009a54 <UART_SetConfig+0x30c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d125      	bne.n	80098f8 <UART_SetConfig+0x1b0>
 80098ac:	4b67      	ldr	r3, [pc, #412]	; (8009a4c <UART_SetConfig+0x304>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d011      	beq.n	80098de <UART_SetConfig+0x196>
 80098ba:	2b10      	cmp	r3, #16
 80098bc:	d802      	bhi.n	80098c4 <UART_SetConfig+0x17c>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d005      	beq.n	80098ce <UART_SetConfig+0x186>
 80098c2:	e014      	b.n	80098ee <UART_SetConfig+0x1a6>
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	d006      	beq.n	80098d6 <UART_SetConfig+0x18e>
 80098c8:	2b30      	cmp	r3, #48	; 0x30
 80098ca:	d00c      	beq.n	80098e6 <UART_SetConfig+0x19e>
 80098cc:	e00f      	b.n	80098ee <UART_SetConfig+0x1a6>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098d4:	e06d      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098d6:	2302      	movs	r3, #2
 80098d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098dc:	e069      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098de:	2304      	movs	r3, #4
 80098e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098e4:	e065      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098e6:	2308      	movs	r3, #8
 80098e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ec:	e061      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098ee:	2310      	movs	r3, #16
 80098f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098f4:	bf00      	nop
 80098f6:	e05c      	b.n	80099b2 <UART_SetConfig+0x26a>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a56      	ldr	r2, [pc, #344]	; (8009a58 <UART_SetConfig+0x310>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d125      	bne.n	800994e <UART_SetConfig+0x206>
 8009902:	4b52      	ldr	r3, [pc, #328]	; (8009a4c <UART_SetConfig+0x304>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009908:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800990c:	2b40      	cmp	r3, #64	; 0x40
 800990e:	d011      	beq.n	8009934 <UART_SetConfig+0x1ec>
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	d802      	bhi.n	800991a <UART_SetConfig+0x1d2>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <UART_SetConfig+0x1dc>
 8009918:	e014      	b.n	8009944 <UART_SetConfig+0x1fc>
 800991a:	2b80      	cmp	r3, #128	; 0x80
 800991c:	d006      	beq.n	800992c <UART_SetConfig+0x1e4>
 800991e:	2bc0      	cmp	r3, #192	; 0xc0
 8009920:	d00c      	beq.n	800993c <UART_SetConfig+0x1f4>
 8009922:	e00f      	b.n	8009944 <UART_SetConfig+0x1fc>
 8009924:	2300      	movs	r3, #0
 8009926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992a:	e042      	b.n	80099b2 <UART_SetConfig+0x26a>
 800992c:	2302      	movs	r3, #2
 800992e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009932:	e03e      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800993a:	e03a      	b.n	80099b2 <UART_SetConfig+0x26a>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009942:	e036      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800994a:	bf00      	nop
 800994c:	e031      	b.n	80099b2 <UART_SetConfig+0x26a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <UART_SetConfig+0x2fc>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d129      	bne.n	80099ac <UART_SetConfig+0x264>
 8009958:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <UART_SetConfig+0x304>)
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009966:	d014      	beq.n	8009992 <UART_SetConfig+0x24a>
 8009968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996c:	d802      	bhi.n	8009974 <UART_SetConfig+0x22c>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <UART_SetConfig+0x23a>
 8009972:	e016      	b.n	80099a2 <UART_SetConfig+0x25a>
 8009974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009978:	d007      	beq.n	800998a <UART_SetConfig+0x242>
 800997a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800997e:	d00c      	beq.n	800999a <UART_SetConfig+0x252>
 8009980:	e00f      	b.n	80099a2 <UART_SetConfig+0x25a>
 8009982:	2300      	movs	r3, #0
 8009984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009988:	e013      	b.n	80099b2 <UART_SetConfig+0x26a>
 800998a:	2302      	movs	r3, #2
 800998c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009990:	e00f      	b.n	80099b2 <UART_SetConfig+0x26a>
 8009992:	2304      	movs	r3, #4
 8009994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009998:	e00b      	b.n	80099b2 <UART_SetConfig+0x26a>
 800999a:	2308      	movs	r3, #8
 800999c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a0:	e007      	b.n	80099b2 <UART_SetConfig+0x26a>
 80099a2:	2310      	movs	r3, #16
 80099a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a8:	bf00      	nop
 80099aa:	e002      	b.n	80099b2 <UART_SetConfig+0x26a>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a23      	ldr	r2, [pc, #140]	; (8009a44 <UART_SetConfig+0x2fc>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	f040 80fb 	bne.w	8009bb4 <UART_SetConfig+0x46c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d823      	bhi.n	8009a0e <UART_SetConfig+0x2c6>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x284>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	08009a0f 	.word	0x08009a0f
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	08009a0f 	.word	0x08009a0f
 80099dc:	080099ff 	.word	0x080099ff
 80099e0:	08009a0f 	.word	0x08009a0f
 80099e4:	08009a0f 	.word	0x08009a0f
 80099e8:	08009a0f 	.word	0x08009a0f
 80099ec:	08009a07 	.word	0x08009a07
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80099f0:	f7fe fba0 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 80099f4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80099f6:	e00d      	b.n	8009a14 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80099f8:	4b18      	ldr	r3, [pc, #96]	; (8009a5c <UART_SetConfig+0x314>)
 80099fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80099fc:	e00a      	b.n	8009a14 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80099fe:	f7fe fb03 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8009a02:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a04:	e006      	b.n	8009a14 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8009a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a0c:	e002      	b.n	8009a14 <UART_SetConfig+0x2cc>
      default:
        ret = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	76fb      	strb	r3, [r7, #27]
        break;
 8009a12:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 81ca 	beq.w	8009db0 <UART_SetConfig+0x668>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d305      	bcc.n	8009a38 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d913      	bls.n	8009a60 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	76fb      	strb	r3, [r7, #27]
 8009a3c:	e1b8      	b.n	8009db0 <UART_SetConfig+0x668>
 8009a3e:	bf00      	nop
 8009a40:	efff69f3 	.word	0xefff69f3
 8009a44:	40008000 	.word	0x40008000
 8009a48:	40013800 	.word	0x40013800
 8009a4c:	40021000 	.word	0x40021000
 8009a50:	40004400 	.word	0x40004400
 8009a54:	40004800 	.word	0x40004800
 8009a58:	40004c00 	.word	0x40004c00
 8009a5c:	00f42400 	.word	0x00f42400
      }
      else
      {
        switch (clocksource)
 8009a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	f200 8092 	bhi.w	8009b8e <UART_SetConfig+0x446>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <UART_SetConfig+0x328>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009a95 	.word	0x08009a95
 8009a74:	08009b8f 	.word	0x08009b8f
 8009a78:	08009ae3 	.word	0x08009ae3
 8009a7c:	08009b8f 	.word	0x08009b8f
 8009a80:	08009b17 	.word	0x08009b17
 8009a84:	08009b8f 	.word	0x08009b8f
 8009a88:	08009b8f 	.word	0x08009b8f
 8009a8c:	08009b8f 	.word	0x08009b8f
 8009a90:	08009b65 	.word	0x08009b65
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009a94:	f7fe fb4e 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8009a98:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f04f 0200 	mov.w	r2, #0
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	f04f 0400 	mov.w	r4, #0
 8009aaa:	0214      	lsls	r4, r2, #8
 8009aac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009ab0:	020b      	lsls	r3, r1, #8
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6852      	ldr	r2, [r2, #4]
 8009ab6:	0852      	lsrs	r2, r2, #1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	eb13 0b01 	adds.w	fp, r3, r1
 8009ac2:	eb44 0c02 	adc.w	ip, r4, r2
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	4661      	mov	r1, ip
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f04f 0400 	mov.w	r4, #0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	f7f7 f8ef 	bl	8000cb8 <__aeabi_uldivmod>
 8009ada:	4603      	mov	r3, r0
 8009adc:	460c      	mov	r4, r1
 8009ade:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009ae0:	e058      	b.n	8009b94 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	085b      	lsrs	r3, r3, #1
 8009ae8:	f04f 0400 	mov.w	r4, #0
 8009aec:	49ae      	ldr	r1, [pc, #696]	; (8009da8 <UART_SetConfig+0x660>)
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	eb13 0b01 	adds.w	fp, r3, r1
 8009af6:	eb44 0c02 	adc.w	ip, r4, r2
 8009afa:	4658      	mov	r0, fp
 8009afc:	4661      	mov	r1, ip
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f04f 0400 	mov.w	r4, #0
 8009b06:	461a      	mov	r2, r3
 8009b08:	4623      	mov	r3, r4
 8009b0a:	f7f7 f8d5 	bl	8000cb8 <__aeabi_uldivmod>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009b14:	e03e      	b.n	8009b94 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009b16:	f7fe fa77 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8009b1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	f04f 0200 	mov.w	r2, #0
 8009b24:	f04f 0300 	mov.w	r3, #0
 8009b28:	f04f 0400 	mov.w	r4, #0
 8009b2c:	0214      	lsls	r4, r2, #8
 8009b2e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009b32:	020b      	lsls	r3, r1, #8
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6852      	ldr	r2, [r2, #4]
 8009b38:	0852      	lsrs	r2, r2, #1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	f04f 0200 	mov.w	r2, #0
 8009b40:	eb13 0b01 	adds.w	fp, r3, r1
 8009b44:	eb44 0c02 	adc.w	ip, r4, r2
 8009b48:	4658      	mov	r0, fp
 8009b4a:	4661      	mov	r1, ip
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f04f 0400 	mov.w	r4, #0
 8009b54:	461a      	mov	r2, r3
 8009b56:	4623      	mov	r3, r4
 8009b58:	f7f7 f8ae 	bl	8000cb8 <__aeabi_uldivmod>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009b62:	e017      	b.n	8009b94 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	085b      	lsrs	r3, r3, #1
 8009b6a:	f04f 0400 	mov.w	r4, #0
 8009b6e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8009b72:	f144 0100 	adc.w	r1, r4, #0
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f04f 0400 	mov.w	r4, #0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4623      	mov	r3, r4
 8009b82:	f7f7 f899 	bl	8000cb8 <__aeabi_uldivmod>
 8009b86:	4603      	mov	r3, r0
 8009b88:	460c      	mov	r4, r1
 8009b8a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009b8c:	e002      	b.n	8009b94 <UART_SetConfig+0x44c>
          default:
            ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	76fb      	strb	r3, [r7, #27]
            break;
 8009b92:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b9a:	d308      	bcc.n	8009bae <UART_SetConfig+0x466>
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba2:	d204      	bcs.n	8009bae <UART_SetConfig+0x466>
        {
          huart->Instance->BRR = usartdiv;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	60da      	str	r2, [r3, #12]
 8009bac:	e100      	b.n	8009db0 <UART_SetConfig+0x668>
        }
        else
        {
          ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	76fb      	strb	r3, [r7, #27]
 8009bb2:	e0fd      	b.n	8009db0 <UART_SetConfig+0x668>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbc:	f040 8084 	bne.w	8009cc8 <UART_SetConfig+0x580>
  {
    switch (clocksource)
 8009bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d85f      	bhi.n	8009c88 <UART_SetConfig+0x540>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x488>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009c15 	.word	0x08009c15
 8009bd8:	08009c35 	.word	0x08009c35
 8009bdc:	08009c89 	.word	0x08009c89
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c89 	.word	0x08009c89
 8009be8:	08009c89 	.word	0x08009c89
 8009bec:	08009c89 	.word	0x08009c89
 8009bf0:	08009c71 	.word	0x08009c71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bf4:	f7fe fa9e 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8009bf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	005a      	lsls	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c12:	e03c      	b.n	8009c8e <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c14:	f7fe faa4 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 8009c18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	005a      	lsls	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	441a      	add	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c32:	e02c      	b.n	8009c8e <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009c3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	6852      	ldr	r2, [r2, #4]
 8009c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c4e:	e01e      	b.n	8009c8e <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c50:	f7fe f9da 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8009c54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	005a      	lsls	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	085b      	lsrs	r3, r3, #1
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c6e:	e00e      	b.n	8009c8e <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c86:	e002      	b.n	8009c8e <UART_SetConfig+0x546>
      default:
        ret = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	76fb      	strb	r3, [r7, #27]
        break;
 8009c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	2b0f      	cmp	r3, #15
 8009c92:	d916      	bls.n	8009cc2 <UART_SetConfig+0x57a>
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9a:	d212      	bcs.n	8009cc2 <UART_SetConfig+0x57a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f023 030f 	bic.w	r3, r3, #15
 8009ca4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	89fb      	ldrh	r3, [r7, #14]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	89fa      	ldrh	r2, [r7, #14]
 8009cbe:	60da      	str	r2, [r3, #12]
 8009cc0:	e076      	b.n	8009db0 <UART_SetConfig+0x668>
    }
    else
    {
      ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	76fb      	strb	r3, [r7, #27]
 8009cc6:	e073      	b.n	8009db0 <UART_SetConfig+0x668>
    }
  }
  else
  {
    switch (clocksource)
 8009cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d85c      	bhi.n	8009d8a <UART_SetConfig+0x642>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <UART_SetConfig+0x590>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cfd 	.word	0x08009cfd
 8009cdc:	08009d1b 	.word	0x08009d1b
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	08009d8b 	.word	0x08009d8b
 8009ce8:	08009d55 	.word	0x08009d55
 8009cec:	08009d8b 	.word	0x08009d8b
 8009cf0:	08009d8b 	.word	0x08009d8b
 8009cf4:	08009d8b 	.word	0x08009d8b
 8009cf8:	08009d73 	.word	0x08009d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7fe fa1a 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8009d00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	085a      	lsrs	r2, r3, #1
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d18:	e03a      	b.n	8009d90 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d1a:	f7fe fa21 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 8009d1e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	085a      	lsrs	r2, r3, #1
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	441a      	add	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d36:	e02b      	b.n	8009d90 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	085b      	lsrs	r3, r3, #1
 8009d3e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009d42:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6852      	ldr	r2, [r2, #4]
 8009d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d52:	e01d      	b.n	8009d90 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d54:	f7fe f958 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8009d58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	085a      	lsrs	r2, r3, #1
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	441a      	add	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d70:	e00e      	b.n	8009d90 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d88:	e002      	b.n	8009d90 <UART_SetConfig+0x648>
      default:
        ret = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	76fb      	strb	r3, [r7, #27]
        break;
 8009d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2b0f      	cmp	r3, #15
 8009d94:	d90a      	bls.n	8009dac <UART_SetConfig+0x664>
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d9c:	d206      	bcs.n	8009dac <UART_SetConfig+0x664>
    {
      huart->Instance->BRR = usartdiv;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e003      	b.n	8009db0 <UART_SetConfig+0x668>
 8009da8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009dbc:	7efb      	ldrb	r3, [r7, #27]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3728      	adds	r7, #40	; 0x28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00a      	beq.n	8009df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	f003 0308 	and.w	r3, r3, #8
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	f003 0320 	and.w	r3, r3, #32
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01a      	beq.n	8009ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ec6:	d10a      	bne.n	8009ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]
  }
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009f1a:	f7fb fa07 	bl	800532c <HAL_GetTick>
 8009f1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	2b08      	cmp	r3, #8
 8009f2c:	d10e      	bne.n	8009f4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f82a 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e020      	b.n	8009f8e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	d10e      	bne.n	8009f78 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f814 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e00a      	b.n	8009f8e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2220      	movs	r2, #32
 8009f82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	603b      	str	r3, [r7, #0]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fa6:	e05d      	b.n	800a064 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d059      	beq.n	800a064 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb0:	f7fb f9bc 	bl	800532c <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d302      	bcc.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d11b      	bne.n	8009ffe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fd4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0201 	bic.w	r2, r2, #1
 8009fe4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e042      	b.n	800a084 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d02b      	beq.n	800a064 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a01a:	d123      	bne.n	800a064 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a024:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a034:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2220      	movs	r2, #32
 800a04a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2220      	movs	r2, #32
 800a050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e00f      	b.n	800a084 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69da      	ldr	r2, [r3, #28]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4013      	ands	r3, r2
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	bf0c      	ite	eq
 800a074:	2301      	moveq	r3, #1
 800a076:	2300      	movne	r3, #0
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d092      	beq.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0201 	bic.w	r2, r2, #1
 800a0b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff fb0e 	bl	800970c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0f0:	bf00      	nop
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a10a:	2200      	movs	r2, #0
 800a10c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d118      	bne.n	800a152 <UART_DMATxAbortCallback+0x5a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	220f      	movs	r2, #15
 800a13c:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2220      	movs	r2, #32
 800a142:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2220      	movs	r2, #32
 800a148:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f7ff fae8 	bl	8009720 <HAL_UART_AbortCpltCallback>
 800a150:	e000      	b.n	800a154 <UART_DMATxAbortCallback+0x5c>
      return;
 800a152:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16c:	2200      	movs	r2, #0
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d122      	bne.n	800a1c8 <UART_DMARxAbortCallback+0x6e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	220f      	movs	r2, #15
 800a19e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	8b1b      	ldrh	r3, [r3, #24]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 0208 	orr.w	r2, r2, #8
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff faad 	bl	8009720 <HAL_UART_AbortCpltCallback>
 800a1c6:	e000      	b.n	800a1ca <UART_DMARxAbortCallback+0x70>
      return;
 800a1c8:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	220f      	movs	r2, #15
 800a1ec:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	8b1b      	ldrh	r3, [r3, #24]
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0208 	orr.w	r2, r2, #8
 800a1fe:	b292      	uxth	r2, r2
 800a200:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2220      	movs	r2, #32
 800a206:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fa93 	bl	8009734 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a20e:	bf00      	nop
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a22c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fa5c 	bl	80096f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <__NVIC_SystemReset>:
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a260:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <__NVIC_SystemReset+0x20>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a26c:	4903      	ldr	r1, [pc, #12]	; (800a27c <__NVIC_SystemReset+0x20>)
 800a26e:	4b04      	ldr	r3, [pc, #16]	; (800a280 <__NVIC_SystemReset+0x24>)
 800a270:	4313      	orrs	r3, r2
 800a272:	60cb      	str	r3, [r1, #12]
 800a274:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <__NVIC_SystemReset+0x1c>
 800a27c:	e000ed00 	.word	0xe000ed00
 800a280:	05fa0004 	.word	0x05fa0004

0800a284 <Setup>:
int16_t wait_loop;
uint8_t state;

void I2C_Scanner(void);

void Setup(void) {
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
	/** SECTION: OLED */
	state = 1;
 800a28a:	4bbe      	ldr	r3, [pc, #760]	; (800a584 <Setup+0x300>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	701a      	strb	r2, [r3, #0]

#if(OLED_ENABLE)
	HAL_GPIO_WritePin(SENSOR_PWR_CTRL_GPIO_Port, SENSOR_PWR_CTRL_Pin, GPIO_PIN_RESET);
 800a290:	2200      	movs	r2, #0
 800a292:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a296:	48bc      	ldr	r0, [pc, #752]	; (800a588 <Setup+0x304>)
 800a298:	f7fc fcc0 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OPTIGA_RST_GPIO_Port, OPTIGA_RST_Pin, GPIO_PIN_RESET);
 800a29c:	2200      	movs	r2, #0
 800a29e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a2a2:	48b9      	ldr	r0, [pc, #740]	; (800a588 <Setup+0x304>)
 800a2a4:	f7fc fcba 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800a2a8:	200a      	movs	r0, #10
 800a2aa:	f7fb f84b 	bl	8005344 <HAL_Delay>
	HAL_GPIO_WritePin(SENSOR_PWR_CTRL_GPIO_Port, SENSOR_PWR_CTRL_Pin, GPIO_PIN_SET);
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2b4:	48b4      	ldr	r0, [pc, #720]	; (800a588 <Setup+0x304>)
 800a2b6:	f7fc fcb1 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OPTIGA_RST_GPIO_Port, OPTIGA_RST_Pin, GPIO_PIN_SET);
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a2c0:	48b1      	ldr	r0, [pc, #708]	; (800a588 <Setup+0x304>)
 800a2c2:	f7fc fcab 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800a2c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a2ca:	f7fb f83b 	bl	8005344 <HAL_Delay>
	ssd1306_Init(&hi2c2);
 800a2ce:	48af      	ldr	r0, [pc, #700]	; (800a58c <Setup+0x308>)
 800a2d0:	f7f9 ff1c 	bl	800410c <ssd1306_Init>
	HAL_Delay(10);
 800a2d4:	200a      	movs	r0, #10
 800a2d6:	f7fb f835 	bl	8005344 <HAL_Delay>
	ssd1306_SetCursor(0, 0);
 800a2da:	2100      	movs	r1, #0
 800a2dc:	2000      	movs	r0, #0
 800a2de:	f7fa f8eb 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Hello          ", Font_7x10, White);
 800a2e2:	4aab      	ldr	r2, [pc, #684]	; (800a590 <Setup+0x30c>)
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	ca06      	ldmia	r2, {r1, r2}
 800a2e8:	48aa      	ldr	r0, [pc, #680]	; (800a594 <Setup+0x310>)
 800a2ea:	f7fa f8bf 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a2ee:	f7f9 ffa5 	bl	800423c <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800a2f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a2f6:	f7fb f825 	bl	8005344 <HAL_Delay>

#endif
	HAL_IWDG_Refresh(&hiwdg);
 800a2fa:	48a7      	ldr	r0, [pc, #668]	; (800a598 <Setup+0x314>)
 800a2fc:	f7fd f8fd 	bl	80074fa <HAL_IWDG_Refresh>

	/** SECTION: GPS */
	state = 2;
 800a300:	4ba0      	ldr	r3, [pc, #640]	; (800a584 <Setup+0x300>)
 800a302:	2202      	movs	r2, #2
 800a304:	701a      	strb	r2, [r3, #0]
#if(GPS_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 0);
 800a306:	2100      	movs	r1, #0
 800a308:	2000      	movs	r0, #0
 800a30a:	f7fa f8d5 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("GPS Init      ", Font_7x10, White);
 800a30e:	4aa0      	ldr	r2, [pc, #640]	; (800a590 <Setup+0x30c>)
 800a310:	2301      	movs	r3, #1
 800a312:	ca06      	ldmia	r2, {r1, r2}
 800a314:	48a1      	ldr	r0, [pc, #644]	; (800a59c <Setup+0x318>)
 800a316:	f7fa f8a9 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a31a:	f7f9 ff8f 	bl	800423c <ssd1306_UpdateScreen>
#endif
	gnss_init(&huart3);
 800a31e:	48a0      	ldr	r0, [pc, #640]	; (800a5a0 <Setup+0x31c>)
 800a320:	f7f7 fcf6 	bl	8001d10 <gnss_init>
	gnss_RxITDisable();
 800a324:	f7f7 fea6 	bl	8002074 <gnss_RxITDisable>
#endif
	HAL_IWDG_Refresh(&hiwdg);
 800a328:	489b      	ldr	r0, [pc, #620]	; (800a598 <Setup+0x314>)
 800a32a:	f7fd f8e6 	bl	80074fa <HAL_IWDG_Refresh>

	/** SECTION: DENSO RAM */
	state = 3;
 800a32e:	4b95      	ldr	r3, [pc, #596]	; (800a584 <Setup+0x300>)
 800a330:	2203      	movs	r2, #3
 800a332:	701a      	strb	r2, [r3, #0]
#if(DENSORAM_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 0);
 800a334:	2100      	movs	r1, #0
 800a336:	2000      	movs	r0, #0
 800a338:	f7fa f8be 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("RAM Init      ", Font_7x10, White);
 800a33c:	4a94      	ldr	r2, [pc, #592]	; (800a590 <Setup+0x30c>)
 800a33e:	2301      	movs	r3, #1
 800a340:	ca06      	ldmia	r2, {r1, r2}
 800a342:	4898      	ldr	r0, [pc, #608]	; (800a5a4 <Setup+0x320>)
 800a344:	f7fa f892 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a348:	f7f9 ff78 	bl	800423c <ssd1306_UpdateScreen>
#endif
	DENSORAM_Init(&huart1);
 800a34c:	4896      	ldr	r0, [pc, #600]	; (800a5a8 <Setup+0x324>)
 800a34e:	f7f6 fe33 	bl	8000fb8 <DENSORAM_Init>
	DENSORAM_RxITDisable();
 800a352:	f7f6 fe81 	bl	8001058 <DENSORAM_RxITDisable>
#endif
	HAL_IWDG_Refresh(&hiwdg);
 800a356:	4890      	ldr	r0, [pc, #576]	; (800a598 <Setup+0x314>)
 800a358:	f7fd f8cf 	bl	80074fa <HAL_IWDG_Refresh>

	/** SECTION: UC200 */
	state = 4;
 800a35c:	4b89      	ldr	r3, [pc, #548]	; (800a584 <Setup+0x300>)
 800a35e:	2204      	movs	r2, #4
 800a360:	701a      	strb	r2, [r3, #0]
#if(UC200_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 0);
 800a362:	2100      	movs	r1, #0
 800a364:	2000      	movs	r0, #0
 800a366:	f7fa f8a7 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("UC200T Init    ", Font_7x10, White);
 800a36a:	4a89      	ldr	r2, [pc, #548]	; (800a590 <Setup+0x30c>)
 800a36c:	2301      	movs	r3, #1
 800a36e:	ca06      	ldmia	r2, {r1, r2}
 800a370:	488e      	ldr	r0, [pc, #568]	; (800a5ac <Setup+0x328>)
 800a372:	f7fa f87b 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a376:	f7f9 ff61 	bl	800423c <ssd1306_UpdateScreen>
#endif
	UC200_init(&huart4);
 800a37a:	488d      	ldr	r0, [pc, #564]	; (800a5b0 <Setup+0x32c>)
 800a37c:	f7f8 fb8a 	bl	8002a94 <UC200_init>

	/* Get function test */
	state = 5;
 800a380:	4b80      	ldr	r3, [pc, #512]	; (800a584 <Setup+0x300>)
 800a382:	2205      	movs	r2, #5
 800a384:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a386:	210a      	movs	r1, #10
 800a388:	2000      	movs	r0, #0
 800a38a:	f7fa f895 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Get IMEI and CCID   ", Font_7x10, White);
 800a38e:	4a80      	ldr	r2, [pc, #512]	; (800a590 <Setup+0x30c>)
 800a390:	2301      	movs	r3, #1
 800a392:	ca06      	ldmia	r2, {r1, r2}
 800a394:	4887      	ldr	r0, [pc, #540]	; (800a5b4 <Setup+0x330>)
 800a396:	f7fa f869 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a39a:	f7f9 ff4f 	bl	800423c <ssd1306_UpdateScreen>
#endif
	u8check = UC200_getIMEI(_DATA.imei);
 800a39e:	4886      	ldr	r0, [pc, #536]	; (800a5b8 <Setup+0x334>)
 800a3a0:	f7f8 fd7e 	bl	8002ea0 <UC200_getIMEI>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	4b84      	ldr	r3, [pc, #528]	; (800a5bc <Setup+0x338>)
 800a3aa:	701a      	strb	r2, [r3, #0]
	GenerateID();
 800a3ac:	f001 f852 	bl	800b454 <GenerateID>
	u8check &= UC200_getCCID(_DATA.ccid);
 800a3b0:	4883      	ldr	r0, [pc, #524]	; (800a5c0 <Setup+0x33c>)
 800a3b2:	f7f8 fd37 	bl	8002e24 <UC200_getCCID>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4b80      	ldr	r3, [pc, #512]	; (800a5bc <Setup+0x338>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	4013      	ands	r3, r2
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	4b7e      	ldr	r3, [pc, #504]	; (800a5bc <Setup+0x338>)
 800a3c4:	701a      	strb	r2, [r3, #0]

	/* SIM available */
	state = 6;
 800a3c6:	4b6f      	ldr	r3, [pc, #444]	; (800a584 <Setup+0x300>)
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	701a      	strb	r2, [r3, #0]
	if (u8check != 0) {
 800a3cc:	4b7b      	ldr	r3, [pc, #492]	; (800a5bc <Setup+0x338>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80b0 	beq.w	800a536 <Setup+0x2b2>
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a3d6:	210a      	movs	r1, #10
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f7fa f86d 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Connecting...      ", Font_7x10, White);
 800a3de:	4a6c      	ldr	r2, [pc, #432]	; (800a590 <Setup+0x30c>)
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	ca06      	ldmia	r2, {r1, r2}
 800a3e4:	4877      	ldr	r0, [pc, #476]	; (800a5c4 <Setup+0x340>)
 800a3e6:	f7fa f841 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a3ea:	f7f9 ff27 	bl	800423c <ssd1306_UpdateScreen>
#endif
		UC200_setFunctionality(SIM_MODE_FULL_FUNCTION, SIM_RST_NONE);
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	f7f8 fba5 	bl	8002b40 <UC200_setFunctionality>
		UC200_setPreferredScan(PREFERRED_3G, PREFERRED_NOW_APPLY);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	2002      	movs	r0, #2
 800a3fa:	f7f8 fc7f 	bl	8002cfc <UC200_setPreferredScan>
		UC200_setPreferredPriority(PREFERRED_3G, PREFERRED_NOW_APPLY);
 800a3fe:	2101      	movs	r1, #1
 800a400:	2002      	movs	r0, #2
 800a402:	f7f8 fca7 	bl	8002d54 <UC200_setPreferredPriority>
		HAL_IWDG_Refresh(&hiwdg);
 800a406:	4864      	ldr	r0, [pc, #400]	; (800a598 <Setup+0x314>)
 800a408:	f7fd f877 	bl	80074fa <HAL_IWDG_Refresh>
		/* Wait until connected operator */
		state = 7;
 800a40c:	4b5d      	ldr	r3, [pc, #372]	; (800a584 <Setup+0x300>)
 800a40e:	2207      	movs	r2, #7
 800a410:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a412:	210a      	movs	r1, #10
 800a414:	2000      	movs	r0, #0
 800a416:	f7fa f84f 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Get Network Status    ", Font_7x10, White);
 800a41a:	4a5d      	ldr	r2, [pc, #372]	; (800a590 <Setup+0x30c>)
 800a41c:	2301      	movs	r3, #1
 800a41e:	ca06      	ldmia	r2, {r1, r2}
 800a420:	4869      	ldr	r0, [pc, #420]	; (800a5c8 <Setup+0x344>)
 800a422:	f7fa f823 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a426:	f7f9 ff09 	bl	800423c <ssd1306_UpdateScreen>
#endif
		for (int i = 0; i < 150; i++) {
 800a42a:	2300      	movs	r3, #0
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	e00f      	b.n	800a450 <Setup+0x1cc>
			HAL_Delay(1000);
 800a430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a434:	f7fa ff86 	bl	8005344 <HAL_Delay>
			HAL_IWDG_Refresh(&hiwdg);
 800a438:	4857      	ldr	r0, [pc, #348]	; (800a598 <Setup+0x314>)
 800a43a:	f7fd f85e 	bl	80074fa <HAL_IWDG_Refresh>
			if(UC200_getNetworkStatus(PREFERRED_2G_3G) == OPR_REGISTERD_HOME) break;
 800a43e:	2000      	movs	r0, #0
 800a440:	f7f8 fcb4 	bl	8002dac <UC200_getNetworkStatus>
 800a444:	4603      	mov	r3, r0
 800a446:	2b01      	cmp	r3, #1
 800a448:	d006      	beq.n	800a458 <Setup+0x1d4>
		for (int i = 0; i < 150; i++) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3301      	adds	r3, #1
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b95      	cmp	r3, #149	; 0x95
 800a454:	ddec      	ble.n	800a430 <Setup+0x1ac>
 800a456:	e000      	b.n	800a45a <Setup+0x1d6>
			if(UC200_getNetworkStatus(PREFERRED_2G_3G) == OPR_REGISTERD_HOME) break;
 800a458:	bf00      	nop
		}
		HAL_IWDG_Refresh(&hiwdg);
 800a45a:	484f      	ldr	r0, [pc, #316]	; (800a598 <Setup+0x314>)
 800a45c:	f7fd f84d 	bl	80074fa <HAL_IWDG_Refresh>

		/* Internet function test */
		state = 8;
 800a460:	4b48      	ldr	r3, [pc, #288]	; (800a584 <Setup+0x300>)
 800a462:	2208      	movs	r2, #8
 800a464:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a466:	210a      	movs	r1, #10
 800a468:	2000      	movs	r0, #0
 800a46a:	f7fa f825 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Enable PDP          ", Font_7x10, White);
 800a46e:	4a48      	ldr	r2, [pc, #288]	; (800a590 <Setup+0x30c>)
 800a470:	2301      	movs	r3, #1
 800a472:	ca06      	ldmia	r2, {r1, r2}
 800a474:	4855      	ldr	r0, [pc, #340]	; (800a5cc <Setup+0x348>)
 800a476:	f7f9 fff9 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a47a:	f7f9 fedf 	bl	800423c <ssd1306_UpdateScreen>
#endif
		UC200_GPRSgetParamFromList();
 800a47e:	f7f8 fd81 	bl	8002f84 <UC200_GPRSgetParamFromList>
		UC200_GPRSenable(ACTIVE);
 800a482:	2001      	movs	r0, #1
 800a484:	f7f8 fdd6 	bl	8003034 <UC200_GPRSenable>
		UC200_GPRScheckIP();
 800a488:	f7f8 fea2 	bl	80031d0 <UC200_GPRScheckIP>
#endif
		UC200_DeleteFile("*");
		WRITE_SAVEINDEX(0);
#else
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a48c:	210a      	movs	r1, #10
 800a48e:	2000      	movs	r0, #0
 800a490:	f7fa f812 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Retrieve Save File      ", Font_7x10, White);
 800a494:	4a3e      	ldr	r2, [pc, #248]	; (800a590 <Setup+0x30c>)
 800a496:	2301      	movs	r3, #1
 800a498:	ca06      	ldmia	r2, {r1, r2}
 800a49a:	484d      	ldr	r0, [pc, #308]	; (800a5d0 <Setup+0x34c>)
 800a49c:	f7f9 ffe6 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a4a0:	f7f9 fecc 	bl	800423c <ssd1306_UpdateScreen>
	sprintf((char*)txtBuffer, "Save index is %d         ",save_index);
 800a4a4:	4b4b      	ldr	r3, [pc, #300]	; (800a5d4 <Setup+0x350>)
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	494b      	ldr	r1, [pc, #300]	; (800a5d8 <Setup+0x354>)
 800a4ac:	484b      	ldr	r0, [pc, #300]	; (800a5dc <Setup+0x358>)
 800a4ae:	f002 fc91 	bl	800cdd4 <siprintf>
	ssd1306_SetCursor(0, 20);
 800a4b2:	2114      	movs	r1, #20
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f7f9 ffff 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString((char*)txtBuffer, Font_7x10, White);
 800a4ba:	4a35      	ldr	r2, [pc, #212]	; (800a590 <Setup+0x30c>)
 800a4bc:	2301      	movs	r3, #1
 800a4be:	ca06      	ldmia	r2, {r1, r2}
 800a4c0:	4846      	ldr	r0, [pc, #280]	; (800a5dc <Setup+0x358>)
 800a4c2:	f7f9 ffd3 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a4c6:	f7f9 feb9 	bl	800423c <ssd1306_UpdateScreen>
#endif
		dbg_println("\033[1;36mRetrieve Save index from backup register\033[0m");
		save_index = READ_SAVEINDEX();
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	4844      	ldr	r0, [pc, #272]	; (800a5e0 <Setup+0x35c>)
 800a4ce:	f7fe fb52 	bl	8008b76 <HAL_RTCEx_BKUPRead>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	4b3f      	ldr	r3, [pc, #252]	; (800a5d4 <Setup+0x350>)
 800a4d8:	801a      	strh	r2, [r3, #0]
		sprintf((char*) debugBuffer, "\033[0;36mSave index now is %d\033[0m", save_index);
 800a4da:	4b3e      	ldr	r3, [pc, #248]	; (800a5d4 <Setup+0x350>)
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4940      	ldr	r1, [pc, #256]	; (800a5e4 <Setup+0x360>)
 800a4e2:	4841      	ldr	r0, [pc, #260]	; (800a5e8 <Setup+0x364>)
 800a4e4:	f002 fc76 	bl	800cdd4 <siprintf>
		dbg_println(debugBuffer);
#endif
		state = 81;
 800a4e8:	4b26      	ldr	r3, [pc, #152]	; (800a584 <Setup+0x300>)
 800a4ea:	2251      	movs	r2, #81	; 0x51
 800a4ec:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
		ssd1306_SetCursor(0, 10);
 800a4ee:	210a      	movs	r1, #10
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f7f9 ffe1 	bl	80044b8 <ssd1306_SetCursor>
		ssd1306_WriteString("MQTT Connect      ", Font_7x10, White);
 800a4f6:	4a26      	ldr	r2, [pc, #152]	; (800a590 <Setup+0x30c>)
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	ca06      	ldmia	r2, {r1, r2}
 800a4fc:	483b      	ldr	r0, [pc, #236]	; (800a5ec <Setup+0x368>)
 800a4fe:	f7f9 ffb5 	bl	800446c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800a502:	f7f9 fe9b 	bl	800423c <ssd1306_UpdateScreen>
#endif
		u8check = UC200_TcpipOpen((uint8_t*) "3.1.176.170", 1883);
 800a506:	f240 715b 	movw	r1, #1883	; 0x75b
 800a50a:	4839      	ldr	r0, [pc, #228]	; (800a5f0 <Setup+0x36c>)
 800a50c:	f7f9 f87c 	bl	8003608 <UC200_TcpipOpen>
 800a510:	4603      	mov	r3, r0
 800a512:	461a      	mov	r2, r3
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <Setup+0x338>)
 800a516:	701a      	strb	r2, [r3, #0]
		u8check = UC200_MQTTConnectCheck(_DATA.id_imei,(uint8_t*)"acov",(uint8_t*)"devrnd");
 800a518:	4a36      	ldr	r2, [pc, #216]	; (800a5f4 <Setup+0x370>)
 800a51a:	4937      	ldr	r1, [pc, #220]	; (800a5f8 <Setup+0x374>)
 800a51c:	4837      	ldr	r0, [pc, #220]	; (800a5fc <Setup+0x378>)
 800a51e:	f7f9 fb2d 	bl	8003b7c <UC200_MQTTConnectCheck>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <Setup+0x338>)
 800a528:	701a      	strb	r2, [r3, #0]
		sprintf(sub_room,"ctl/%s/",_DATA.imei);
 800a52a:	4a23      	ldr	r2, [pc, #140]	; (800a5b8 <Setup+0x334>)
 800a52c:	4934      	ldr	r1, [pc, #208]	; (800a600 <Setup+0x37c>)
 800a52e:	4835      	ldr	r0, [pc, #212]	; (800a604 <Setup+0x380>)
 800a530:	f002 fc50 	bl	800cdd4 <siprintf>
 800a534:	e01b      	b.n	800a56e <Setup+0x2ea>
//		u8check &= UC200T_MQTTsubscribe(sub_room, 0);
	} else {
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a536:	210a      	movs	r1, #10
 800a538:	2000      	movs	r0, #0
 800a53a:	f7f9 ffbd 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Connect Fail            ", Font_7x10, White);
 800a53e:	4a14      	ldr	r2, [pc, #80]	; (800a590 <Setup+0x30c>)
 800a540:	2301      	movs	r3, #1
 800a542:	ca06      	ldmia	r2, {r1, r2}
 800a544:	4830      	ldr	r0, [pc, #192]	; (800a608 <Setup+0x384>)
 800a546:	f7f9 ff91 	bl	800446c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 800a54a:	2114      	movs	r1, #20
 800a54c:	2000      	movs	r0, #0
 800a54e:	f7f9 ffb3 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Try to Reset            ", Font_7x10, White);
 800a552:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <Setup+0x30c>)
 800a554:	2301      	movs	r3, #1
 800a556:	ca06      	ldmia	r2, {r1, r2}
 800a558:	482c      	ldr	r0, [pc, #176]	; (800a60c <Setup+0x388>)
 800a55a:	f7f9 ff87 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a55e:	f7f9 fe6d 	bl	800423c <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800a562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a566:	f7fa feed 	bl	8005344 <HAL_Delay>
#endif
		NVIC_SystemReset();
 800a56a:	f7ff fe77 	bl	800a25c <__NVIC_SystemReset>
	}
#endif
	HAL_IWDG_Refresh(&hiwdg);
 800a56e:	480a      	ldr	r0, [pc, #40]	; (800a598 <Setup+0x314>)
 800a570:	f7fc ffc3 	bl	80074fa <HAL_IWDG_Refresh>

	_DATA.pack_no = 0;
 800a574:	4b21      	ldr	r3, [pc, #132]	; (800a5fc <Setup+0x378>)
 800a576:	2200      	movs	r2, #0
 800a578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20001e39 	.word	0x20001e39
 800a588:	48000400 	.word	0x48000400
 800a58c:	200019f4 	.word	0x200019f4
 800a590:	20000000 	.word	0x20000000
 800a594:	08011318 	.word	0x08011318
 800a598:	20001a40 	.word	0x20001a40
 800a59c:	08011328 	.word	0x08011328
 800a5a0:	20001ab4 	.word	0x20001ab4
 800a5a4:	08011338 	.word	0x08011338
 800a5a8:	20001b34 	.word	0x20001b34
 800a5ac:	08011348 	.word	0x08011348
 800a5b0:	20001bb4 	.word	0x20001bb4
 800a5b4:	08011358 	.word	0x08011358
 800a5b8:	20001f00 	.word	0x20001f00
 800a5bc:	20001e38 	.word	0x20001e38
 800a5c0:	20001f10 	.word	0x20001f10
 800a5c4:	08011370 	.word	0x08011370
 800a5c8:	08011384 	.word	0x08011384
 800a5cc:	0801139c 	.word	0x0801139c
 800a5d0:	080113b4 	.word	0x080113b4
 800a5d4:	20000ce6 	.word	0x20000ce6
 800a5d8:	080113d0 	.word	0x080113d0
 800a5dc:	20001d38 	.word	0x20001d38
 800a5e0:	20001a50 	.word	0x20001a50
 800a5e4:	080113ec 	.word	0x080113ec
 800a5e8:	20001c38 	.word	0x20001c38
 800a5ec:	0801140c 	.word	0x0801140c
 800a5f0:	08011420 	.word	0x08011420
 800a5f4:	0801142c 	.word	0x0801142c
 800a5f8:	08011434 	.word	0x08011434
 800a5fc:	20001ee8 	.word	0x20001ee8
 800a600:	0801143c 	.word	0x0801143c
 800a604:	20000cc4 	.word	0x20000cc4
 800a608:	08011444 	.word	0x08011444
 800a60c:	08011460 	.word	0x08011460

0800a610 <Loop>:

void Loop(void) {
 800a610:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a614:	b08c      	sub	sp, #48	; 0x30
 800a616:	af02      	add	r7, sp, #8
	/** SECTION: Get Time from UC200 */
	state = 9;
 800a618:	4baf      	ldr	r3, [pc, #700]	; (800a8d8 <Loop+0x2c8>)
 800a61a:	2209      	movs	r2, #9
 800a61c:	701a      	strb	r2, [r3, #0]
#if(UC200_ENABLE)
#if(OLED_ENABLE)
	ssd1306_Init(&hi2c2);
 800a61e:	48af      	ldr	r0, [pc, #700]	; (800a8dc <Loop+0x2cc>)
 800a620:	f7f9 fd74 	bl	800410c <ssd1306_Init>
	ssd1306_UpdateScreen();
 800a624:	f7f9 fe0a 	bl	800423c <ssd1306_UpdateScreen>
	sprintf((char*)txtBuffer, "Packet No.%d           ",_DATA.pack_no);
 800a628:	4bad      	ldr	r3, [pc, #692]	; (800a8e0 <Loop+0x2d0>)
 800a62a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a62e:	461a      	mov	r2, r3
 800a630:	49ac      	ldr	r1, [pc, #688]	; (800a8e4 <Loop+0x2d4>)
 800a632:	48ad      	ldr	r0, [pc, #692]	; (800a8e8 <Loop+0x2d8>)
 800a634:	f002 fbce 	bl	800cdd4 <siprintf>
	ssd1306_SetCursor(0, 0);
 800a638:	2100      	movs	r1, #0
 800a63a:	2000      	movs	r0, #0
 800a63c:	f7f9 ff3c 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString((char*)txtBuffer, Font_7x10, White);
 800a640:	4aaa      	ldr	r2, [pc, #680]	; (800a8ec <Loop+0x2dc>)
 800a642:	2301      	movs	r3, #1
 800a644:	ca06      	ldmia	r2, {r1, r2}
 800a646:	48a8      	ldr	r0, [pc, #672]	; (800a8e8 <Loop+0x2d8>)
 800a648:	f7f9 ff10 	bl	800446c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 800a64c:	210a      	movs	r1, #10
 800a64e:	2000      	movs	r0, #0
 800a650:	f7f9 ff32 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Begin                 ", Font_7x10, White);
 800a654:	4aa5      	ldr	r2, [pc, #660]	; (800a8ec <Loop+0x2dc>)
 800a656:	2301      	movs	r3, #1
 800a658:	ca06      	ldmia	r2, {r1, r2}
 800a65a:	48a5      	ldr	r0, [pc, #660]	; (800a8f0 <Loop+0x2e0>)
 800a65c:	f7f9 ff06 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a660:	f7f9 fdec 	bl	800423c <ssd1306_UpdateScreen>
#endif
	dbg_println("\033[1;36mBegin Get Time\033[0m");
	u8check = UC200_RTCread(txtBuffer);
 800a664:	48a0      	ldr	r0, [pc, #640]	; (800a8e8 <Loop+0x2d8>)
 800a666:	f7f8 fdc7 	bl	80031f8 <UC200_RTCread>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	4ba1      	ldr	r3, [pc, #644]	; (800a8f4 <Loop+0x2e4>)
 800a670:	701a      	strb	r2, [r3, #0]
	u8check &= UC200_ConvertEpochTime((char*) txtBuffer, &(_DATA.timestamp));
 800a672:	49a1      	ldr	r1, [pc, #644]	; (800a8f8 <Loop+0x2e8>)
 800a674:	489c      	ldr	r0, [pc, #624]	; (800a8e8 <Loop+0x2d8>)
 800a676:	f7f8 fde7 	bl	8003248 <UC200_ConvertEpochTime>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b9d      	ldr	r3, [pc, #628]	; (800a8f4 <Loop+0x2e4>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	4013      	ands	r3, r2
 800a684:	b2da      	uxtb	r2, r3
 800a686:	4b9b      	ldr	r3, [pc, #620]	; (800a8f4 <Loop+0x2e4>)
 800a688:	701a      	strb	r2, [r3, #0]
	_STATUS.timestamp_begin = _DATA.timestamp;
 800a68a:	4b95      	ldr	r3, [pc, #596]	; (800a8e0 <Loop+0x2d0>)
 800a68c:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800a690:	4a9a      	ldr	r2, [pc, #616]	; (800a8fc <Loop+0x2ec>)
 800a692:	e9c2 3400 	strd	r3, r4, [r2]
#endif
	HAL_IWDG_Refresh(&hiwdg);
 800a696:	489a      	ldr	r0, [pc, #616]	; (800a900 <Loop+0x2f0>)
 800a698:	f7fc ff2f 	bl	80074fa <HAL_IWDG_Refresh>

	if(_STATUS.fail_time > 1){
 800a69c:	4b97      	ldr	r3, [pc, #604]	; (800a8fc <Loop+0x2ec>)
 800a69e:	7c1b      	ldrb	r3, [r3, #16]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d91f      	bls.n	800a6e4 <Loop+0xd4>
		u8check = UC200_TcpipClose();
 800a6a4:	f7f8 ffd4 	bl	8003650 <UC200_TcpipClose>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4b91      	ldr	r3, [pc, #580]	; (800a8f4 <Loop+0x2e4>)
 800a6ae:	701a      	strb	r2, [r3, #0]
		u8check &= UC200_TcpipOpen((uint8_t*) "3.1.176.170", 1883);
 800a6b0:	f240 715b 	movw	r1, #1883	; 0x75b
 800a6b4:	4893      	ldr	r0, [pc, #588]	; (800a904 <Loop+0x2f4>)
 800a6b6:	f7f8 ffa7 	bl	8003608 <UC200_TcpipOpen>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4b8d      	ldr	r3, [pc, #564]	; (800a8f4 <Loop+0x2e4>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	4b8b      	ldr	r3, [pc, #556]	; (800a8f4 <Loop+0x2e4>)
 800a6c8:	701a      	strb	r2, [r3, #0]
		u8check &= UC200_MQTTConnectCheck(_DATA.id_imei,(uint8_t*)"acov",(uint8_t*)"devrnd");
 800a6ca:	4a8f      	ldr	r2, [pc, #572]	; (800a908 <Loop+0x2f8>)
 800a6cc:	498f      	ldr	r1, [pc, #572]	; (800a90c <Loop+0x2fc>)
 800a6ce:	4884      	ldr	r0, [pc, #528]	; (800a8e0 <Loop+0x2d0>)
 800a6d0:	f7f9 fa54 	bl	8003b7c <UC200_MQTTConnectCheck>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b86      	ldr	r3, [pc, #536]	; (800a8f4 <Loop+0x2e4>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	4b84      	ldr	r3, [pc, #528]	; (800a8f4 <Loop+0x2e4>)
 800a6e2:	701a      	strb	r2, [r3, #0]
//		u8check &= UC200T_MQTTsubscribe(sub_room, 0);
	}

	/** SECTION: ADC */
	state = 10;
 800a6e4:	4b7c      	ldr	r3, [pc, #496]	; (800a8d8 <Loop+0x2c8>)
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	701a      	strb	r2, [r3, #0]
#if(BATTADC_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a6ea:	210a      	movs	r1, #10
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f7f9 fee3 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("ADC Measure...         ", Font_7x10, White);
 800a6f2:	4a7e      	ldr	r2, [pc, #504]	; (800a8ec <Loop+0x2dc>)
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	ca06      	ldmia	r2, {r1, r2}
 800a6f8:	4885      	ldr	r0, [pc, #532]	; (800a910 <Loop+0x300>)
 800a6fa:	f7f9 feb7 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a6fe:	f7f9 fd9d 	bl	800423c <ssd1306_UpdateScreen>
#endif
	dbg_println("\033[1;36mBegin Get ADC Value\033[0m");
	ADC_ChannelConfig(ADC_CHANNEL_8);
 800a702:	4884      	ldr	r0, [pc, #528]	; (800a914 <Loop+0x304>)
 800a704:	f7f9 ff94 	bl	8004630 <ADC_ChannelConfig>
	HAL_GPIO_WritePin(BATT_ADC_EN_GPIO_Port, BATT_ADC_EN_Pin, 1);
 800a708:	2201      	movs	r2, #1
 800a70a:	2110      	movs	r1, #16
 800a70c:	4882      	ldr	r0, [pc, #520]	; (800a918 <Loop+0x308>)
 800a70e:	f7fc fa85 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800a712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a716:	f7fa fe15 	bl	8005344 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 800a71a:	4880      	ldr	r0, [pc, #512]	; (800a91c <Loop+0x30c>)
 800a71c:	f7fb f99a 	bl	8005a54 <HAL_ADC_Start>
	for (int i = 0; i < 100; i++) {
 800a720:	2300      	movs	r3, #0
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
 800a724:	e009      	b.n	800a73a <Loop+0x12a>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800a726:	2164      	movs	r1, #100	; 0x64
 800a728:	487c      	ldr	r0, [pc, #496]	; (800a91c <Loop+0x30c>)
 800a72a:	f7fb fa29 	bl	8005b80 <HAL_ADC_PollForConversion>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d006      	beq.n	800a742 <Loop+0x132>
	for (int i = 0; i < 100; i++) {
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	3301      	adds	r3, #1
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	2b63      	cmp	r3, #99	; 0x63
 800a73e:	ddf2      	ble.n	800a726 <Loop+0x116>
 800a740:	e000      	b.n	800a744 <Loop+0x134>
			break;
 800a742:	bf00      	nop
	}
	_DATA.adc = HAL_ADC_GetValue(&hadc1);
 800a744:	4875      	ldr	r0, [pc, #468]	; (800a91c <Loop+0x30c>)
 800a746:	f7fb faa3 	bl	8005c90 <HAL_ADC_GetValue>
 800a74a:	4602      	mov	r2, r0
 800a74c:	4b64      	ldr	r3, [pc, #400]	; (800a8e0 <Loop+0x2d0>)
 800a74e:	661a      	str	r2, [r3, #96]	; 0x60
	HAL_ADC_Stop(&hadc1);
 800a750:	4872      	ldr	r0, [pc, #456]	; (800a91c <Loop+0x30c>)
 800a752:	f7fb f9e2 	bl	8005b1a <HAL_ADC_Stop>
	HAL_GPIO_WritePin(BATT_ADC_EN_GPIO_Port, BATT_ADC_EN_Pin, 0);
 800a756:	2200      	movs	r2, #0
 800a758:	2110      	movs	r1, #16
 800a75a:	486f      	ldr	r0, [pc, #444]	; (800a918 <Loop+0x308>)
 800a75c:	f7fc fa5e 	bl	8006c1c <HAL_GPIO_WritePin>
	HAL_IWDG_Refresh(&hiwdg);
 800a760:	4867      	ldr	r0, [pc, #412]	; (800a900 <Loop+0x2f0>)
 800a762:	f7fc feca 	bl	80074fa <HAL_IWDG_Refresh>

#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 10);
 800a766:	210a      	movs	r1, #10
 800a768:	2000      	movs	r0, #0
 800a76a:	f7f9 fea5 	bl	80044b8 <ssd1306_SetCursor>
	adc_float = ((_DATA.adc)/(4095.0/1.8));
 800a76e:	4b5c      	ldr	r3, [pc, #368]	; (800a8e0 <Loop+0x2d0>)
 800a770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a772:	4618      	mov	r0, r3
 800a774:	f7f5 fede 	bl	8000534 <__aeabi_ui2d>
 800a778:	a34f      	add	r3, pc, #316	; (adr r3, 800a8b8 <Loop+0x2a8>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	f7f6 f87d 	bl	800087c <__aeabi_ddiv>
 800a782:	4603      	mov	r3, r0
 800a784:	460c      	mov	r4, r1
 800a786:	4618      	mov	r0, r3
 800a788:	4621      	mov	r1, r4
 800a78a:	f7f6 fa45 	bl	8000c18 <__aeabi_d2f>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b63      	ldr	r3, [pc, #396]	; (800a920 <Loop+0x310>)
 800a792:	601a      	str	r2, [r3, #0]
	adc_float = (adc_float/(1.6/4.2));
 800a794:	4b62      	ldr	r3, [pc, #392]	; (800a920 <Loop+0x310>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f5 feed 	bl	8000578 <__aeabi_f2d>
 800a79e:	a348      	add	r3, pc, #288	; (adr r3, 800a8c0 <Loop+0x2b0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f6 f86a 	bl	800087c <__aeabi_ddiv>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f7f6 fa32 	bl	8000c18 <__aeabi_d2f>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b5a      	ldr	r3, [pc, #360]	; (800a920 <Loop+0x310>)
 800a7b8:	601a      	str	r2, [r3, #0]
	adc_float = adc_float - 0.2;
 800a7ba:	4b59      	ldr	r3, [pc, #356]	; (800a920 <Loop+0x310>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f5 feda 	bl	8000578 <__aeabi_f2d>
 800a7c4:	a340      	add	r3, pc, #256	; (adr r3, 800a8c8 <Loop+0x2b8>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fd75 	bl	80002b8 <__aeabi_dsub>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f7f6 fa1f 	bl	8000c18 <__aeabi_d2f>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	4b50      	ldr	r3, [pc, #320]	; (800a920 <Loop+0x310>)
 800a7de:	601a      	str	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(CHARGE_STATUS_GPIO_Port, CHARGE_STATUS_Pin)){
 800a7e0:	2110      	movs	r1, #16
 800a7e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7e6:	f7fc fa01 	bl	8006bec <HAL_GPIO_ReadPin>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10d      	bne.n	800a80c <Loop+0x1fc>
		sprintf((char*)txtBuffer, "ADC %.2fV Charged",adc_float);
 800a7f0:	4b4b      	ldr	r3, [pc, #300]	; (800a920 <Loop+0x310>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7f5 febf 	bl	8000578 <__aeabi_f2d>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	461a      	mov	r2, r3
 800a800:	4623      	mov	r3, r4
 800a802:	4948      	ldr	r1, [pc, #288]	; (800a924 <Loop+0x314>)
 800a804:	4838      	ldr	r0, [pc, #224]	; (800a8e8 <Loop+0x2d8>)
 800a806:	f002 fae5 	bl	800cdd4 <siprintf>
 800a80a:	e00c      	b.n	800a826 <Loop+0x216>
		dbg_println("\033[0;36mCharged State\033[0m");
	}
	else{
		sprintf((char*)txtBuffer, "ADC %.2fV Battery",adc_float);
 800a80c:	4b44      	ldr	r3, [pc, #272]	; (800a920 <Loop+0x310>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4618      	mov	r0, r3
 800a812:	f7f5 feb1 	bl	8000578 <__aeabi_f2d>
 800a816:	4603      	mov	r3, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	461a      	mov	r2, r3
 800a81c:	4623      	mov	r3, r4
 800a81e:	4942      	ldr	r1, [pc, #264]	; (800a928 <Loop+0x318>)
 800a820:	4831      	ldr	r0, [pc, #196]	; (800a8e8 <Loop+0x2d8>)
 800a822:	f002 fad7 	bl	800cdd4 <siprintf>
		dbg_println("\033[0;36mBattery State\033[0m");
	}
	ssd1306_WriteString(txtBuffer, Font_7x10, White);
 800a826:	4a31      	ldr	r2, [pc, #196]	; (800a8ec <Loop+0x2dc>)
 800a828:	2301      	movs	r3, #1
 800a82a:	ca06      	ldmia	r2, {r1, r2}
 800a82c:	482e      	ldr	r0, [pc, #184]	; (800a8e8 <Loop+0x2d8>)
 800a82e:	f7f9 fe1d 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a832:	f7f9 fd03 	bl	800423c <ssd1306_UpdateScreen>
#endif
#endif

	/** SECTION: GPS */
	state = 11;
 800a836:	4b28      	ldr	r3, [pc, #160]	; (800a8d8 <Loop+0x2c8>)
 800a838:	220b      	movs	r2, #11
 800a83a:	701a      	strb	r2, [r3, #0]
#if(GPS_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 20);
 800a83c:	2114      	movs	r1, #20
 800a83e:	2000      	movs	r0, #0
 800a840:	f7f9 fe3a 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("GPS Measure...            ", Font_7x10, White);
 800a844:	4a29      	ldr	r2, [pc, #164]	; (800a8ec <Loop+0x2dc>)
 800a846:	2301      	movs	r3, #1
 800a848:	ca06      	ldmia	r2, {r1, r2}
 800a84a:	4838      	ldr	r0, [pc, #224]	; (800a92c <Loop+0x31c>)
 800a84c:	f7f9 fe0e 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a850:	f7f9 fcf4 	bl	800423c <ssd1306_UpdateScreen>
#endif
	dbg_println("\033[1;36mBegin Get GNSS Value\033[0m");
	GetNormalizedGPS(&(_DATA.lat), &(_DATA.lng));
 800a854:	4936      	ldr	r1, [pc, #216]	; (800a930 <Loop+0x320>)
 800a856:	4837      	ldr	r0, [pc, #220]	; (800a934 <Loop+0x324>)
 800a858:	f001 f866 	bl	800b928 <GetNormalizedGPS>
	//L80_ResetTrigger();
	HAL_IWDG_Refresh(&hiwdg);
 800a85c:	4828      	ldr	r0, [pc, #160]	; (800a900 <Loop+0x2f0>)
 800a85e:	f7fc fe4c 	bl	80074fa <HAL_IWDG_Refresh>
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 20);
 800a862:	2114      	movs	r1, #20
 800a864:	2000      	movs	r0, #0
 800a866:	f7f9 fe27 	bl	80044b8 <ssd1306_SetCursor>
	if(_DATA.lat == 999.9999999 || _DATA.lng == 999.9999999){
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <Loop+0x2d0>)
 800a86c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800a870:	a317      	add	r3, pc, #92	; (adr r3, 800a8d0 <Loop+0x2c0>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f6 f93f 	bl	8000af8 <__aeabi_dcmpeq>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <Loop+0x286>
 800a880:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <Loop+0x2d0>)
 800a882:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800a886:	a312      	add	r3, pc, #72	; (adr r3, 800a8d0 <Loop+0x2c0>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f6 f934 	bl	8000af8 <__aeabi_dcmpeq>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d052      	beq.n	800a93c <Loop+0x32c>
		sprintf((char*)txtBuffer, "GPS Fail %d          ",_STATUS.gps_fail);
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <Loop+0x2ec>)
 800a898:	7c5b      	ldrb	r3, [r3, #17]
 800a89a:	461a      	mov	r2, r3
 800a89c:	4926      	ldr	r1, [pc, #152]	; (800a938 <Loop+0x328>)
 800a89e:	4812      	ldr	r0, [pc, #72]	; (800a8e8 <Loop+0x2d8>)
 800a8a0:	f002 fa98 	bl	800cdd4 <siprintf>
		ssd1306_WriteString(txtBuffer, Font_7x10, White);
 800a8a4:	4a11      	ldr	r2, [pc, #68]	; (800a8ec <Loop+0x2dc>)
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	ca06      	ldmia	r2, {r1, r2}
 800a8aa:	480f      	ldr	r0, [pc, #60]	; (800a8e8 <Loop+0x2d8>)
 800a8ac:	f7f9 fdde 	bl	800446c <ssd1306_WriteString>
 800a8b0:	e058      	b.n	800a964 <Loop+0x354>
 800a8b2:	bf00      	nop
 800a8b4:	f3af 8000 	nop.w
 800a8b8:	00000000 	.word	0x00000000
 800a8bc:	40a1c600 	.word	0x40a1c600
 800a8c0:	18618618 	.word	0x18618618
 800a8c4:	3fd86186 	.word	0x3fd86186
 800a8c8:	9999999a 	.word	0x9999999a
 800a8cc:	3fc99999 	.word	0x3fc99999
 800a8d0:	fff29407 	.word	0xfff29407
 800a8d4:	408f3fff 	.word	0x408f3fff
 800a8d8:	20001e39 	.word	0x20001e39
 800a8dc:	200019f4 	.word	0x200019f4
 800a8e0:	20001ee8 	.word	0x20001ee8
 800a8e4:	0801147c 	.word	0x0801147c
 800a8e8:	20001d38 	.word	0x20001d38
 800a8ec:	20000000 	.word	0x20000000
 800a8f0:	08011494 	.word	0x08011494
 800a8f4:	20001e38 	.word	0x20001e38
 800a8f8:	20001f30 	.word	0x20001f30
 800a8fc:	200026b8 	.word	0x200026b8
 800a900:	20001a40 	.word	0x20001a40
 800a904:	08011420 	.word	0x08011420
 800a908:	0801142c 	.word	0x0801142c
 800a90c:	08011434 	.word	0x08011434
 800a910:	080114ac 	.word	0x080114ac
 800a914:	21800100 	.word	0x21800100
 800a918:	48000400 	.word	0x48000400
 800a91c:	20001974 	.word	0x20001974
 800a920:	20001ebc 	.word	0x20001ebc
 800a924:	080114c4 	.word	0x080114c4
 800a928:	080114d8 	.word	0x080114d8
 800a92c:	080114ec 	.word	0x080114ec
 800a930:	20001f40 	.word	0x20001f40
 800a934:	20001f38 	.word	0x20001f38
 800a938:	08011508 	.word	0x08011508
	}
	else{
		sprintf((char*)txtBuffer, "GPS %.2f,%.2f  ",_DATA.lat,_DATA.lng);
 800a93c:	4bba      	ldr	r3, [pc, #744]	; (800ac28 <Loop+0x618>)
 800a93e:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 800a942:	4bb9      	ldr	r3, [pc, #740]	; (800ac28 <Loop+0x618>)
 800a944:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 800a948:	e9cd 3400 	strd	r3, r4, [sp]
 800a94c:	4613      	mov	r3, r2
 800a94e:	460a      	mov	r2, r1
 800a950:	49b6      	ldr	r1, [pc, #728]	; (800ac2c <Loop+0x61c>)
 800a952:	48b7      	ldr	r0, [pc, #732]	; (800ac30 <Loop+0x620>)
 800a954:	f002 fa3e 	bl	800cdd4 <siprintf>
		ssd1306_WriteString(txtBuffer, Font_7x10, White);
 800a958:	4ab6      	ldr	r2, [pc, #728]	; (800ac34 <Loop+0x624>)
 800a95a:	2301      	movs	r3, #1
 800a95c:	ca06      	ldmia	r2, {r1, r2}
 800a95e:	48b4      	ldr	r0, [pc, #720]	; (800ac30 <Loop+0x620>)
 800a960:	f7f9 fd84 	bl	800446c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 800a964:	f7f9 fc6a 	bl	800423c <ssd1306_UpdateScreen>
#endif
#endif

	/** SECTION: DENSO_RAM */
	state = 122;
 800a968:	4bb3      	ldr	r3, [pc, #716]	; (800ac38 <Loop+0x628>)
 800a96a:	227a      	movs	r2, #122	; 0x7a
 800a96c:	701a      	strb	r2, [r3, #0]
#if(DENSORAM_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 30);
 800a96e:	211e      	movs	r1, #30
 800a970:	2000      	movs	r0, #0
 800a972:	f7f9 fda1 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("RAM P2 Measure...          ", Font_7x10, White);
 800a976:	4aaf      	ldr	r2, [pc, #700]	; (800ac34 <Loop+0x624>)
 800a978:	2301      	movs	r3, #1
 800a97a:	ca06      	ldmia	r2, {r1, r2}
 800a97c:	48af      	ldr	r0, [pc, #700]	; (800ac3c <Loop+0x62c>)
 800a97e:	f7f9 fd75 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800a982:	f7f9 fc5b 	bl	800423c <ssd1306_UpdateScreen>
#endif
//	HAL_Delay(1000);
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY)){
 800a986:	e002      	b.n	800a98e <Loop+0x37e>
		HAL_Delay(50);
 800a988:	2032      	movs	r0, #50	; 0x32
 800a98a:	f7fa fcdb 	bl	8005344 <HAL_Delay>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY)){
 800a98e:	4bac      	ldr	r3, [pc, #688]	; (800ac40 <Loop+0x630>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a99c:	d0f4      	beq.n	800a988 <Loop+0x378>
	}
	DENSORAM_SendPageRequest(2);
 800a99e:	2002      	movs	r0, #2
 800a9a0:	f7f6 fc92 	bl	80012c8 <DENSORAM_SendPageRequest>
	DENSORAM_RxITEnable();
 800a9a4:	f7f6 fb1e 	bl	8000fe4 <DENSORAM_RxITEnable>
	HAL_Delay(1250);
 800a9a8:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800a9ac:	f7fa fcca 	bl	8005344 <HAL_Delay>
	DENSORAM_RxITDisable();
 800a9b0:	f7f6 fb52 	bl	8001058 <DENSORAM_RxITDisable>
	dbg_println("\033[1;36mBegin Get RAM Page 2\033[0m");
	_STATUS.Flags.FlagRAM2_RetryTime = 0;
 800a9b4:	4aa3      	ldr	r2, [pc, #652]	; (800ac44 <Loop+0x634>)
 800a9b6:	7d13      	ldrb	r3, [r2, #20]
 800a9b8:	f36f 1305 	bfc	r3, #4, #2
 800a9bc:	7513      	strb	r3, [r2, #20]
	_STATUS.Flags.FlagRAM2_ChecksumError = 0;
 800a9be:	4aa1      	ldr	r2, [pc, #644]	; (800ac44 <Loop+0x634>)
 800a9c0:	7d13      	ldrb	r3, [r2, #20]
 800a9c2:	f36f 0341 	bfc	r3, #1, #1
 800a9c6:	7513      	strb	r3, [r2, #20]
	for(int i = 0; i < RAM_RETRY; i++){
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	623b      	str	r3, [r7, #32]
 800a9cc:	e037      	b.n	800aa3e <Loop+0x42e>
		DENSORAM_RxITEnable();
 800a9ce:	f7f6 fb09 	bl	8000fe4 <DENSORAM_RxITEnable>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	e010      	b.n	800a9fa <Loop+0x3ea>
			if (_RAM.Flags.FlagDataReady == true) {
 800a9d8:	4b9b      	ldr	r3, [pc, #620]	; (800ac48 <Loop+0x638>)
 800a9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d102      	bne.n	800a9ee <Loop+0x3de>
				DENSORAM_RxITDisable();
 800a9e8:	f7f6 fb36 	bl	8001058 <DENSORAM_RxITDisable>
				break;
 800a9ec:	e00a      	b.n	800aa04 <Loop+0x3f4>
			}
			HAL_Delay(1);
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f7fa fca8 	bl	8005344 <HAL_Delay>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	61fb      	str	r3, [r7, #28]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	f240 22ed 	movw	r2, #749	; 0x2ed
 800aa00:	4293      	cmp	r3, r2
 800aa02:	dde9      	ble.n	800a9d8 <Loop+0x3c8>
		}
		if(DENSORAM_Checksum() == true){
 800aa04:	f7f6 fc7e 	bl	8001304 <DENSORAM_Checksum>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d11b      	bne.n	800aa46 <Loop+0x436>
			break;
		}
		else{
			_STATUS.Flags.FlagRAM2_ChecksumError = 1;
 800aa0e:	4a8d      	ldr	r2, [pc, #564]	; (800ac44 <Loop+0x634>)
 800aa10:	7d13      	ldrb	r3, [r2, #20]
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	7513      	strb	r3, [r2, #20]
		}
		_STATUS.Flags.FlagRAM2_RetryTime++;
 800aa18:	4b8a      	ldr	r3, [pc, #552]	; (800ac44 <Loop+0x634>)
 800aa1a:	7d1b      	ldrb	r3, [r3, #20]
 800aa1c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	3301      	adds	r3, #1
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	b2d9      	uxtb	r1, r3
 800aa2a:	4a86      	ldr	r2, [pc, #536]	; (800ac44 <Loop+0x634>)
 800aa2c:	7d13      	ldrb	r3, [r2, #20]
 800aa2e:	f361 1305 	bfi	r3, r1, #4, #2
 800aa32:	7513      	strb	r3, [r2, #20]
		DENSORAM_RxITDisable();
 800aa34:	f7f6 fb10 	bl	8001058 <DENSORAM_RxITDisable>
	for(int i = 0; i < RAM_RETRY; i++){
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	623b      	str	r3, [r7, #32]
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	ddc4      	ble.n	800a9ce <Loop+0x3be>
 800aa44:	e000      	b.n	800aa48 <Loop+0x438>
			break;
 800aa46:	bf00      	nop
	}
	HAL_IWDG_Refresh(&hiwdg);
 800aa48:	4880      	ldr	r0, [pc, #512]	; (800ac4c <Loop+0x63c>)
 800aa4a:	f7fc fd56 	bl	80074fa <HAL_IWDG_Refresh>

	_DATA.flag.FlagRAM2Error = _RAM.Flags.FlagOverrunError;
 800aa4e:	4b7e      	ldr	r3, [pc, #504]	; (800ac48 <Loop+0x638>)
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800aa58:	b2d9      	uxtb	r1, r3
 800aa5a:	4a73      	ldr	r2, [pc, #460]	; (800ac28 <Loop+0x618>)
 800aa5c:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800aa60:	f361 0382 	bfi	r3, r1, #2, #1
 800aa64:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	_STATUS.Flags.FlagRAM2_FrameError = _RAM.Flags.FlagFrameError;
 800aa68:	4b77      	ldr	r3, [pc, #476]	; (800ac48 <Loop+0x638>)
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800aa72:	b2d9      	uxtb	r1, r3
 800aa74:	4a73      	ldr	r2, [pc, #460]	; (800ac44 <Loop+0x634>)
 800aa76:	7d13      	ldrb	r3, [r2, #20]
 800aa78:	f361 0382 	bfi	r3, r1, #2, #1
 800aa7c:	7513      	strb	r3, [r2, #20]
	_STATUS.Flags.FlagRAM2_NoiseError = _RAM.Flags.FlagNoiseError;
 800aa7e:	4b72      	ldr	r3, [pc, #456]	; (800ac48 <Loop+0x638>)
 800aa80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aa88:	b2d9      	uxtb	r1, r3
 800aa8a:	4a6e      	ldr	r2, [pc, #440]	; (800ac44 <Loop+0x634>)
 800aa8c:	7d13      	ldrb	r3, [r2, #20]
 800aa8e:	f361 03c3 	bfi	r3, r1, #3, #1
 800aa92:	7513      	strb	r3, [r2, #20]

	for(int i = 0; i < 129; i++){
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	e019      	b.n	800aace <Loop+0x4be>
		_DATA.ram2[i] = _RAM.RxBuffer[i];
 800aa9a:	4a6b      	ldr	r2, [pc, #428]	; (800ac48 <Loop+0x638>)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	3305      	adds	r3, #5
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b2d9      	uxtb	r1, r3
 800aaa6:	4a60      	ldr	r2, [pc, #384]	; (800ac28 <Loop+0x618>)
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	4413      	add	r3, r2
 800aaac:	3368      	adds	r3, #104	; 0x68
 800aaae:	460a      	mov	r2, r1
 800aab0:	701a      	strb	r2, [r3, #0]
		sprintf(debugBuffer,"%02x,",_RAM.RxBuffer[i]);
 800aab2:	4a65      	ldr	r2, [pc, #404]	; (800ac48 <Loop+0x638>)
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	4413      	add	r3, r2
 800aab8:	3305      	adds	r3, #5
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	461a      	mov	r2, r3
 800aac0:	4963      	ldr	r1, [pc, #396]	; (800ac50 <Loop+0x640>)
 800aac2:	4864      	ldr	r0, [pc, #400]	; (800ac54 <Loop+0x644>)
 800aac4:	f002 f986 	bl	800cdd4 <siprintf>
	for(int i = 0; i < 129; i++){
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	3301      	adds	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	dde2      	ble.n	800aa9a <Loop+0x48a>
		dbg_print(debugBuffer);
	}

	_DATA.ram2_length = _RAM.RAMIndex;
 800aad4:	4b5c      	ldr	r3, [pc, #368]	; (800ac48 <Loop+0x638>)
 800aad6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800aada:	b29b      	uxth	r3, r3
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	4b52      	ldr	r3, [pc, #328]	; (800ac28 <Loop+0x618>)
 800aae0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	sprintf((char*)debugBuffer,"Ram Data got %d bytes",_DATA.ram2_length);
 800aae4:	4b50      	ldr	r3, [pc, #320]	; (800ac28 <Loop+0x618>)
 800aae6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800aaea:	461a      	mov	r2, r3
 800aaec:	495a      	ldr	r1, [pc, #360]	; (800ac58 <Loop+0x648>)
 800aaee:	4859      	ldr	r0, [pc, #356]	; (800ac54 <Loop+0x644>)
 800aaf0:	f002 f970 	bl	800cdd4 <siprintf>
	dbg_println(debugBuffer);

	state = 123;
 800aaf4:	4b50      	ldr	r3, [pc, #320]	; (800ac38 <Loop+0x628>)
 800aaf6:	227b      	movs	r2, #123	; 0x7b
 800aaf8:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 30);
 800aafa:	211e      	movs	r1, #30
 800aafc:	2000      	movs	r0, #0
 800aafe:	f7f9 fcdb 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("RAM P3 Measure...       ", Font_7x10, White);
 800ab02:	4a4c      	ldr	r2, [pc, #304]	; (800ac34 <Loop+0x624>)
 800ab04:	2301      	movs	r3, #1
 800ab06:	ca06      	ldmia	r2, {r1, r2}
 800ab08:	4854      	ldr	r0, [pc, #336]	; (800ac5c <Loop+0x64c>)
 800ab0a:	f7f9 fcaf 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800ab0e:	f7f9 fb95 	bl	800423c <ssd1306_UpdateScreen>
#endif
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY)){
 800ab12:	e002      	b.n	800ab1a <Loop+0x50a>
		HAL_Delay(50);
 800ab14:	2032      	movs	r0, #50	; 0x32
 800ab16:	f7fa fc15 	bl	8005344 <HAL_Delay>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY)){
 800ab1a:	4b49      	ldr	r3, [pc, #292]	; (800ac40 <Loop+0x630>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab28:	d0f4      	beq.n	800ab14 <Loop+0x504>
	}
	DENSORAM_SendPageRequest(3);
 800ab2a:	2003      	movs	r0, #3
 800ab2c:	f7f6 fbcc 	bl	80012c8 <DENSORAM_SendPageRequest>
	DENSORAM_RxITEnable();
 800ab30:	f7f6 fa58 	bl	8000fe4 <DENSORAM_RxITEnable>
	HAL_Delay(1250);
 800ab34:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800ab38:	f7fa fc04 	bl	8005344 <HAL_Delay>
	DENSORAM_RxITDisable();
 800ab3c:	f7f6 fa8c 	bl	8001058 <DENSORAM_RxITDisable>
	dbg_println("\033[1;36mBegin Get RAM Page 3\033[0m");
	_STATUS.Flags.FlagRAM3_RetryTime = 0;
 800ab40:	4a40      	ldr	r2, [pc, #256]	; (800ac44 <Loop+0x634>)
 800ab42:	7d53      	ldrb	r3, [r2, #21]
 800ab44:	f36f 0342 	bfc	r3, #1, #2
 800ab48:	7553      	strb	r3, [r2, #21]
	_STATUS.Flags.FlagRAM3_ChecksumError = 0;
 800ab4a:	4a3e      	ldr	r2, [pc, #248]	; (800ac44 <Loop+0x634>)
 800ab4c:	7d13      	ldrb	r3, [r2, #20]
 800ab4e:	f36f 1386 	bfc	r3, #6, #1
 800ab52:	7513      	strb	r3, [r2, #20]
	for(int i = 0; i < RAM_RETRY; i++){
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e037      	b.n	800abca <Loop+0x5ba>
		DENSORAM_RxITEnable();
 800ab5a:	f7f6 fa43 	bl	8000fe4 <DENSORAM_RxITEnable>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800ab5e:	2300      	movs	r3, #0
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	e010      	b.n	800ab86 <Loop+0x576>
			if (_RAM.Flags.FlagDataReady == true) {
 800ab64:	4b38      	ldr	r3, [pc, #224]	; (800ac48 <Loop+0x638>)
 800ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d102      	bne.n	800ab7a <Loop+0x56a>
				DENSORAM_RxITDisable();
 800ab74:	f7f6 fa70 	bl	8001058 <DENSORAM_RxITDisable>
				break;
 800ab78:	e00a      	b.n	800ab90 <Loop+0x580>
			}
			HAL_Delay(1);
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f7fa fbe2 	bl	8005344 <HAL_Delay>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	3301      	adds	r3, #1
 800ab84:	613b      	str	r3, [r7, #16]
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	dde9      	ble.n	800ab64 <Loop+0x554>
		}
		if(DENSORAM_Checksum() == true){
 800ab90:	f7f6 fbb8 	bl	8001304 <DENSORAM_Checksum>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d11b      	bne.n	800abd2 <Loop+0x5c2>
			break;
		}
		else{
			_STATUS.Flags.FlagRAM3_ChecksumError = 1;
 800ab9a:	4a2a      	ldr	r2, [pc, #168]	; (800ac44 <Loop+0x634>)
 800ab9c:	7d13      	ldrb	r3, [r2, #20]
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba2:	7513      	strb	r3, [r2, #20]
		}
		_STATUS.Flags.FlagRAM3_RetryTime++;
 800aba4:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <Loop+0x634>)
 800aba6:	7d5b      	ldrb	r3, [r3, #21]
 800aba8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800abac:	b2db      	uxtb	r3, r3
 800abae:	3301      	adds	r3, #1
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	b2d9      	uxtb	r1, r3
 800abb6:	4a23      	ldr	r2, [pc, #140]	; (800ac44 <Loop+0x634>)
 800abb8:	7d53      	ldrb	r3, [r2, #21]
 800abba:	f361 0342 	bfi	r3, r1, #1, #2
 800abbe:	7553      	strb	r3, [r2, #21]
		DENSORAM_RxITDisable();
 800abc0:	f7f6 fa4a 	bl	8001058 <DENSORAM_RxITDisable>
	for(int i = 0; i < RAM_RETRY; i++){
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	3301      	adds	r3, #1
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	ddc4      	ble.n	800ab5a <Loop+0x54a>
 800abd0:	e000      	b.n	800abd4 <Loop+0x5c4>
			break;
 800abd2:	bf00      	nop
	}
	HAL_IWDG_Refresh(&hiwdg);
 800abd4:	481d      	ldr	r0, [pc, #116]	; (800ac4c <Loop+0x63c>)
 800abd6:	f7fc fc90 	bl	80074fa <HAL_IWDG_Refresh>

	_DATA.flag.FlagRAM3Error = _RAM.Flags.FlagOverrunError;
 800abda:	4b1b      	ldr	r3, [pc, #108]	; (800ac48 <Loop+0x638>)
 800abdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800abe4:	b2d9      	uxtb	r1, r3
 800abe6:	4a10      	ldr	r2, [pc, #64]	; (800ac28 <Loop+0x618>)
 800abe8:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800abec:	f361 03c3 	bfi	r3, r1, #3, #1
 800abf0:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	_STATUS.Flags.FlagRAM3_FrameError = _RAM.Flags.FlagFrameError;
 800abf4:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <Loop+0x638>)
 800abf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800abfe:	b2d9      	uxtb	r1, r3
 800ac00:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <Loop+0x634>)
 800ac02:	7d13      	ldrb	r3, [r2, #20]
 800ac04:	f361 13c7 	bfi	r3, r1, #7, #1
 800ac08:	7513      	strb	r3, [r2, #20]
	_STATUS.Flags.FlagRAM3_NoiseError = _RAM.Flags.FlagNoiseError;
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <Loop+0x638>)
 800ac0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ac14:	b2d9      	uxtb	r1, r3
 800ac16:	4a0b      	ldr	r2, [pc, #44]	; (800ac44 <Loop+0x634>)
 800ac18:	7d53      	ldrb	r3, [r2, #21]
 800ac1a:	f361 0300 	bfi	r3, r1, #0, #1
 800ac1e:	7553      	strb	r3, [r2, #21]

	for(int i = 0; i < 129; i++){
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	e036      	b.n	800ac94 <Loop+0x684>
 800ac26:	bf00      	nop
 800ac28:	20001ee8 	.word	0x20001ee8
 800ac2c:	08011520 	.word	0x08011520
 800ac30:	20001d38 	.word	0x20001d38
 800ac34:	20000000 	.word	0x20000000
 800ac38:	20001e39 	.word	0x20001e39
 800ac3c:	08011530 	.word	0x08011530
 800ac40:	20001b34 	.word	0x20001b34
 800ac44:	200026b8 	.word	0x200026b8
 800ac48:	20000d14 	.word	0x20000d14
 800ac4c:	20001a40 	.word	0x20001a40
 800ac50:	0801154c 	.word	0x0801154c
 800ac54:	20001c38 	.word	0x20001c38
 800ac58:	08011554 	.word	0x08011554
 800ac5c:	0801156c 	.word	0x0801156c
		_DATA.ram3[i] = _RAM.RxBuffer[i];
 800ac60:	4a9a      	ldr	r2, [pc, #616]	; (800aecc <Loop+0x8bc>)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	4413      	add	r3, r2
 800ac66:	3305      	adds	r3, #5
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	b2d9      	uxtb	r1, r3
 800ac6c:	4a98      	ldr	r2, [pc, #608]	; (800aed0 <Loop+0x8c0>)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	33e9      	adds	r3, #233	; 0xe9
 800ac74:	460a      	mov	r2, r1
 800ac76:	701a      	strb	r2, [r3, #0]
		sprintf((char*)debugBuffer,"%02x,",_RAM.RxBuffer[i]);
 800ac78:	4a94      	ldr	r2, [pc, #592]	; (800aecc <Loop+0x8bc>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3305      	adds	r3, #5
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	4993      	ldr	r1, [pc, #588]	; (800aed4 <Loop+0x8c4>)
 800ac88:	4893      	ldr	r0, [pc, #588]	; (800aed8 <Loop+0x8c8>)
 800ac8a:	f002 f8a3 	bl	800cdd4 <siprintf>
	for(int i = 0; i < 129; i++){
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b80      	cmp	r3, #128	; 0x80
 800ac98:	dde2      	ble.n	800ac60 <Loop+0x650>
		dbg_print(debugBuffer);
	}

	_DATA.ram3_length = _RAM.RAMIndex;
 800ac9a:	4b8c      	ldr	r3, [pc, #560]	; (800aecc <Loop+0x8bc>)
 800ac9c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	4b8a      	ldr	r3, [pc, #552]	; (800aed0 <Loop+0x8c0>)
 800aca6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	sprintf((char*)debugBuffer,"Ram Data got %d bytes",_DATA.ram3_length);
 800acaa:	4b89      	ldr	r3, [pc, #548]	; (800aed0 <Loop+0x8c0>)
 800acac:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800acb0:	461a      	mov	r2, r3
 800acb2:	498a      	ldr	r1, [pc, #552]	; (800aedc <Loop+0x8cc>)
 800acb4:	4888      	ldr	r0, [pc, #544]	; (800aed8 <Loop+0x8c8>)
 800acb6:	f002 f88d 	bl	800cdd4 <siprintf>
	dbg_println(debugBuffer);

	state = 124;
 800acba:	4b89      	ldr	r3, [pc, #548]	; (800aee0 <Loop+0x8d0>)
 800acbc:	227c      	movs	r2, #124	; 0x7c
 800acbe:	701a      	strb	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 30);
 800acc0:	211e      	movs	r1, #30
 800acc2:	2000      	movs	r0, #0
 800acc4:	f7f9 fbf8 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("RAM P4 Measure...         ", Font_7x10, White);
 800acc8:	4a86      	ldr	r2, [pc, #536]	; (800aee4 <Loop+0x8d4>)
 800acca:	2301      	movs	r3, #1
 800accc:	ca06      	ldmia	r2, {r1, r2}
 800acce:	4886      	ldr	r0, [pc, #536]	; (800aee8 <Loop+0x8d8>)
 800acd0:	f7f9 fbcc 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800acd4:	f7f9 fab2 	bl	800423c <ssd1306_UpdateScreen>
#endif
	DENSORAM_SendPageRequest(4);
 800acd8:	2004      	movs	r0, #4
 800acda:	f7f6 faf5 	bl	80012c8 <DENSORAM_SendPageRequest>
	DENSORAM_RxITEnable();
 800acde:	f7f6 f981 	bl	8000fe4 <DENSORAM_RxITEnable>
	HAL_Delay(1250);
 800ace2:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800ace6:	f7fa fb2d 	bl	8005344 <HAL_Delay>
	DENSORAM_RxITDisable();
 800acea:	f7f6 f9b5 	bl	8001058 <DENSORAM_RxITDisable>
	dbg_println("\033[1;36mBegin Get RAM Page 4\033[0m");
	_STATUS.Flags.FlagRAM4_RetryTime = 0;
 800acee:	4a7f      	ldr	r2, [pc, #508]	; (800aeec <Loop+0x8dc>)
 800acf0:	7d53      	ldrb	r3, [r2, #21]
 800acf2:	f36f 1387 	bfc	r3, #6, #2
 800acf6:	7553      	strb	r3, [r2, #21]
	_STATUS.Flags.FlagRAM4_ChecksumError = 0;
 800acf8:	4a7c      	ldr	r2, [pc, #496]	; (800aeec <Loop+0x8dc>)
 800acfa:	7d53      	ldrb	r3, [r2, #21]
 800acfc:	f36f 03c3 	bfc	r3, #3, #1
 800ad00:	7553      	strb	r3, [r2, #21]
	for(int i = 0; i < RAM_RETRY; i++){
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
 800ad06:	e037      	b.n	800ad78 <Loop+0x768>
		DENSORAM_RxITEnable();
 800ad08:	f7f6 f96c 	bl	8000fe4 <DENSORAM_RxITEnable>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	607b      	str	r3, [r7, #4]
 800ad10:	e010      	b.n	800ad34 <Loop+0x724>
			if (_RAM.Flags.FlagDataReady == true) {
 800ad12:	4b6e      	ldr	r3, [pc, #440]	; (800aecc <Loop+0x8bc>)
 800ad14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d102      	bne.n	800ad28 <Loop+0x718>
				DENSORAM_RxITDisable();
 800ad22:	f7f6 f999 	bl	8001058 <DENSORAM_RxITDisable>
				break;
 800ad26:	e00a      	b.n	800ad3e <Loop+0x72e>
			}
			HAL_Delay(1);
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f7fa fb0b 	bl	8005344 <HAL_Delay>
		for (int i = 0; i < RAM_TIMEOUT; i++) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3301      	adds	r3, #1
 800ad32:	607b      	str	r3, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	dde9      	ble.n	800ad12 <Loop+0x702>
		}
		if(DENSORAM_Checksum() == true){
 800ad3e:	f7f6 fae1 	bl	8001304 <DENSORAM_Checksum>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11b      	bne.n	800ad80 <Loop+0x770>
			break;
		}
		else{
			_STATUS.Flags.FlagRAM4_ChecksumError = 1;
 800ad48:	4a68      	ldr	r2, [pc, #416]	; (800aeec <Loop+0x8dc>)
 800ad4a:	7d53      	ldrb	r3, [r2, #21]
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	7553      	strb	r3, [r2, #21]
		}
		_STATUS.Flags.FlagRAM4_RetryTime++;
 800ad52:	4b66      	ldr	r3, [pc, #408]	; (800aeec <Loop+0x8dc>)
 800ad54:	7d5b      	ldrb	r3, [r3, #21]
 800ad56:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	b2d9      	uxtb	r1, r3
 800ad64:	4a61      	ldr	r2, [pc, #388]	; (800aeec <Loop+0x8dc>)
 800ad66:	7d53      	ldrb	r3, [r2, #21]
 800ad68:	f361 1387 	bfi	r3, r1, #6, #2
 800ad6c:	7553      	strb	r3, [r2, #21]
		DENSORAM_RxITDisable();
 800ad6e:	f7f6 f973 	bl	8001058 <DENSORAM_RxITDisable>
	for(int i = 0; i < RAM_RETRY; i++){
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	3301      	adds	r3, #1
 800ad76:	60bb      	str	r3, [r7, #8]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	ddc4      	ble.n	800ad08 <Loop+0x6f8>
 800ad7e:	e000      	b.n	800ad82 <Loop+0x772>
			break;
 800ad80:	bf00      	nop
	}
	HAL_IWDG_Refresh(&hiwdg);
 800ad82:	485b      	ldr	r0, [pc, #364]	; (800aef0 <Loop+0x8e0>)
 800ad84:	f7fc fbb9 	bl	80074fa <HAL_IWDG_Refresh>
	_DATA.flag.FlagRAM4Error = _RAM.Flags.FlagOverrunError;
 800ad88:	4b50      	ldr	r3, [pc, #320]	; (800aecc <Loop+0x8bc>)
 800ad8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ad92:	b2d9      	uxtb	r1, r3
 800ad94:	4a4e      	ldr	r2, [pc, #312]	; (800aed0 <Loop+0x8c0>)
 800ad96:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800ad9a:	f361 1304 	bfi	r3, r1, #4, #1
 800ad9e:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

	for(int i = 0; i < 129; i++){
 800ada2:	2300      	movs	r3, #0
 800ada4:	603b      	str	r3, [r7, #0]
 800ada6:	e01a      	b.n	800adde <Loop+0x7ce>
		_DATA.ram4[i] = _RAM.RxBuffer[i];
 800ada8:	4a48      	ldr	r2, [pc, #288]	; (800aecc <Loop+0x8bc>)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	4413      	add	r3, r2
 800adae:	3305      	adds	r3, #5
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	b2d9      	uxtb	r1, r3
 800adb4:	4a46      	ldr	r2, [pc, #280]	; (800aed0 <Loop+0x8c0>)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800adbe:	460a      	mov	r2, r1
 800adc0:	701a      	strb	r2, [r3, #0]
		sprintf(debugBuffer,"%02x,",_RAM.RxBuffer[i]);
 800adc2:	4a42      	ldr	r2, [pc, #264]	; (800aecc <Loop+0x8bc>)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	4413      	add	r3, r2
 800adc8:	3305      	adds	r3, #5
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	461a      	mov	r2, r3
 800add0:	4940      	ldr	r1, [pc, #256]	; (800aed4 <Loop+0x8c4>)
 800add2:	4841      	ldr	r0, [pc, #260]	; (800aed8 <Loop+0x8c8>)
 800add4:	f001 fffe 	bl	800cdd4 <siprintf>
	for(int i = 0; i < 129; i++){
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	3301      	adds	r3, #1
 800addc:	603b      	str	r3, [r7, #0]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b80      	cmp	r3, #128	; 0x80
 800ade2:	dde1      	ble.n	800ada8 <Loop+0x798>
		dbg_print(debugBuffer);
	}
	_DATA.ram4_length = _RAM.RAMIndex;
 800ade4:	4b39      	ldr	r3, [pc, #228]	; (800aecc <Loop+0x8bc>)
 800ade6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800adea:	b29b      	uxth	r3, r3
 800adec:	b2da      	uxtb	r2, r3
 800adee:	4b38      	ldr	r3, [pc, #224]	; (800aed0 <Loop+0x8c0>)
 800adf0:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	sprintf((char*)debugBuffer,"Ram Data got %d bytes",_DATA.ram4_length);
 800adf4:	4b36      	ldr	r3, [pc, #216]	; (800aed0 <Loop+0x8c0>)
 800adf6:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 800adfa:	461a      	mov	r2, r3
 800adfc:	4937      	ldr	r1, [pc, #220]	; (800aedc <Loop+0x8cc>)
 800adfe:	4836      	ldr	r0, [pc, #216]	; (800aed8 <Loop+0x8c8>)
 800ae00:	f001 ffe8 	bl	800cdd4 <siprintf>
	dbg_println(debugBuffer);
	DENSORAM_SendPageRequest(2);
 800ae04:	2002      	movs	r0, #2
 800ae06:	f7f6 fa5f 	bl	80012c8 <DENSORAM_SendPageRequest>
	DENSORAM_RxITEnable();
 800ae0a:	f7f6 f8eb 	bl	8000fe4 <DENSORAM_RxITEnable>
	HAL_Delay(500);
 800ae0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ae12:	f7fa fa97 	bl	8005344 <HAL_Delay>
	DENSORAM_RxITDisable();
 800ae16:	f7f6 f91f 	bl	8001058 <DENSORAM_RxITDisable>
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 30);
 800ae1a:	211e      	movs	r1, #30
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f7f9 fb4b 	bl	80044b8 <ssd1306_SetCursor>
	sprintf((char*)txtBuffer,"RAM %d, %d, %d      ",_DATA.ram2_length,_DATA.ram3_length,_DATA.ram4_length);
 800ae22:	4b2b      	ldr	r3, [pc, #172]	; (800aed0 <Loop+0x8c0>)
 800ae24:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b29      	ldr	r3, [pc, #164]	; (800aed0 <Loop+0x8c0>)
 800ae2c:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800ae30:	4619      	mov	r1, r3
 800ae32:	4b27      	ldr	r3, [pc, #156]	; (800aed0 <Loop+0x8c0>)
 800ae34:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	492d      	ldr	r1, [pc, #180]	; (800aef4 <Loop+0x8e4>)
 800ae3e:	482e      	ldr	r0, [pc, #184]	; (800aef8 <Loop+0x8e8>)
 800ae40:	f001 ffc8 	bl	800cdd4 <siprintf>
	ssd1306_WriteString(txtBuffer, Font_7x10, White);
 800ae44:	4a27      	ldr	r2, [pc, #156]	; (800aee4 <Loop+0x8d4>)
 800ae46:	2301      	movs	r3, #1
 800ae48:	ca06      	ldmia	r2, {r1, r2}
 800ae4a:	482b      	ldr	r0, [pc, #172]	; (800aef8 <Loop+0x8e8>)
 800ae4c:	f7f9 fb0e 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800ae50:	f7f9 f9f4 	bl	800423c <ssd1306_UpdateScreen>

#endif


	/** SECTION: UC200 */
		state = 13;
 800ae54:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <Loop+0x8d0>)
 800ae56:	220d      	movs	r2, #13
 800ae58:	701a      	strb	r2, [r3, #0]
#if(UC200_ENABLE)
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 40);
 800ae5a:	2128      	movs	r1, #40	; 0x28
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f9 fb2b 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Begin to Send       ", Font_7x10, White);
 800ae62:	4a20      	ldr	r2, [pc, #128]	; (800aee4 <Loop+0x8d4>)
 800ae64:	2301      	movs	r3, #1
 800ae66:	ca06      	ldmia	r2, {r1, r2}
 800ae68:	4824      	ldr	r0, [pc, #144]	; (800aefc <Loop+0x8ec>)
 800ae6a:	f7f9 faff 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800ae6e:	f7f9 f9e5 	bl	800423c <ssd1306_UpdateScreen>
#endif
	dbg_println("\033[1;36mBegin Present Publish.\033[0m");
	HAL_Delay(100);
 800ae72:	2064      	movs	r0, #100	; 0x64
 800ae74:	f7fa fa66 	bl	8005344 <HAL_Delay>
		PackageData();
 800ae78:	f000 fafe 	bl	800b478 <PackageData>
		if (u8check == false) {
 800ae7c:	4b20      	ldr	r3, [pc, #128]	; (800af00 <Loop+0x8f0>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <Loop+0x87a>
			AddPackageToBackup();
 800ae84:	f000 f962 	bl	800b14c <AddPackageToBackup>
 800ae88:	e052      	b.n	800af30 <Loop+0x920>

		} else {
			if (UC200_MQTTPublish((uint8_t*) "iot/rammonitor1", _DATAString) == false) {
 800ae8a:	491e      	ldr	r1, [pc, #120]	; (800af04 <Loop+0x8f4>)
 800ae8c:	481e      	ldr	r0, [pc, #120]	; (800af08 <Loop+0x8f8>)
 800ae8e:	f7f8 fec7 	bl	8003c20 <UC200_MQTTPublish>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f083 0301 	eor.w	r3, r3, #1
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d03c      	beq.n	800af18 <Loop+0x908>
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 40);
 800ae9e:	2128      	movs	r1, #40	; 0x28
 800aea0:	2000      	movs	r0, #0
 800aea2:	f7f9 fb09 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Send Fail.. Backup       ", Font_7x10, White);
 800aea6:	4a0f      	ldr	r2, [pc, #60]	; (800aee4 <Loop+0x8d4>)
 800aea8:	2301      	movs	r3, #1
 800aeaa:	ca06      	ldmia	r2, {r1, r2}
 800aeac:	4817      	ldr	r0, [pc, #92]	; (800af0c <Loop+0x8fc>)
 800aeae:	f7f9 fadd 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800aeb2:	f7f9 f9c3 	bl	800423c <ssd1306_UpdateScreen>
#endif
				sprintf((char*)debugBuffer,"\033[1;31mPresent Publish Failed. Begin to Write Backup #%d\033[0m",save_index);
 800aeb6:	4b16      	ldr	r3, [pc, #88]	; (800af10 <Loop+0x900>)
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	4915      	ldr	r1, [pc, #84]	; (800af14 <Loop+0x904>)
 800aebe:	4806      	ldr	r0, [pc, #24]	; (800aed8 <Loop+0x8c8>)
 800aec0:	f001 ff88 	bl	800cdd4 <siprintf>
				dbg_println(debugBuffer);
				AddPackageToBackup();
 800aec4:	f000 f942 	bl	800b14c <AddPackageToBackup>
 800aec8:	e032      	b.n	800af30 <Loop+0x920>
 800aeca:	bf00      	nop
 800aecc:	20000d14 	.word	0x20000d14
 800aed0:	20001ee8 	.word	0x20001ee8
 800aed4:	0801154c 	.word	0x0801154c
 800aed8:	20001c38 	.word	0x20001c38
 800aedc:	08011554 	.word	0x08011554
 800aee0:	20001e39 	.word	0x20001e39
 800aee4:	20000000 	.word	0x20000000
 800aee8:	08011588 	.word	0x08011588
 800aeec:	200026b8 	.word	0x200026b8
 800aef0:	20001a40 	.word	0x20001a40
 800aef4:	080115a4 	.word	0x080115a4
 800aef8:	20001d38 	.word	0x20001d38
 800aefc:	080115bc 	.word	0x080115bc
 800af00:	20001e38 	.word	0x20001e38
 800af04:	200020d8 	.word	0x200020d8
 800af08:	080115d4 	.word	0x080115d4
 800af0c:	080115e4 	.word	0x080115e4
 800af10:	20000ce6 	.word	0x20000ce6
 800af14:	08011600 	.word	0x08011600
			}
			else{
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 40);
 800af18:	2128      	movs	r1, #40	; 0x28
 800af1a:	2000      	movs	r0, #0
 800af1c:	f7f9 facc 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Send OK!      ", Font_7x10, White);
 800af20:	4a77      	ldr	r2, [pc, #476]	; (800b100 <Loop+0xaf0>)
 800af22:	2301      	movs	r3, #1
 800af24:	ca06      	ldmia	r2, {r1, r2}
 800af26:	4877      	ldr	r0, [pc, #476]	; (800b104 <Loop+0xaf4>)
 800af28:	f7f9 faa0 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800af2c:	f7f9 f986 	bl	800423c <ssd1306_UpdateScreen>
#endif
				dbg_println("\033[1;32mPresent Publish Success.\033[0m");
			}
		}
		HAL_IWDG_Refresh(&hiwdg);
 800af30:	4875      	ldr	r0, [pc, #468]	; (800b108 <Loop+0xaf8>)
 800af32:	f7fc fae2 	bl	80074fa <HAL_IWDG_Refresh>
		if (save_index > 0) {
 800af36:	4b75      	ldr	r3, [pc, #468]	; (800b10c <Loop+0xafc>)
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d028      	beq.n	800af90 <Loop+0x980>
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 50);
 800af3e:	2132      	movs	r1, #50	; 0x32
 800af40:	2000      	movs	r0, #0
 800af42:	f7f9 fab9 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString("Begin Resend..      ", Font_7x10, White);
 800af46:	4a6e      	ldr	r2, [pc, #440]	; (800b100 <Loop+0xaf0>)
 800af48:	2301      	movs	r3, #1
 800af4a:	ca06      	ldmia	r2, {r1, r2}
 800af4c:	4870      	ldr	r0, [pc, #448]	; (800b110 <Loop+0xb00>)
 800af4e:	f7f9 fa8d 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800af52:	f7f9 f973 	bl	800423c <ssd1306_UpdateScreen>
#endif
			/* After save then resent */
			sprintf((char*)debugBuffer,"\033[1;36mBegin Backup Publish#%d\033[0m",save_index);
 800af56:	4b6d      	ldr	r3, [pc, #436]	; (800b10c <Loop+0xafc>)
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	496d      	ldr	r1, [pc, #436]	; (800b114 <Loop+0xb04>)
 800af5e:	486e      	ldr	r0, [pc, #440]	; (800b118 <Loop+0xb08>)
 800af60:	f001 ff38 	bl	800cdd4 <siprintf>
			dbg_println(debugBuffer);
			memset((char*)_DATAString,0,512);
 800af64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af68:	2100      	movs	r1, #0
 800af6a:	486c      	ldr	r0, [pc, #432]	; (800b11c <Loop+0xb0c>)
 800af6c:	f001 f803 	bl	800bf76 <memset>
			ReadBackup(save_index-1, _DATAString);
 800af70:	4b66      	ldr	r3, [pc, #408]	; (800b10c <Loop+0xafc>)
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	3b01      	subs	r3, #1
 800af76:	4969      	ldr	r1, [pc, #420]	; (800b11c <Loop+0xb0c>)
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 f98d 	bl	800b298 <ReadBackup>
			dbg_print(_DATAString);
			if (UC200_MQTTPublish((uint8_t*) "iot/rammonitor", _DATAString) == true) {
 800af7e:	4967      	ldr	r1, [pc, #412]	; (800b11c <Loop+0xb0c>)
 800af80:	4867      	ldr	r0, [pc, #412]	; (800b120 <Loop+0xb10>)
 800af82:	f7f8 fe4d 	bl	8003c20 <UC200_MQTTPublish>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <Loop+0x980>
				dbg_println("\033[1;33mBackup Publish Success, Decrease decrement\033[0m");
				RemovePackageFromBackup();
 800af8c:	f000 f912 	bl	800b1b4 <RemovePackageFromBackup>
				dbg_println("\033[1;31mBackup Publish Failed, Retain backup data\033[0m");
			}
		}


	u8check = UC200_RTCread(txtBuffer);
 800af90:	4864      	ldr	r0, [pc, #400]	; (800b124 <Loop+0xb14>)
 800af92:	f7f8 f931 	bl	80031f8 <UC200_RTCread>
 800af96:	4603      	mov	r3, r0
 800af98:	461a      	mov	r2, r3
 800af9a:	4b63      	ldr	r3, [pc, #396]	; (800b128 <Loop+0xb18>)
 800af9c:	701a      	strb	r2, [r3, #0]
	u8check &= UC200_ConvertEpochTime((char*) txtBuffer, &(_DATA.timestamp));
 800af9e:	4963      	ldr	r1, [pc, #396]	; (800b12c <Loop+0xb1c>)
 800afa0:	4860      	ldr	r0, [pc, #384]	; (800b124 <Loop+0xb14>)
 800afa2:	f7f8 f951 	bl	8003248 <UC200_ConvertEpochTime>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	4b5f      	ldr	r3, [pc, #380]	; (800b128 <Loop+0xb18>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	4013      	ands	r3, r2
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4b5d      	ldr	r3, [pc, #372]	; (800b128 <Loop+0xb18>)
 800afb4:	701a      	strb	r2, [r3, #0]
	_STATUS.timestamp_end = _DATA.timestamp;
 800afb6:	4b5e      	ldr	r3, [pc, #376]	; (800b130 <Loop+0xb20>)
 800afb8:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800afbc:	4a5d      	ldr	r2, [pc, #372]	; (800b134 <Loop+0xb24>)
 800afbe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	_STATUS.operation_time = _STATUS.timestamp_end - _STATUS.timestamp_begin;
 800afc2:	4b5c      	ldr	r3, [pc, #368]	; (800b134 <Loop+0xb24>)
 800afc4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b5a      	ldr	r3, [pc, #360]	; (800b134 <Loop+0xb24>)
 800afcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	4b57      	ldr	r3, [pc, #348]	; (800b134 <Loop+0xb24>)
 800afd8:	749a      	strb	r2, [r3, #18]
	sprintf((char*) debugBuffer, "\033[1;36mTotal time used is %lds\033[0m",(_STATUS.timestamp_end - _STATUS.timestamp_begin));
 800afda:	4b56      	ldr	r3, [pc, #344]	; (800b134 <Loop+0xb24>)
 800afdc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800afe0:	4b54      	ldr	r3, [pc, #336]	; (800b134 <Loop+0xb24>)
 800afe2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800afe6:	460b      	mov	r3, r1
 800afe8:	4614      	mov	r4, r2
 800afea:	ebb3 030b 	subs.w	r3, r3, fp
 800afee:	eb64 040c 	sbc.w	r4, r4, ip
 800aff2:	461a      	mov	r2, r3
 800aff4:	4623      	mov	r3, r4
 800aff6:	4950      	ldr	r1, [pc, #320]	; (800b138 <Loop+0xb28>)
 800aff8:	4847      	ldr	r0, [pc, #284]	; (800b118 <Loop+0xb08>)
 800affa:	f001 feeb 	bl	800cdd4 <siprintf>
	dbg_println(debugBuffer);
	sprintf((char*) debugBuffer, "\033[1;36mFail Time is %d\033[0m",_STATUS.fail_time);
 800affe:	4b4d      	ldr	r3, [pc, #308]	; (800b134 <Loop+0xb24>)
 800b000:	7c1b      	ldrb	r3, [r3, #16]
 800b002:	461a      	mov	r2, r3
 800b004:	494d      	ldr	r1, [pc, #308]	; (800b13c <Loop+0xb2c>)
 800b006:	4844      	ldr	r0, [pc, #272]	; (800b118 <Loop+0xb08>)
 800b008:	f001 fee4 	bl	800cdd4 <siprintf>
	dbg_println(debugBuffer);
	HAL_IWDG_Refresh(&hiwdg);
 800b00c:	483e      	ldr	r0, [pc, #248]	; (800b108 <Loop+0xaf8>)
 800b00e:	f7fc fa74 	bl	80074fa <HAL_IWDG_Refresh>
	if (_STATUS.fail_time > 5) {
 800b012:	4b48      	ldr	r3, [pc, #288]	; (800b134 <Loop+0xb24>)
 800b014:	7c1b      	ldrb	r3, [r3, #16]
 800b016:	2b05      	cmp	r3, #5
 800b018:	d904      	bls.n	800b024 <Loop+0xa14>
		HAL_Delay(1);
 800b01a:	2001      	movs	r0, #1
 800b01c:	f7fa f992 	bl	8005344 <HAL_Delay>
		NVIC_SystemReset();
 800b020:	f7ff f91c 	bl	800a25c <__NVIC_SystemReset>
	}


	state = 14;
 800b024:	4b46      	ldr	r3, [pc, #280]	; (800b140 <Loop+0xb30>)
 800b026:	220e      	movs	r2, #14
 800b028:	701a      	strb	r2, [r3, #0]
	wait_loop = SENDING_INTERVAL-(_STATUS.timestamp_end - _STATUS.timestamp_begin);
 800b02a:	4b42      	ldr	r3, [pc, #264]	; (800b134 <Loop+0xb24>)
 800b02c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b030:	b29a      	uxth	r2, r3
 800b032:	4b40      	ldr	r3, [pc, #256]	; (800b134 <Loop+0xb24>)
 800b034:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	333c      	adds	r3, #60	; 0x3c
 800b040:	b29b      	uxth	r3, r3
 800b042:	b21a      	sxth	r2, r3
 800b044:	4b3f      	ldr	r3, [pc, #252]	; (800b144 <Loop+0xb34>)
 800b046:	801a      	strh	r2, [r3, #0]
	wait_loop -= 5;
 800b048:	4b3e      	ldr	r3, [pc, #248]	; (800b144 <Loop+0xb34>)
 800b04a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	3b05      	subs	r3, #5
 800b052:	b29b      	uxth	r3, r3
 800b054:	b21a      	sxth	r2, r3
 800b056:	4b3b      	ldr	r3, [pc, #236]	; (800b144 <Loop+0xb34>)
 800b058:	801a      	strh	r2, [r3, #0]
#if(OLED_ENABLE)
	ssd1306_SetCursor(0, 50);
 800b05a:	2132      	movs	r1, #50	; 0x32
 800b05c:	2000      	movs	r0, #0
 800b05e:	f7f9 fa2b 	bl	80044b8 <ssd1306_SetCursor>
	sprintf((char*)txtBuffer,"Time%d s. Fail %d",_STATUS.timestamp_end - _STATUS.timestamp_begin),_STATUS.fail_time;
 800b062:	4b34      	ldr	r3, [pc, #208]	; (800b134 <Loop+0xb24>)
 800b064:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <Loop+0xb24>)
 800b06a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800b06e:	460b      	mov	r3, r1
 800b070:	4614      	mov	r4, r2
 800b072:	ebb3 030b 	subs.w	r3, r3, fp
 800b076:	eb64 040c 	sbc.w	r4, r4, ip
 800b07a:	461a      	mov	r2, r3
 800b07c:	4623      	mov	r3, r4
 800b07e:	4932      	ldr	r1, [pc, #200]	; (800b148 <Loop+0xb38>)
 800b080:	4828      	ldr	r0, [pc, #160]	; (800b124 <Loop+0xb14>)
 800b082:	f001 fea7 	bl	800cdd4 <siprintf>
	ssd1306_WriteString(txtBuffer, Font_7x10, White);
 800b086:	4a1e      	ldr	r2, [pc, #120]	; (800b100 <Loop+0xaf0>)
 800b088:	2301      	movs	r3, #1
 800b08a:	ca06      	ldmia	r2, {r1, r2}
 800b08c:	4825      	ldr	r0, [pc, #148]	; (800b124 <Loop+0xb14>)
 800b08e:	f7f9 f9ed 	bl	800446c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b092:	f7f9 f8d3 	bl	800423c <ssd1306_UpdateScreen>
#endif

//	UC200_EnterSleepMode();
	if(wait_loop < 0){
 800b096:	4b2b      	ldr	r3, [pc, #172]	; (800b144 <Loop+0xb34>)
 800b098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	da03      	bge.n	800b0a8 <Loop+0xa98>
		HAL_Delay(100);
 800b0a0:	2064      	movs	r0, #100	; 0x64
 800b0a2:	f7fa f94f 	bl	8005344 <HAL_Delay>
 800b0a6:	e01d      	b.n	800b0e4 <Loop+0xad4>
	}
	else{
		if(wait_loop > SENDING_INTERVAL){
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <Loop+0xb34>)
 800b0aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0ae:	2b3c      	cmp	r3, #60	; 0x3c
 800b0b0:	dd13      	ble.n	800b0da <Loop+0xaca>
			wait_loop = SENDING_INTERVAL;
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <Loop+0xb34>)
 800b0b4:	223c      	movs	r2, #60	; 0x3c
 800b0b6:	801a      	strh	r2, [r3, #0]
		}
		for(; wait_loop >= 0; wait_loop--){
 800b0b8:	e00f      	b.n	800b0da <Loop+0xaca>
//					ssd1306_SetCursor(0, 50);
//					ssd1306_WriteString(txtBuffer, Font_7x10, White);
//					ssd1306_UpdateScreen();
//				}
//			}
			HAL_Delay(999);
 800b0ba:	f240 30e7 	movw	r0, #999	; 0x3e7
 800b0be:	f7fa f941 	bl	8005344 <HAL_Delay>
			HAL_IWDG_Refresh(&hiwdg);
 800b0c2:	4811      	ldr	r0, [pc, #68]	; (800b108 <Loop+0xaf8>)
 800b0c4:	f7fc fa19 	bl	80074fa <HAL_IWDG_Refresh>
		for(; wait_loop >= 0; wait_loop--){
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <Loop+0xb34>)
 800b0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	b21a      	sxth	r2, r3
 800b0d6:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <Loop+0xb34>)
 800b0d8:	801a      	strh	r2, [r3, #0]
 800b0da:	4b1a      	ldr	r3, [pc, #104]	; (800b144 <Loop+0xb34>)
 800b0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	daea      	bge.n	800b0ba <Loop+0xaaa>
		}
	}
	_DATA.pack_no++;
 800b0e4:	4b12      	ldr	r3, [pc, #72]	; (800b130 <Loop+0xb20>)
 800b0e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	4b10      	ldr	r3, [pc, #64]	; (800b130 <Loop+0xb20>)
 800b0f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
}
 800b0f4:	bf00      	nop
 800b0f6:	3728      	adds	r7, #40	; 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b0fe:	bf00      	nop
 800b100:	20000000 	.word	0x20000000
 800b104:	08011640 	.word	0x08011640
 800b108:	20001a40 	.word	0x20001a40
 800b10c:	20000ce6 	.word	0x20000ce6
 800b110:	08011650 	.word	0x08011650
 800b114:	08011668 	.word	0x08011668
 800b118:	20001c38 	.word	0x20001c38
 800b11c:	200020d8 	.word	0x200020d8
 800b120:	0801168c 	.word	0x0801168c
 800b124:	20001d38 	.word	0x20001d38
 800b128:	20001e38 	.word	0x20001e38
 800b12c:	20001f30 	.word	0x20001f30
 800b130:	20001ee8 	.word	0x20001ee8
 800b134:	200026b8 	.word	0x200026b8
 800b138:	0801169c 	.word	0x0801169c
 800b13c:	080116c0 	.word	0x080116c0
 800b140:	20001e39 	.word	0x20001e39
 800b144:	20001ec2 	.word	0x20001ec2
 800b148:	080116dc 	.word	0x080116dc

0800b14c <AddPackageToBackup>:


uint16_t save_limit = 0;
uint16_t save_index = 0;

bool AddPackageToBackup(){
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
	save_index++;
 800b150:	4b13      	ldr	r3, [pc, #76]	; (800b1a0 <AddPackageToBackup+0x54>)
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	b29a      	uxth	r2, r3
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <AddPackageToBackup+0x54>)
 800b15a:	801a      	strh	r2, [r3, #0]
	if(save_limit < FILE_LIMIT) save_limit++;
 800b15c:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <AddPackageToBackup+0x58>)
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b164:	d205      	bcs.n	800b172 <AddPackageToBackup+0x26>
 800b166:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <AddPackageToBackup+0x58>)
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	3301      	adds	r3, #1
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <AddPackageToBackup+0x58>)
 800b170:	801a      	strh	r2, [r3, #0]
	WRITE_SAVEINDEX(save_index);
 800b172:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <AddPackageToBackup+0x54>)
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	2100      	movs	r1, #0
 800b17a:	480b      	ldr	r0, [pc, #44]	; (800b1a8 <AddPackageToBackup+0x5c>)
 800b17c:	f7fd fce2 	bl	8008b44 <HAL_RTCEx_BKUPWrite>
	_STATUS.fail_time++;
 800b180:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <AddPackageToBackup+0x60>)
 800b182:	7c1b      	ldrb	r3, [r3, #16]
 800b184:	3301      	adds	r3, #1
 800b186:	b2da      	uxtb	r2, r3
 800b188:	4b08      	ldr	r3, [pc, #32]	; (800b1ac <AddPackageToBackup+0x60>)
 800b18a:	741a      	strb	r2, [r3, #16]
	return WriteBackup(save_index, _DATAString);
 800b18c:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <AddPackageToBackup+0x54>)
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	4907      	ldr	r1, [pc, #28]	; (800b1b0 <AddPackageToBackup+0x64>)
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f840 	bl	800b218 <WriteBackup>
 800b198:	4603      	mov	r3, r0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000ce6 	.word	0x20000ce6
 800b1a4:	20000ce4 	.word	0x20000ce4
 800b1a8:	20001a50 	.word	0x20001a50
 800b1ac:	200026b8 	.word	0x200026b8
 800b1b0:	200020d8 	.word	0x200020d8

0800b1b4 <RemovePackageFromBackup>:

bool RemovePackageFromBackup(){
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
	save_index--;
 800b1b8:	4b13      	ldr	r3, [pc, #76]	; (800b208 <RemovePackageFromBackup+0x54>)
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	4b11      	ldr	r3, [pc, #68]	; (800b208 <RemovePackageFromBackup+0x54>)
 800b1c2:	801a      	strh	r2, [r3, #0]
	save_limit--;
 800b1c4:	4b11      	ldr	r3, [pc, #68]	; (800b20c <RemovePackageFromBackup+0x58>)
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <RemovePackageFromBackup+0x58>)
 800b1ce:	801a      	strh	r2, [r3, #0]
	WRITE_SAVEINDEX(save_index);
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <RemovePackageFromBackup+0x54>)
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	480d      	ldr	r0, [pc, #52]	; (800b210 <RemovePackageFromBackup+0x5c>)
 800b1da:	f7fd fcb3 	bl	8008b44 <HAL_RTCEx_BKUPWrite>
	if(_STATUS.fail_time > 0) _STATUS.fail_time--;
 800b1de:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <RemovePackageFromBackup+0x60>)
 800b1e0:	7c1b      	ldrb	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d005      	beq.n	800b1f2 <RemovePackageFromBackup+0x3e>
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <RemovePackageFromBackup+0x60>)
 800b1e8:	7c1b      	ldrb	r3, [r3, #16]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <RemovePackageFromBackup+0x60>)
 800b1f0:	741a      	strb	r2, [r3, #16]
	if(save_limit <= 0){
 800b1f2:	4b06      	ldr	r3, [pc, #24]	; (800b20c <RemovePackageFromBackup+0x58>)
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <RemovePackageFromBackup+0x4c>
		save_index = 0;
 800b1fa:	4b03      	ldr	r3, [pc, #12]	; (800b208 <RemovePackageFromBackup+0x54>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	801a      	strh	r2, [r3, #0]
	}
	return true;
 800b200:	2301      	movs	r3, #1
}
 800b202:	4618      	mov	r0, r3
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000ce6 	.word	0x20000ce6
 800b20c:	20000ce4 	.word	0x20000ce4
 800b210:	20001a50 	.word	0x20001a50
 800b214:	200026b8 	.word	0x200026b8

0800b218 <WriteBackup>:
 * [USER FUNCTION] Automatically backup your data
 * @param save_index Your save index
 * @param data Your data string
 * @return Process complete status.
 */
bool WriteBackup(int32_t save_index, uint8_t* data){
 800b218:	b580      	push	{r7, lr}
 800b21a:	b0c2      	sub	sp, #264	; 0x108
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	1d3b      	adds	r3, r7, #4
 800b220:	6018      	str	r0, [r3, #0]
 800b222:	463b      	mov	r3, r7
 800b224:	6019      	str	r1, [r3, #0]
	bool check;
	uint32_t key;
	if(save_index <= 0){
 800b226:	1d3b      	adds	r3, r7, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dc01      	bgt.n	800b232 <WriteBackup+0x1a>
		return false;
 800b22e:	2300      	movs	r3, #0
 800b230:	e02a      	b.n	800b288 <WriteBackup+0x70>
	}

	uint8_t filename[256] = {0};
 800b232:	f107 0308 	add.w	r3, r7, #8
 800b236:	4618      	mov	r0, r3
 800b238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23c:	461a      	mov	r2, r3
 800b23e:	2100      	movs	r1, #0
 800b240:	f000 fe99 	bl	800bf76 <memset>
	//Write String
	//If exceed file limit, delete oldest one.
	if(save_index > FILE_LIMIT){
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b24c:	dd0e      	ble.n	800b26c <WriteBackup+0x54>
		sprintf((char*)filename, "BACKUP%03ld", save_index-FILE_LIMIT);
 800b24e:	1d3b      	adds	r3, r7, #4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	490e      	ldr	r1, [pc, #56]	; (800b294 <WriteBackup+0x7c>)
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 fdb9 	bl	800cdd4 <siprintf>
		UC200_FileDelete(filename);
 800b262:	f107 0308 	add.w	r3, r7, #8
 800b266:	4618      	mov	r0, r3
 800b268:	f7f8 feb0 	bl	8003fcc <UC200_FileDelete>
	}

	//Write to new file.
	sprintf((char*)filename,"BACKUP%03ld",save_index);
 800b26c:	1d3b      	adds	r3, r7, #4
 800b26e:	f107 0008 	add.w	r0, r7, #8
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	4907      	ldr	r1, [pc, #28]	; (800b294 <WriteBackup+0x7c>)
 800b276:	f001 fdad 	bl	800cdd4 <siprintf>
	UC200_FileNew(filename, data);
 800b27a:	463b      	mov	r3, r7
 800b27c:	f107 0208 	add.w	r2, r7, #8
 800b280:	6819      	ldr	r1, [r3, #0]
 800b282:	4610      	mov	r0, r2
 800b284:	f7f8 fd52 	bl	8003d2c <UC200_FileNew>
}
 800b288:	4618      	mov	r0, r3
 800b28a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	080116f0 	.word	0x080116f0

0800b298 <ReadBackup>:
 * [USER FUNCTION] Read backup your data .
 * @param save_index Your save index
 * @param data String that store read data
 * @return Process complete status.
 */
bool ReadBackup(int32_t save_index, uint8_t* data){
 800b298:	b580      	push	{r7, lr}
 800b29a:	b0c4      	sub	sp, #272	; 0x110
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	1d3b      	adds	r3, r7, #4
 800b2a0:	6018      	str	r0, [r3, #0]
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	6019      	str	r1, [r3, #0]
	uint8_t filename[256] = {0};
 800b2a6:	f107 030c 	add.w	r3, r7, #12
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	f000 fe5f 	bl	800bf76 <memset>
	//Read file from your back up
	if(save_index <= 0){
 800b2b8:	1d3b      	adds	r3, r7, #4
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dc01      	bgt.n	800b2c4 <ReadBackup+0x2c>
		return false;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e013      	b.n	800b2ec <ReadBackup+0x54>
	}

	uint32_t key;
	bool check;

	sprintf((char*)filename, "BACKUP%03ld", save_index);
 800b2c4:	1d3b      	adds	r3, r7, #4
 800b2c6:	f107 000c 	add.w	r0, r7, #12
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	490a      	ldr	r1, [pc, #40]	; (800b2f8 <ReadBackup+0x60>)
 800b2ce:	f001 fd81 	bl	800cdd4 <siprintf>
	check = UC200_FileRead(filename, data, 1024);
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	f107 000c 	add.w	r0, r7, #12
 800b2d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2dc:	6819      	ldr	r1, [r3, #0]
 800b2de:	f7f8 fdc1 	bl	8003e64 <UC200_FileRead>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	return check;
 800b2e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	080116f0 	.word	0x080116f0

0800b2fc <IncludeDiagnostic>:
STATUS_t _STATUS;
DATA_t _DATA;
uint8_t _DATAString[1500]; //must same as at core buffer
uint8_t temp[32];

void IncludeDiagnostic(){
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
	int this_temp = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
	if(_DATA.flag.FlagGPSDetached == true){
 800b306:	4b4a      	ldr	r3, [pc, #296]	; (800b430 <IncludeDiagnostic+0x134>)
 800b308:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <IncludeDiagnostic+0x2e>
		strcat((char*)_DATAString,"_GE");
 800b316:	4847      	ldr	r0, [pc, #284]	; (800b434 <IncludeDiagnostic+0x138>)
 800b318:	f7f4 ff6c 	bl	80001f4 <strlen>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	4b44      	ldr	r3, [pc, #272]	; (800b434 <IncludeDiagnostic+0x138>)
 800b322:	4413      	add	r3, r2
 800b324:	4a44      	ldr	r2, [pc, #272]	; (800b438 <IncludeDiagnostic+0x13c>)
 800b326:	6810      	ldr	r0, [r2, #0]
 800b328:	6018      	str	r0, [r3, #0]
	}
	if(_STATUS.fail_time > 0){
 800b32a:	4b44      	ldr	r3, [pc, #272]	; (800b43c <IncludeDiagnostic+0x140>)
 800b32c:	7c1b      	ldrb	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00b      	beq.n	800b34a <IncludeDiagnostic+0x4e>
		strcat((char*)_DATAString,"_CNE");
 800b332:	4840      	ldr	r0, [pc, #256]	; (800b434 <IncludeDiagnostic+0x138>)
 800b334:	f7f4 ff5e 	bl	80001f4 <strlen>
 800b338:	4603      	mov	r3, r0
 800b33a:	461a      	mov	r2, r3
 800b33c:	4b3d      	ldr	r3, [pc, #244]	; (800b434 <IncludeDiagnostic+0x138>)
 800b33e:	4413      	add	r3, r2
 800b340:	4a3f      	ldr	r2, [pc, #252]	; (800b440 <IncludeDiagnostic+0x144>)
 800b342:	6810      	ldr	r0, [r2, #0]
 800b344:	6018      	str	r0, [r3, #0]
 800b346:	7912      	ldrb	r2, [r2, #4]
 800b348:	711a      	strb	r2, [r3, #4]
	}
//	sprintf(temp,"_RRT%d%d%d",_STATUS.Flags.FlagRAM2_RetryTime,_STATUS.Flags.FlagRAM3_RetryTime,_STATUS.Flags.FlagRAM4_RetryTime);

	this_temp = (_STATUS.Flags.FlagRAM2_FrameError << 2);
 800b34a:	4b3c      	ldr	r3, [pc, #240]	; (800b43c <IncludeDiagnostic+0x140>)
 800b34c:	7d1b      	ldrb	r3, [r3, #20]
 800b34e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b352:	b2db      	uxtb	r3, r3
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM3_FrameError << 1);
 800b358:	4b38      	ldr	r3, [pc, #224]	; (800b43c <IncludeDiagnostic+0x140>)
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
 800b35c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b360:	b2db      	uxtb	r3, r3
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	4413      	add	r3, r2
 800b368:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM4_FrameError << 0);
 800b36a:	4b34      	ldr	r3, [pc, #208]	; (800b43c <IncludeDiagnostic+0x140>)
 800b36c:	7d5b      	ldrb	r3, [r3, #21]
 800b36e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b372:	b2db      	uxtb	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4413      	add	r3, r2
 800b37a:	607b      	str	r3, [r7, #4]
	if(this_temp > 0){
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dd08      	ble.n	800b394 <IncludeDiagnostic+0x98>
		sprintf(temp,"_RFE%d",this_temp);
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	492f      	ldr	r1, [pc, #188]	; (800b444 <IncludeDiagnostic+0x148>)
 800b386:	4830      	ldr	r0, [pc, #192]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b388:	f001 fd24 	bl	800cdd4 <siprintf>
		strcat((char*)_DATAString,temp);
 800b38c:	492e      	ldr	r1, [pc, #184]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b38e:	4829      	ldr	r0, [pc, #164]	; (800b434 <IncludeDiagnostic+0x138>)
 800b390:	f001 fdaf 	bl	800cef2 <strcat>
	}

	this_temp = (_STATUS.Flags.FlagRAM2_NoiseError << 2);
 800b394:	4b29      	ldr	r3, [pc, #164]	; (800b43c <IncludeDiagnostic+0x140>)
 800b396:	7d1b      	ldrb	r3, [r3, #20]
 800b398:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM3_NoiseError << 1);
 800b3a2:	4b26      	ldr	r3, [pc, #152]	; (800b43c <IncludeDiagnostic+0x140>)
 800b3a4:	7d5b      	ldrb	r3, [r3, #21]
 800b3a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM4_NoiseError << 0);
 800b3b4:	4b21      	ldr	r3, [pc, #132]	; (800b43c <IncludeDiagnostic+0x140>)
 800b3b6:	7d5b      	ldrb	r3, [r3, #21]
 800b3b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	607b      	str	r3, [r7, #4]
	if(this_temp > 0){
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dd08      	ble.n	800b3de <IncludeDiagnostic+0xe2>
		sprintf(temp,"_RNE%d",this_temp);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	491f      	ldr	r1, [pc, #124]	; (800b44c <IncludeDiagnostic+0x150>)
 800b3d0:	481d      	ldr	r0, [pc, #116]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b3d2:	f001 fcff 	bl	800cdd4 <siprintf>
		strcat((char*)_DATAString,temp);
 800b3d6:	491c      	ldr	r1, [pc, #112]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b3d8:	4816      	ldr	r0, [pc, #88]	; (800b434 <IncludeDiagnostic+0x138>)
 800b3da:	f001 fd8a 	bl	800cef2 <strcat>
	}

	this_temp = (_STATUS.Flags.FlagRAM2_ChecksumError << 2);
 800b3de:	4b17      	ldr	r3, [pc, #92]	; (800b43c <IncludeDiagnostic+0x140>)
 800b3e0:	7d1b      	ldrb	r3, [r3, #20]
 800b3e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM3_ChecksumError << 1);
 800b3ec:	4b13      	ldr	r3, [pc, #76]	; (800b43c <IncludeDiagnostic+0x140>)
 800b3ee:	7d1b      	ldrb	r3, [r3, #20]
 800b3f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	607b      	str	r3, [r7, #4]
	this_temp += (_STATUS.Flags.FlagRAM4_ChecksumError << 0);
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <IncludeDiagnostic+0x140>)
 800b400:	7d5b      	ldrb	r3, [r3, #21]
 800b402:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b406:	b2db      	uxtb	r3, r3
 800b408:	461a      	mov	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4413      	add	r3, r2
 800b40e:	607b      	str	r3, [r7, #4]
	if(this_temp > 0){
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dd08      	ble.n	800b428 <IncludeDiagnostic+0x12c>
		sprintf(temp,"_RCE%d",this_temp);
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	490d      	ldr	r1, [pc, #52]	; (800b450 <IncludeDiagnostic+0x154>)
 800b41a:	480b      	ldr	r0, [pc, #44]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b41c:	f001 fcda 	bl	800cdd4 <siprintf>
		strcat((char*)_DATAString,temp);
 800b420:	4909      	ldr	r1, [pc, #36]	; (800b448 <IncludeDiagnostic+0x14c>)
 800b422:	4804      	ldr	r0, [pc, #16]	; (800b434 <IncludeDiagnostic+0x138>)
 800b424:	f001 fd65 	bl	800cef2 <strcat>
	}

}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20001ee8 	.word	0x20001ee8
 800b434:	200020d8 	.word	0x200020d8
 800b438:	080116fc 	.word	0x080116fc
 800b43c:	200026b8 	.word	0x200026b8
 800b440:	08011700 	.word	0x08011700
 800b444:	08011708 	.word	0x08011708
 800b448:	20001ec8 	.word	0x20001ec8
 800b44c:	08011710 	.word	0x08011710
 800b450:	08011718 	.word	0x08011718

0800b454 <GenerateID>:

void GenerateID(void){
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
	sprintf((char*)_DATA.id_imei,"I%s",(char*)_DATA.imei);
 800b458:	4a03      	ldr	r2, [pc, #12]	; (800b468 <GenerateID+0x14>)
 800b45a:	4904      	ldr	r1, [pc, #16]	; (800b46c <GenerateID+0x18>)
 800b45c:	4804      	ldr	r0, [pc, #16]	; (800b470 <GenerateID+0x1c>)
 800b45e:	f001 fcb9 	bl	800cdd4 <siprintf>
}
 800b462:	bf00      	nop
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20001f00 	.word	0x20001f00
 800b46c:	08011720 	.word	0x08011720
 800b470:	20001ee8 	.word	0x20001ee8
 800b474:	00000000 	.word	0x00000000

0800b478 <PackageData>:

void PackageData(void){
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b0df      	sub	sp, #380	; 0x17c
 800b47c:	af00      	add	r7, sp, #0
	PACKET_t _PACKET;
	//SECTION: Format Change
	sprintf((char*)_PACKET.pack_no,"%d",_DATA.pack_no);
 800b47e:	4bd2      	ldr	r3, [pc, #840]	; (800b7c8 <PackageData+0x350>)
 800b480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b484:	461a      	mov	r2, r3
 800b486:	f107 0308 	add.w	r3, r7, #8
 800b48a:	49d0      	ldr	r1, [pc, #832]	; (800b7cc <PackageData+0x354>)
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 fca1 	bl	800cdd4 <siprintf>
	sprintf((char*)_PACKET.imei,"\"%s\"",(char*)_DATA.imei);
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	3308      	adds	r3, #8
 800b498:	4acd      	ldr	r2, [pc, #820]	; (800b7d0 <PackageData+0x358>)
 800b49a:	49ce      	ldr	r1, [pc, #824]	; (800b7d4 <PackageData+0x35c>)
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fc99 	bl	800cdd4 <siprintf>
	sprintf((char*)_PACKET.timestamp,"%ld",_DATA.timestamp);
 800b4a2:	4bc9      	ldr	r3, [pc, #804]	; (800b7c8 <PackageData+0x350>)
 800b4a4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800b4a8:	f107 0208 	add.w	r2, r7, #8
 800b4ac:	f102 0020 	add.w	r0, r2, #32
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4623      	mov	r3, r4
 800b4b4:	49c8      	ldr	r1, [pc, #800]	; (800b7d8 <PackageData+0x360>)
 800b4b6:	f001 fc8d 	bl	800cdd4 <siprintf>

	sprintf((char*)_PACKET.lat,"%ld",(uint32_t)(_DATA.lat*1000000));
 800b4ba:	4bc3      	ldr	r3, [pc, #780]	; (800b7c8 <PackageData+0x350>)
 800b4bc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800b4c0:	a3b9      	add	r3, pc, #740	; (adr r3, 800b7a8 <PackageData+0x330>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f5 f8af 	bl	8000628 <__aeabi_dmul>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	f7f5 fb81 	bl	8000bd8 <__aeabi_d2uiz>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	f107 0308 	add.w	r3, r7, #8
 800b4dc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b4e0:	49bd      	ldr	r1, [pc, #756]	; (800b7d8 <PackageData+0x360>)
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f001 fc76 	bl	800cdd4 <siprintf>
	sprintf((char*)_PACKET.lng,"%ld",(uint32_t)(_DATA.lng*1000000));
 800b4e8:	4bb7      	ldr	r3, [pc, #732]	; (800b7c8 <PackageData+0x350>)
 800b4ea:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b4ee:	a3ae      	add	r3, pc, #696	; (adr r3, 800b7a8 <PackageData+0x330>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f5 f898 	bl	8000628 <__aeabi_dmul>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	4621      	mov	r1, r4
 800b500:	f7f5 fb6a 	bl	8000bd8 <__aeabi_d2uiz>
 800b504:	4602      	mov	r2, r0
 800b506:	f107 0308 	add.w	r3, r7, #8
 800b50a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b50e:	49b2      	ldr	r1, [pc, #712]	; (800b7d8 <PackageData+0x360>)
 800b510:	4618      	mov	r0, r3
 800b512:	f001 fc5f 	bl	800cdd4 <siprintf>

	float adc_float = ((_DATA.adc)/(4095.0/1.8));
 800b516:	4bac      	ldr	r3, [pc, #688]	; (800b7c8 <PackageData+0x350>)
 800b518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f5 f80a 	bl	8000534 <__aeabi_ui2d>
 800b520:	a3a3      	add	r3, pc, #652	; (adr r3, 800b7b0 <PackageData+0x338>)
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	f7f5 f9a9 	bl	800087c <__aeabi_ddiv>
 800b52a:	4603      	mov	r3, r0
 800b52c:	460c      	mov	r4, r1
 800b52e:	4618      	mov	r0, r3
 800b530:	4621      	mov	r1, r4
 800b532:	f7f5 fb71 	bl	8000c18 <__aeabi_d2f>
 800b536:	4603      	mov	r3, r0
 800b538:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	adc_float = (adc_float/(1.6/4.2));
 800b53c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800b540:	f7f5 f81a 	bl	8000578 <__aeabi_f2d>
 800b544:	a39c      	add	r3, pc, #624	; (adr r3, 800b7b8 <PackageData+0x340>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7f5 f997 	bl	800087c <__aeabi_ddiv>
 800b54e:	4603      	mov	r3, r0
 800b550:	460c      	mov	r4, r1
 800b552:	4618      	mov	r0, r3
 800b554:	4621      	mov	r1, r4
 800b556:	f7f5 fb5f 	bl	8000c18 <__aeabi_d2f>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	adc_float = adc_float - 0.2;
 800b560:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800b564:	f7f5 f808 	bl	8000578 <__aeabi_f2d>
 800b568:	a395      	add	r3, pc, #596	; (adr r3, 800b7c0 <PackageData+0x348>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7f4 fea3 	bl	80002b8 <__aeabi_dsub>
 800b572:	4603      	mov	r3, r0
 800b574:	460c      	mov	r4, r1
 800b576:	4618      	mov	r0, r3
 800b578:	4621      	mov	r1, r4
 800b57a:	f7f5 fb4d 	bl	8000c18 <__aeabi_d2f>
 800b57e:	4603      	mov	r3, r0
 800b580:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	sprintf((char*)_PACKET.adc,"%d",(uint16_t)(adc_float*1000));
 800b584:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800b588:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800b7dc <PackageData+0x364>
 800b58c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b594:	ee17 3a90 	vmov	r3, s15
 800b598:	b29b      	uxth	r3, r3
 800b59a:	461a      	mov	r2, r3
 800b59c:	f107 0308 	add.w	r3, r7, #8
 800b5a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5a4:	4989      	ldr	r1, [pc, #548]	; (800b7cc <PackageData+0x354>)
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 fc14 	bl	800cdd4 <siprintf>

	uint8_t RAMByte[3];

	//SECTION: String Concentrate
	strcpy((char*)_DATAString,"(");
 800b5ac:	4a8c      	ldr	r2, [pc, #560]	; (800b7e0 <PackageData+0x368>)
 800b5ae:	4b8d      	ldr	r3, [pc, #564]	; (800b7e4 <PackageData+0x36c>)
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.imei);
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4888      	ldr	r0, [pc, #544]	; (800b7e0 <PackageData+0x368>)
 800b5be:	f001 fc98 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b5c2:	4887      	ldr	r0, [pc, #540]	; (800b7e0 <PackageData+0x368>)
 800b5c4:	f7f4 fe16 	bl	80001f4 <strlen>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	4b84      	ldr	r3, [pc, #528]	; (800b7e0 <PackageData+0x368>)
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4985      	ldr	r1, [pc, #532]	; (800b7e8 <PackageData+0x370>)
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.pack_no);
 800b5da:	f107 0308 	add.w	r3, r7, #8
 800b5de:	4619      	mov	r1, r3
 800b5e0:	487f      	ldr	r0, [pc, #508]	; (800b7e0 <PackageData+0x368>)
 800b5e2:	f001 fc86 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b5e6:	487e      	ldr	r0, [pc, #504]	; (800b7e0 <PackageData+0x368>)
 800b5e8:	f7f4 fe04 	bl	80001f4 <strlen>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4b7b      	ldr	r3, [pc, #492]	; (800b7e0 <PackageData+0x368>)
 800b5f2:	4413      	add	r3, r2
 800b5f4:	497c      	ldr	r1, [pc, #496]	; (800b7e8 <PackageData+0x370>)
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.timestamp);
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	3320      	adds	r3, #32
 800b604:	4619      	mov	r1, r3
 800b606:	4876      	ldr	r0, [pc, #472]	; (800b7e0 <PackageData+0x368>)
 800b608:	f001 fc73 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b60c:	4874      	ldr	r0, [pc, #464]	; (800b7e0 <PackageData+0x368>)
 800b60e:	f7f4 fdf1 	bl	80001f4 <strlen>
 800b612:	4603      	mov	r3, r0
 800b614:	461a      	mov	r2, r3
 800b616:	4b72      	ldr	r3, [pc, #456]	; (800b7e0 <PackageData+0x368>)
 800b618:	4413      	add	r3, r2
 800b61a:	4973      	ldr	r1, [pc, #460]	; (800b7e8 <PackageData+0x370>)
 800b61c:	461a      	mov	r2, r3
 800b61e:	460b      	mov	r3, r1
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.lat);
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b62c:	4619      	mov	r1, r3
 800b62e:	486c      	ldr	r0, [pc, #432]	; (800b7e0 <PackageData+0x368>)
 800b630:	f001 fc5f 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b634:	486a      	ldr	r0, [pc, #424]	; (800b7e0 <PackageData+0x368>)
 800b636:	f7f4 fddd 	bl	80001f4 <strlen>
 800b63a:	4603      	mov	r3, r0
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b68      	ldr	r3, [pc, #416]	; (800b7e0 <PackageData+0x368>)
 800b640:	4413      	add	r3, r2
 800b642:	4969      	ldr	r1, [pc, #420]	; (800b7e8 <PackageData+0x370>)
 800b644:	461a      	mov	r2, r3
 800b646:	460b      	mov	r3, r1
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.lng);
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b654:	4619      	mov	r1, r3
 800b656:	4862      	ldr	r0, [pc, #392]	; (800b7e0 <PackageData+0x368>)
 800b658:	f001 fc4b 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b65c:	4860      	ldr	r0, [pc, #384]	; (800b7e0 <PackageData+0x368>)
 800b65e:	f7f4 fdc9 	bl	80001f4 <strlen>
 800b662:	4603      	mov	r3, r0
 800b664:	461a      	mov	r2, r3
 800b666:	4b5e      	ldr	r3, [pc, #376]	; (800b7e0 <PackageData+0x368>)
 800b668:	4413      	add	r3, r2
 800b66a:	495f      	ldr	r1, [pc, #380]	; (800b7e8 <PackageData+0x370>)
 800b66c:	461a      	mov	r2, r3
 800b66e:	460b      	mov	r3, r1
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	8013      	strh	r3, [r2, #0]
	strcat((char*)_DATAString,(char*)_PACKET.adc);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b67c:	4619      	mov	r1, r3
 800b67e:	4858      	ldr	r0, [pc, #352]	; (800b7e0 <PackageData+0x368>)
 800b680:	f001 fc37 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b684:	4856      	ldr	r0, [pc, #344]	; (800b7e0 <PackageData+0x368>)
 800b686:	f7f4 fdb5 	bl	80001f4 <strlen>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	4b54      	ldr	r3, [pc, #336]	; (800b7e0 <PackageData+0x368>)
 800b690:	4413      	add	r3, r2
 800b692:	4955      	ldr	r1, [pc, #340]	; (800b7e8 <PackageData+0x370>)
 800b694:	461a      	mov	r2, r3
 800b696:	460b      	mov	r3, r1
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	8013      	strh	r3, [r2, #0]

	/** Version and Debugging */
	strcat((char*)_DATAString,(char*)vers);
 800b69c:	4850      	ldr	r0, [pc, #320]	; (800b7e0 <PackageData+0x368>)
 800b69e:	f7f4 fda9 	bl	80001f4 <strlen>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	4b4e      	ldr	r3, [pc, #312]	; (800b7e0 <PackageData+0x368>)
 800b6a8:	4413      	add	r3, r2
 800b6aa:	4a50      	ldr	r2, [pc, #320]	; (800b7ec <PackageData+0x374>)
 800b6ac:	6810      	ldr	r0, [r2, #0]
 800b6ae:	6018      	str	r0, [r3, #0]
 800b6b0:	8891      	ldrh	r1, [r2, #4]
 800b6b2:	7992      	ldrb	r2, [r2, #6]
 800b6b4:	8099      	strh	r1, [r3, #4]
 800b6b6:	719a      	strb	r2, [r3, #6]
	IncludeDiagnostic();
 800b6b8:	f7ff fe20 	bl	800b2fc <IncludeDiagnostic>


	strcat((char*)_DATAString,",");
 800b6bc:	4848      	ldr	r0, [pc, #288]	; (800b7e0 <PackageData+0x368>)
 800b6be:	f7f4 fd99 	bl	80001f4 <strlen>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4b46      	ldr	r3, [pc, #280]	; (800b7e0 <PackageData+0x368>)
 800b6c8:	4413      	add	r3, r2
 800b6ca:	4947      	ldr	r1, [pc, #284]	; (800b7e8 <PackageData+0x370>)
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	8013      	strh	r3, [r2, #0]

	/**Ram Page 2**/
	memset(_PACKET.RAMString,0,264);
 800b6d4:	f107 0308 	add.w	r3, r7, #8
 800b6d8:	3330      	adds	r3, #48	; 0x30
 800b6da:	f44f 7284 	mov.w	r2, #264	; 0x108
 800b6de:	2100      	movs	r1, #0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fc48 	bl	800bf76 <memset>
	if(_DATA.ram2_length < 129){
 800b6e6:	4b38      	ldr	r3, [pc, #224]	; (800b7c8 <PackageData+0x350>)
 800b6e8:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b6ec:	2b80      	cmp	r3, #128	; 0x80
 800b6ee:	d809      	bhi.n	800b704 <PackageData+0x28c>
		memset(_PACKET.RAMString,'0',129*2);
 800b6f0:	f107 0308 	add.w	r3, r7, #8
 800b6f4:	3330      	adds	r3, #48	; 0x30
 800b6f6:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b6fa:	2130      	movs	r1, #48	; 0x30
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fc3a 	bl	800bf76 <memset>
 800b702:	e020      	b.n	800b746 <PackageData+0x2ce>
	}
	else{
		for(int i = 0; i < 129; i++){
 800b704:	2300      	movs	r3, #0
 800b706:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800b70a:	e018      	b.n	800b73e <PackageData+0x2c6>
			sprintf((char*)RAMByte,"%02x",_DATA.ram2[i]);
 800b70c:	4a2e      	ldr	r2, [pc, #184]	; (800b7c8 <PackageData+0x350>)
 800b70e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b712:	4413      	add	r3, r2
 800b714:	3368      	adds	r3, #104	; 0x68
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	1d3b      	adds	r3, r7, #4
 800b71c:	4934      	ldr	r1, [pc, #208]	; (800b7f0 <PackageData+0x378>)
 800b71e:	4618      	mov	r0, r3
 800b720:	f001 fb58 	bl	800cdd4 <siprintf>
			strcat((char*)_PACKET.RAMString,(char*)RAMByte);
 800b724:	1d3a      	adds	r2, r7, #4
 800b726:	f107 0308 	add.w	r3, r7, #8
 800b72a:	3330      	adds	r3, #48	; 0x30
 800b72c:	4611      	mov	r1, r2
 800b72e:	4618      	mov	r0, r3
 800b730:	f001 fbdf 	bl	800cef2 <strcat>
		for(int i = 0; i < 129; i++){
 800b734:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b738:	3301      	adds	r3, #1
 800b73a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800b73e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b742:	2b80      	cmp	r3, #128	; 0x80
 800b744:	dde2      	ble.n	800b70c <PackageData+0x294>
		}
	}
	strcat((char*)_DATAString,(char*)_PACKET.RAMString);
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	3330      	adds	r3, #48	; 0x30
 800b74c:	4619      	mov	r1, r3
 800b74e:	4824      	ldr	r0, [pc, #144]	; (800b7e0 <PackageData+0x368>)
 800b750:	f001 fbcf 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b754:	4822      	ldr	r0, [pc, #136]	; (800b7e0 <PackageData+0x368>)
 800b756:	f7f4 fd4d 	bl	80001f4 <strlen>
 800b75a:	4603      	mov	r3, r0
 800b75c:	461a      	mov	r2, r3
 800b75e:	4b20      	ldr	r3, [pc, #128]	; (800b7e0 <PackageData+0x368>)
 800b760:	4413      	add	r3, r2
 800b762:	4921      	ldr	r1, [pc, #132]	; (800b7e8 <PackageData+0x370>)
 800b764:	461a      	mov	r2, r3
 800b766:	460b      	mov	r3, r1
 800b768:	881b      	ldrh	r3, [r3, #0]
 800b76a:	8013      	strh	r3, [r2, #0]

	/**Ram Page 3**/
	memset(_PACKET.RAMString,0,264);
 800b76c:	f107 0308 	add.w	r3, r7, #8
 800b770:	3330      	adds	r3, #48	; 0x30
 800b772:	f44f 7284 	mov.w	r2, #264	; 0x108
 800b776:	2100      	movs	r1, #0
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 fbfc 	bl	800bf76 <memset>
	if(_DATA.ram3_length < 129){
 800b77e:	4b12      	ldr	r3, [pc, #72]	; (800b7c8 <PackageData+0x350>)
 800b780:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800b784:	2b80      	cmp	r3, #128	; 0x80
 800b786:	d809      	bhi.n	800b79c <PackageData+0x324>
		memset(_PACKET.RAMString,'0',129*2);
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	3330      	adds	r3, #48	; 0x30
 800b78e:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b792:	2130      	movs	r1, #48	; 0x30
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fbee 	bl	800bf76 <memset>
 800b79a:	e048      	b.n	800b82e <PackageData+0x3b6>
	}
	else{
		for(int i = 0; i < 129; i++){
 800b79c:	2300      	movs	r3, #0
 800b79e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800b7a2:	e040      	b.n	800b826 <PackageData+0x3ae>
 800b7a4:	f3af 8000 	nop.w
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	412e8480 	.word	0x412e8480
 800b7b0:	00000000 	.word	0x00000000
 800b7b4:	40a1c600 	.word	0x40a1c600
 800b7b8:	18618618 	.word	0x18618618
 800b7bc:	3fd86186 	.word	0x3fd86186
 800b7c0:	9999999a 	.word	0x9999999a
 800b7c4:	3fc99999 	.word	0x3fc99999
 800b7c8:	20001ee8 	.word	0x20001ee8
 800b7cc:	08011724 	.word	0x08011724
 800b7d0:	20001f00 	.word	0x20001f00
 800b7d4:	08011728 	.word	0x08011728
 800b7d8:	08011730 	.word	0x08011730
 800b7dc:	447a0000 	.word	0x447a0000
 800b7e0:	200020d8 	.word	0x200020d8
 800b7e4:	08011734 	.word	0x08011734
 800b7e8:	08011738 	.word	0x08011738
 800b7ec:	080120e8 	.word	0x080120e8
 800b7f0:	0801173c 	.word	0x0801173c
			sprintf((char*)RAMByte,"%02x",_DATA.ram3[i]);
 800b7f4:	4a46      	ldr	r2, [pc, #280]	; (800b910 <PackageData+0x498>)
 800b7f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800b7fa:	4413      	add	r3, r2
 800b7fc:	33e9      	adds	r3, #233	; 0xe9
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	1d3b      	adds	r3, r7, #4
 800b804:	4943      	ldr	r1, [pc, #268]	; (800b914 <PackageData+0x49c>)
 800b806:	4618      	mov	r0, r3
 800b808:	f001 fae4 	bl	800cdd4 <siprintf>
			strcat((char*)_PACKET.RAMString,(char*)RAMByte);
 800b80c:	1d3a      	adds	r2, r7, #4
 800b80e:	f107 0308 	add.w	r3, r7, #8
 800b812:	3330      	adds	r3, #48	; 0x30
 800b814:	4611      	mov	r1, r2
 800b816:	4618      	mov	r0, r3
 800b818:	f001 fb6b 	bl	800cef2 <strcat>
		for(int i = 0; i < 129; i++){
 800b81c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800b820:	3301      	adds	r3, #1
 800b822:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800b826:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800b82a:	2b80      	cmp	r3, #128	; 0x80
 800b82c:	dde2      	ble.n	800b7f4 <PackageData+0x37c>
		}
	}
	strcat((char*)_DATAString,(char*)_PACKET.RAMString);
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	3330      	adds	r3, #48	; 0x30
 800b834:	4619      	mov	r1, r3
 800b836:	4838      	ldr	r0, [pc, #224]	; (800b918 <PackageData+0x4a0>)
 800b838:	f001 fb5b 	bl	800cef2 <strcat>
	strcat((char*)_DATAString,",");
 800b83c:	4836      	ldr	r0, [pc, #216]	; (800b918 <PackageData+0x4a0>)
 800b83e:	f7f4 fcd9 	bl	80001f4 <strlen>
 800b842:	4603      	mov	r3, r0
 800b844:	461a      	mov	r2, r3
 800b846:	4b34      	ldr	r3, [pc, #208]	; (800b918 <PackageData+0x4a0>)
 800b848:	4413      	add	r3, r2
 800b84a:	4934      	ldr	r1, [pc, #208]	; (800b91c <PackageData+0x4a4>)
 800b84c:	461a      	mov	r2, r3
 800b84e:	460b      	mov	r3, r1
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	8013      	strh	r3, [r2, #0]

	/**Ram Page 4**/
	memset(_PACKET.RAMString,0,264);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	3330      	adds	r3, #48	; 0x30
 800b85a:	f44f 7284 	mov.w	r2, #264	; 0x108
 800b85e:	2100      	movs	r1, #0
 800b860:	4618      	mov	r0, r3
 800b862:	f000 fb88 	bl	800bf76 <memset>
	if(_DATA.ram4_length < 129){
 800b866:	4b2a      	ldr	r3, [pc, #168]	; (800b910 <PackageData+0x498>)
 800b868:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 800b86c:	2b80      	cmp	r3, #128	; 0x80
 800b86e:	d809      	bhi.n	800b884 <PackageData+0x40c>
		memset(_PACKET.RAMString,'0',129*2);
 800b870:	f107 0308 	add.w	r3, r7, #8
 800b874:	3330      	adds	r3, #48	; 0x30
 800b876:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b87a:	2130      	movs	r1, #48	; 0x30
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fb7a 	bl	800bf76 <memset>
 800b882:	e021      	b.n	800b8c8 <PackageData+0x450>
	}
	else{
		for(int i = 0; i < 129; i++){
 800b884:	2300      	movs	r3, #0
 800b886:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800b88a:	e019      	b.n	800b8c0 <PackageData+0x448>
			sprintf((char*)RAMByte,"%02x",_DATA.ram4[i]);
 800b88c:	4a20      	ldr	r2, [pc, #128]	; (800b910 <PackageData+0x498>)
 800b88e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b892:	4413      	add	r3, r2
 800b894:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	1d3b      	adds	r3, r7, #4
 800b89e:	491d      	ldr	r1, [pc, #116]	; (800b914 <PackageData+0x49c>)
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f001 fa97 	bl	800cdd4 <siprintf>
			strcat((char*)_PACKET.RAMString,(char*)RAMByte);
 800b8a6:	1d3a      	adds	r2, r7, #4
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	3330      	adds	r3, #48	; 0x30
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 fb1e 	bl	800cef2 <strcat>
		for(int i = 0; i < 129; i++){
 800b8b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800b8c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b8c4:	2b80      	cmp	r3, #128	; 0x80
 800b8c6:	dde1      	ble.n	800b88c <PackageData+0x414>
		}
	}
	strcat((char*)_DATAString,(char*)_PACKET.RAMString);
 800b8c8:	f107 0308 	add.w	r3, r7, #8
 800b8cc:	3330      	adds	r3, #48	; 0x30
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4811      	ldr	r0, [pc, #68]	; (800b918 <PackageData+0x4a0>)
 800b8d2:	f001 fb0e 	bl	800cef2 <strcat>

	strcat((char*)_DATAString,")");
 800b8d6:	4810      	ldr	r0, [pc, #64]	; (800b918 <PackageData+0x4a0>)
 800b8d8:	f7f4 fc8c 	bl	80001f4 <strlen>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b0d      	ldr	r3, [pc, #52]	; (800b918 <PackageData+0x4a0>)
 800b8e2:	4413      	add	r3, r2
 800b8e4:	490e      	ldr	r1, [pc, #56]	; (800b920 <PackageData+0x4a8>)
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	8013      	strh	r3, [r2, #0]
	dbg_print((char*)_DATAString);
 800b8ee:	480a      	ldr	r0, [pc, #40]	; (800b918 <PackageData+0x4a0>)
 800b8f0:	f7f4 fc80 	bl	80001f4 <strlen>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8fc:	4906      	ldr	r1, [pc, #24]	; (800b918 <PackageData+0x4a0>)
 800b8fe:	4809      	ldr	r0, [pc, #36]	; (800b924 <PackageData+0x4ac>)
 800b900:	f7fd fbf8 	bl	80090f4 <HAL_UART_Transmit>
}
 800b904:	bf00      	nop
 800b906:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd90      	pop	{r4, r7, pc}
 800b90e:	bf00      	nop
 800b910:	20001ee8 	.word	0x20001ee8
 800b914:	0801173c 	.word	0x0801173c
 800b918:	200020d8 	.word	0x200020d8
 800b91c:	08011738 	.word	0x08011738
 800b920:	08011744 	.word	0x08011744
 800b924:	20001b34 	.word	0x20001b34

0800b928 <GetNormalizedGPS>:
double gps_lat[GPS_LENGTH];
double gps_lng[GPS_LENGTH];

void insertionSort(double arr[], int n);

void GetNormalizedGPS(double* lat, double* lng){
 800b928:	b5b0      	push	{r4, r5, r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
	int filter_n = GPS_LENGTH;
 800b932:	2307      	movs	r3, #7
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
	int fail = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	623b      	str	r3, [r7, #32]
	*lat = 0;
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	f04f 0300 	mov.w	r3, #0
 800b940:	f04f 0400 	mov.w	r4, #0
 800b944:	e9c2 3400 	strd	r3, r4, [r2]
	*lng = 0;
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	f04f 0300 	mov.w	r3, #0
 800b94e:	f04f 0400 	mov.w	r4, #0
 800b952:	e9c2 3400 	strd	r3, r4, [r2]
	_DATA.flag.FlagGPSDetached = false;
 800b956:	4a6c      	ldr	r2, [pc, #432]	; (800bb08 <GetNormalizedGPS+0x1e0>)
 800b958:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800b95c:	f36f 0300 	bfc	r3, #0, #1
 800b960:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

//	L80_StandbyMode(false);
	//SECTION: Latitude/Longitude Get

	for(int j = 0; j < GPS_LENGTH; j++){
 800b964:	2300      	movs	r3, #0
 800b966:	61fb      	str	r3, [r7, #28]
 800b968:	e054      	b.n	800ba14 <GetNormalizedGPS+0xec>
		gnss_RxITEnable();
 800b96a:	f7f6 fb55 	bl	8002018 <gnss_RxITEnable>
		for (int i = 1; i <= 50; i++) {
 800b96e:	2301      	movs	r3, #1
 800b970:	61bb      	str	r3, [r7, #24]
 800b972:	e021      	b.n	800b9b8 <GetNormalizedGPS+0x90>

			if (GNSS_DataReady == true) {
 800b974:	4b65      	ldr	r3, [pc, #404]	; (800bb0c <GetNormalizedGPS+0x1e4>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d121      	bne.n	800b9c0 <GetNormalizedGPS+0x98>
				break;
			}
			gps_lat[j] = gnss_getLatitude();
 800b97c:	f7f6 ff16 	bl	80027ac <gnss_getLatitude>
 800b980:	eeb0 7a40 	vmov.f32	s14, s0
 800b984:	eef0 7a60 	vmov.f32	s15, s1
 800b988:	4a61      	ldr	r2, [pc, #388]	; (800bb10 <GetNormalizedGPS+0x1e8>)
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4413      	add	r3, r2
 800b990:	ed83 7b00 	vstr	d7, [r3]
			gps_lng[j] = gnss_getLongitude();
 800b994:	f7f6 ff1a 	bl	80027cc <gnss_getLongitude>
 800b998:	eeb0 7a40 	vmov.f32	s14, s0
 800b99c:	eef0 7a60 	vmov.f32	s15, s1
 800b9a0:	4a5c      	ldr	r2, [pc, #368]	; (800bb14 <GetNormalizedGPS+0x1ec>)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	4413      	add	r3, r2
 800b9a8:	ed83 7b00 	vstr	d7, [r3]
			HAL_Delay(10);
 800b9ac:	200a      	movs	r0, #10
 800b9ae:	f7f9 fcc9 	bl	8005344 <HAL_Delay>
		for (int i = 1; i <= 50; i++) {
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	2b32      	cmp	r3, #50	; 0x32
 800b9bc:	ddda      	ble.n	800b974 <GetNormalizedGPS+0x4c>
 800b9be:	e000      	b.n	800b9c2 <GetNormalizedGPS+0x9a>
				break;
 800b9c0:	bf00      	nop
		}
		if(gps_lat[j] == 9999.999999 || gps_lng[j] == 9999.999999) fail++;
 800b9c2:	4a53      	ldr	r2, [pc, #332]	; (800bb10 <GetNormalizedGPS+0x1e8>)
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	00db      	lsls	r3, r3, #3
 800b9c8:	4413      	add	r3, r2
 800b9ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9ce:	a34a      	add	r3, pc, #296	; (adr r3, 800baf8 <GetNormalizedGPS+0x1d0>)
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f7f5 f890 	bl	8000af8 <__aeabi_dcmpeq>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10d      	bne.n	800b9fa <GetNormalizedGPS+0xd2>
 800b9de:	4a4d      	ldr	r2, [pc, #308]	; (800bb14 <GetNormalizedGPS+0x1ec>)
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	4413      	add	r3, r2
 800b9e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9ea:	a343      	add	r3, pc, #268	; (adr r3, 800baf8 <GetNormalizedGPS+0x1d0>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f5 f882 	bl	8000af8 <__aeabi_dcmpeq>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <GetNormalizedGPS+0xd8>
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	623b      	str	r3, [r7, #32]
		gnss_RxITDisable();
 800ba00:	f7f6 fb38 	bl	8002074 <gnss_RxITDisable>
		gnss_reset();
 800ba04:	f7f6 fa10 	bl	8001e28 <gnss_reset>
		HAL_Delay(100);
 800ba08:	2064      	movs	r0, #100	; 0x64
 800ba0a:	f7f9 fc9b 	bl	8005344 <HAL_Delay>
	for(int j = 0; j < GPS_LENGTH; j++){
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	3301      	adds	r3, #1
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b06      	cmp	r3, #6
 800ba18:	dda7      	ble.n	800b96a <GetNormalizedGPS+0x42>
	}

	if(fail >= GPS_LENGTH){
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	2b06      	cmp	r3, #6
 800ba1e:	dd19      	ble.n	800ba54 <GetNormalizedGPS+0x12c>
		*lat = 999.999999;
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	a437      	add	r4, pc, #220	; (adr r4, 800bb00 <GetNormalizedGPS+0x1d8>)
 800ba24:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ba28:	e9c2 3400 	strd	r3, r4, [r2]
		*lng = 999.999999;
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	a434      	add	r4, pc, #208	; (adr r4, 800bb00 <GetNormalizedGPS+0x1d8>)
 800ba30:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ba34:	e9c2 3400 	strd	r3, r4, [r2]
		_DATA.flag.FlagGPSDetached = true;
 800ba38:	4a33      	ldr	r2, [pc, #204]	; (800bb08 <GetNormalizedGPS+0x1e0>)
 800ba3a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		_STATUS.gps_fail++;
 800ba46:	4b34      	ldr	r3, [pc, #208]	; (800bb18 <GetNormalizedGPS+0x1f0>)
 800ba48:	7c5b      	ldrb	r3, [r3, #17]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b32      	ldr	r3, [pc, #200]	; (800bb18 <GetNormalizedGPS+0x1f0>)
 800ba50:	745a      	strb	r2, [r3, #17]
		return;
 800ba52:	e200      	b.n	800be56 <GetNormalizedGPS+0x52e>
	}


	//SECTION: Latitude/Longitude Filter
	insertionSort(gps_lat,GPS_LENGTH);
 800ba54:	2107      	movs	r1, #7
 800ba56:	482e      	ldr	r0, [pc, #184]	; (800bb10 <GetNormalizedGPS+0x1e8>)
 800ba58:	f000 fa06 	bl	800be68 <insertionSort>
	insertionSort(gps_lng,GPS_LENGTH);
 800ba5c:	2107      	movs	r1, #7
 800ba5e:	482d      	ldr	r0, [pc, #180]	; (800bb14 <GetNormalizedGPS+0x1ec>)
 800ba60:	f000 fa02 	bl	800be68 <insertionSort>

	for(int i = 0;i < GPS_LENGTH; i++){
 800ba64:	2300      	movs	r3, #0
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e040      	b.n	800baec <GetNormalizedGPS+0x1c4>
		if(gps_lat[i] == 999.999999 || gps_lng[i] == 999.999999){
 800ba6a:	4a29      	ldr	r2, [pc, #164]	; (800bb10 <GetNormalizedGPS+0x1e8>)
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	4413      	add	r3, r2
 800ba72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba76:	a322      	add	r3, pc, #136	; (adr r3, 800bb00 <GetNormalizedGPS+0x1d8>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f7f5 f83c 	bl	8000af8 <__aeabi_dcmpeq>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10d      	bne.n	800baa2 <GetNormalizedGPS+0x17a>
 800ba86:	4a23      	ldr	r2, [pc, #140]	; (800bb14 <GetNormalizedGPS+0x1ec>)
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba92:	a31b      	add	r3, pc, #108	; (adr r3, 800bb00 <GetNormalizedGPS+0x1d8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f5 f82e 	bl	8000af8 <__aeabi_dcmpeq>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <GetNormalizedGPS+0x180>
			filter_n = i;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800baa6:	e024      	b.n	800baf2 <GetNormalizedGPS+0x1ca>
		}
		if(gps_lat[i] == 9999.999999 || gps_lng[i] == 9999.999999){
 800baa8:	4a19      	ldr	r2, [pc, #100]	; (800bb10 <GetNormalizedGPS+0x1e8>)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	4413      	add	r3, r2
 800bab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bab4:	a310      	add	r3, pc, #64	; (adr r3, 800baf8 <GetNormalizedGPS+0x1d0>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	f7f5 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10d      	bne.n	800bae0 <GetNormalizedGPS+0x1b8>
 800bac4:	4a13      	ldr	r2, [pc, #76]	; (800bb14 <GetNormalizedGPS+0x1ec>)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	4413      	add	r3, r2
 800bacc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bad0:	a309      	add	r3, pc, #36	; (adr r3, 800baf8 <GetNormalizedGPS+0x1d0>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f5 f80f 	bl	8000af8 <__aeabi_dcmpeq>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <GetNormalizedGPS+0x1be>
			filter_n = i;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800bae4:	e005      	b.n	800baf2 <GetNormalizedGPS+0x1ca>
	for(int i = 0;i < GPS_LENGTH; i++){
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	3301      	adds	r3, #1
 800baea:	617b      	str	r3, [r7, #20]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2b06      	cmp	r3, #6
 800baf0:	ddbb      	ble.n	800ba6a <GetNormalizedGPS+0x142>
		}
	}

	for(int i = 0;i < filter_n;i++){
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]
 800baf6:	e0d8      	b.n	800bcaa <GetNormalizedGPS+0x382>
 800baf8:	fff79c84 	.word	0xfff79c84
 800bafc:	40c387ff 	.word	0x40c387ff
 800bb00:	ff79c843 	.word	0xff79c843
 800bb04:	408f3fff 	.word	0x408f3fff
 800bb08:	20001ee8 	.word	0x20001ee8
 800bb0c:	20000298 	.word	0x20000298
 800bb10:	200026d0 	.word	0x200026d0
 800bb14:	20002708 	.word	0x20002708
 800bb18:	200026b8 	.word	0x200026b8
		if((gps_lat[i] - gps_lat[filter_n/2]) < -0.02){
 800bb1c:	4aa2      	ldr	r2, [pc, #648]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	4413      	add	r3, r2
 800bb24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	0fda      	lsrs	r2, r3, #31
 800bb2c:	4413      	add	r3, r2
 800bb2e:	105b      	asrs	r3, r3, #1
 800bb30:	4a9d      	ldr	r2, [pc, #628]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bb32:	00db      	lsls	r3, r3, #3
 800bb34:	4413      	add	r3, r2
 800bb36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4623      	mov	r3, r4
 800bb3e:	f7f4 fbbb 	bl	80002b8 <__aeabi_dsub>
 800bb42:	4603      	mov	r3, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	4618      	mov	r0, r3
 800bb48:	4621      	mov	r1, r4
 800bb4a:	a38f      	add	r3, pc, #572	; (adr r3, 800bd88 <GetNormalizedGPS+0x460>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <GetNormalizedGPS+0x256>
			gps_lat[i] = 999.999999;
 800bb5a:	4a93      	ldr	r2, [pc, #588]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	441a      	add	r2, r3
 800bb62:	a48b      	add	r4, pc, #556	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bb64:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bb68:	e9c2 3400 	strd	r3, r4, [r2]
			gps_lng[i] = 999.999999;
 800bb6c:	4a8f      	ldr	r2, [pc, #572]	; (800bdac <GetNormalizedGPS+0x484>)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	441a      	add	r2, r3
 800bb74:	a486      	add	r4, pc, #536	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bb76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bb7a:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if((gps_lat[i] - gps_lat[filter_n/2]) > 0.02){
 800bb7e:	4a8a      	ldr	r2, [pc, #552]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	4413      	add	r3, r2
 800bb86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	0fda      	lsrs	r2, r3, #31
 800bb8e:	4413      	add	r3, r2
 800bb90:	105b      	asrs	r3, r3, #1
 800bb92:	4a85      	ldr	r2, [pc, #532]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	4413      	add	r3, r2
 800bb98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4623      	mov	r3, r4
 800bba0:	f7f4 fb8a 	bl	80002b8 <__aeabi_dsub>
 800bba4:	4603      	mov	r3, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	4618      	mov	r0, r3
 800bbaa:	4621      	mov	r1, r4
 800bbac:	a37a      	add	r3, pc, #488	; (adr r3, 800bd98 <GetNormalizedGPS+0x470>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f7f4 ffc9 	bl	8000b48 <__aeabi_dcmpgt>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d011      	beq.n	800bbe0 <GetNormalizedGPS+0x2b8>
			gps_lat[i] = 999.999999;
 800bbbc:	4a7a      	ldr	r2, [pc, #488]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	441a      	add	r2, r3
 800bbc4:	a472      	add	r4, pc, #456	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bbc6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bbca:	e9c2 3400 	strd	r3, r4, [r2]
			gps_lng[i] = 999.999999;
 800bbce:	4a77      	ldr	r2, [pc, #476]	; (800bdac <GetNormalizedGPS+0x484>)
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	441a      	add	r2, r3
 800bbd6:	a46e      	add	r4, pc, #440	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bbd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bbdc:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if((gps_lng[i] - gps_lng[filter_n/2]) < -0.02){
 800bbe0:	4a72      	ldr	r2, [pc, #456]	; (800bdac <GetNormalizedGPS+0x484>)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	0fda      	lsrs	r2, r3, #31
 800bbf0:	4413      	add	r3, r2
 800bbf2:	105b      	asrs	r3, r3, #1
 800bbf4:	4a6d      	ldr	r2, [pc, #436]	; (800bdac <GetNormalizedGPS+0x484>)
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4623      	mov	r3, r4
 800bc02:	f7f4 fb59 	bl	80002b8 <__aeabi_dsub>
 800bc06:	4603      	mov	r3, r0
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	a35e      	add	r3, pc, #376	; (adr r3, 800bd88 <GetNormalizedGPS+0x460>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 ff7a 	bl	8000b0c <__aeabi_dcmplt>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d011      	beq.n	800bc42 <GetNormalizedGPS+0x31a>
			gps_lat[i] = 999.999999;
 800bc1e:	4a62      	ldr	r2, [pc, #392]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	441a      	add	r2, r3
 800bc26:	a45a      	add	r4, pc, #360	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bc28:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bc2c:	e9c2 3400 	strd	r3, r4, [r2]
			gps_lng[i] = 999.999999;
 800bc30:	4a5e      	ldr	r2, [pc, #376]	; (800bdac <GetNormalizedGPS+0x484>)
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	441a      	add	r2, r3
 800bc38:	a455      	add	r4, pc, #340	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bc3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bc3e:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if((gps_lng[i] - gps_lng[filter_n/2]) > 0.02){
 800bc42:	4a5a      	ldr	r2, [pc, #360]	; (800bdac <GetNormalizedGPS+0x484>)
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	4413      	add	r3, r2
 800bc4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	0fda      	lsrs	r2, r3, #31
 800bc52:	4413      	add	r3, r2
 800bc54:	105b      	asrs	r3, r3, #1
 800bc56:	4a55      	ldr	r2, [pc, #340]	; (800bdac <GetNormalizedGPS+0x484>)
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	4413      	add	r3, r2
 800bc5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc60:	461a      	mov	r2, r3
 800bc62:	4623      	mov	r3, r4
 800bc64:	f7f4 fb28 	bl	80002b8 <__aeabi_dsub>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	4621      	mov	r1, r4
 800bc70:	a349      	add	r3, pc, #292	; (adr r3, 800bd98 <GetNormalizedGPS+0x470>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 ff67 	bl	8000b48 <__aeabi_dcmpgt>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d011      	beq.n	800bca4 <GetNormalizedGPS+0x37c>
			gps_lat[i] = 999.999999;
 800bc80:	4a49      	ldr	r2, [pc, #292]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	441a      	add	r2, r3
 800bc88:	a441      	add	r4, pc, #260	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bc8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bc8e:	e9c2 3400 	strd	r3, r4, [r2]
			gps_lng[i] = 999.999999;
 800bc92:	4a46      	ldr	r2, [pc, #280]	; (800bdac <GetNormalizedGPS+0x484>)
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	441a      	add	r2, r3
 800bc9a:	a43d      	add	r4, pc, #244	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bc9c:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bca0:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 0;i < filter_n;i++){
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	3301      	adds	r3, #1
 800bca8:	613b      	str	r3, [r7, #16]
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	f6ff af34 	blt.w	800bb1c <GetNormalizedGPS+0x1f4>
		}
	}
	insertionSort(gps_lat,filter_n);
 800bcb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcb6:	483c      	ldr	r0, [pc, #240]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bcb8:	f000 f8d6 	bl	800be68 <insertionSort>
	insertionSort(gps_lng,filter_n);
 800bcbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcbe:	483b      	ldr	r0, [pc, #236]	; (800bdac <GetNormalizedGPS+0x484>)
 800bcc0:	f000 f8d2 	bl	800be68 <insertionSort>

	for(int i = 0;i < filter_n; i++){
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	e040      	b.n	800bd4c <GetNormalizedGPS+0x424>
		if(gps_lat[i] == 999.999999 || gps_lng[i] == 999.999999){
 800bcca:	4a37      	ldr	r2, [pc, #220]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	4413      	add	r3, r2
 800bcd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcd6:	a32e      	add	r3, pc, #184	; (adr r3, 800bd90 <GetNormalizedGPS+0x468>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	f7f4 ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10d      	bne.n	800bd02 <GetNormalizedGPS+0x3da>
 800bce6:	4a31      	ldr	r2, [pc, #196]	; (800bdac <GetNormalizedGPS+0x484>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	4413      	add	r3, r2
 800bcee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcf2:	a327      	add	r3, pc, #156	; (adr r3, 800bd90 <GetNormalizedGPS+0x468>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f7f4 fefe 	bl	8000af8 <__aeabi_dcmpeq>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <GetNormalizedGPS+0x3e0>
			filter_n = i;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800bd06:	e025      	b.n	800bd54 <GetNormalizedGPS+0x42c>
		}
		if(gps_lat[i] == 9999.999999 || gps_lng[i] == 9999.999999){
 800bd08:	4a27      	ldr	r2, [pc, #156]	; (800bda8 <GetNormalizedGPS+0x480>)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	4413      	add	r3, r2
 800bd10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd14:	a322      	add	r3, pc, #136	; (adr r3, 800bda0 <GetNormalizedGPS+0x478>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 feed 	bl	8000af8 <__aeabi_dcmpeq>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10d      	bne.n	800bd40 <GetNormalizedGPS+0x418>
 800bd24:	4a21      	ldr	r2, [pc, #132]	; (800bdac <GetNormalizedGPS+0x484>)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	4413      	add	r3, r2
 800bd2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd30:	a31b      	add	r3, pc, #108	; (adr r3, 800bda0 <GetNormalizedGPS+0x478>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f7f4 fedf 	bl	8000af8 <__aeabi_dcmpeq>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <GetNormalizedGPS+0x41e>
			filter_n = i;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800bd44:	e006      	b.n	800bd54 <GetNormalizedGPS+0x42c>
	for(int i = 0;i < filter_n; i++){
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	429a      	cmp	r2, r3
 800bd52:	dbba      	blt.n	800bcca <GetNormalizedGPS+0x3a2>
		}
	}

	if(filter_n == 0){
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d112      	bne.n	800bd80 <GetNormalizedGPS+0x458>
		*lat = 999.999999;
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	a40c      	add	r4, pc, #48	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bd5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bd62:	e9c2 3400 	strd	r3, r4, [r2]
		*lng = 999.999999;
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	a409      	add	r4, pc, #36	; (adr r4, 800bd90 <GetNormalizedGPS+0x468>)
 800bd6a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bd6e:	e9c2 3400 	strd	r3, r4, [r2]
		_STATUS.gps_fail++;
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <GetNormalizedGPS+0x488>)
 800bd74:	7c5b      	ldrb	r3, [r3, #17]
 800bd76:	3301      	adds	r3, #1
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <GetNormalizedGPS+0x488>)
 800bd7c:	745a      	strb	r2, [r3, #17]
		return;
 800bd7e:	e06a      	b.n	800be56 <GetNormalizedGPS+0x52e>
	}
	else{
		for(int i = 0;i < filter_n; i++){
 800bd80:	2300      	movs	r3, #0
 800bd82:	60bb      	str	r3, [r7, #8]
 800bd84:	e03d      	b.n	800be02 <GetNormalizedGPS+0x4da>
 800bd86:	bf00      	nop
 800bd88:	47ae147b 	.word	0x47ae147b
 800bd8c:	bf947ae1 	.word	0xbf947ae1
 800bd90:	ff79c843 	.word	0xff79c843
 800bd94:	408f3fff 	.word	0x408f3fff
 800bd98:	47ae147b 	.word	0x47ae147b
 800bd9c:	3f947ae1 	.word	0x3f947ae1
 800bda0:	fff79c84 	.word	0xfff79c84
 800bda4:	40c387ff 	.word	0x40c387ff
 800bda8:	200026d0 	.word	0x200026d0
 800bdac:	20002708 	.word	0x20002708
 800bdb0:	200026b8 	.word	0x200026b8
			*lat += gps_lat[i];
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdba:	4a28      	ldr	r2, [pc, #160]	; (800be5c <GetNormalizedGPS+0x534>)
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4623      	mov	r3, r4
 800bdca:	f7f4 fa77 	bl	80002bc <__adddf3>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	e9c2 3400 	strd	r3, r4, [r2]
			*lng += gps_lng[i];
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdde:	4a20      	ldr	r2, [pc, #128]	; (800be60 <GetNormalizedGPS+0x538>)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdea:	461a      	mov	r2, r3
 800bdec:	4623      	mov	r3, r4
 800bdee:	f7f4 fa65 	bl	80002bc <__adddf3>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	e9c2 3400 	strd	r3, r4, [r2]
		for(int i = 0;i < filter_n; i++){
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	3301      	adds	r3, #1
 800be00:	60bb      	str	r3, [r7, #8]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	429a      	cmp	r2, r3
 800be08:	dbd4      	blt.n	800bdb4 <GetNormalizedGPS+0x48c>
		}
		*lat /= filter_n;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800be10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be12:	f7f4 fb9f 	bl	8000554 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4620      	mov	r0, r4
 800be1c:	4629      	mov	r1, r5
 800be1e:	f7f4 fd2d 	bl	800087c <__aeabi_ddiv>
 800be22:	4603      	mov	r3, r0
 800be24:	460c      	mov	r4, r1
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	e9c2 3400 	strd	r3, r4, [r2]
		*lng /= filter_n;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800be32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be34:	f7f4 fb8e 	bl	8000554 <__aeabi_i2d>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	f7f4 fd1c 	bl	800087c <__aeabi_ddiv>
 800be44:	4603      	mov	r3, r0
 800be46:	460c      	mov	r4, r1
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	e9c2 3400 	strd	r3, r4, [r2]
		_STATUS.gps_fail = 0;
 800be4e:	4b05      	ldr	r3, [pc, #20]	; (800be64 <GetNormalizedGPS+0x53c>)
 800be50:	2200      	movs	r2, #0
 800be52:	745a      	strb	r2, [r3, #17]
//		L80_StandbyMode(true);
		return;
 800be54:	bf00      	nop
	}

	gnss_reset();
}
 800be56:	3728      	adds	r7, #40	; 0x28
 800be58:	46bd      	mov	sp, r7
 800be5a:	bdb0      	pop	{r4, r5, r7, pc}
 800be5c:	200026d0 	.word	0x200026d0
 800be60:	20002708 	.word	0x20002708
 800be64:	200026b8 	.word	0x200026b8

0800be68 <insertionSort>:

void insertionSort(double arr[], int n)
{
 800be68:	b590      	push	{r4, r7, lr}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
    int i, j;
    double key;
    for (i = 1; i < n; i++)
 800be72:	2301      	movs	r3, #1
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e039      	b.n	800beec <insertionSort+0x84>
    {
        key = arr[i];
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be84:	e9c7 3402 	strd	r3, r4, [r7, #8]
        j = i - 1;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	613b      	str	r3, [r7, #16]

        /* Move elements of arr[0..i-1], that are
        greater than key, to one position ahead
        of their current position */
        while (j >= 0 && arr[j] > key)
 800be8e:	e00f      	b.n	800beb0 <insertionSort+0x48>
        {
            arr[j + 1] = arr[j];
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	4413      	add	r3, r2
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	3201      	adds	r2, #1
 800be9c:	00d2      	lsls	r2, r2, #3
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	440a      	add	r2, r1
 800bea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bea6:	e9c2 3400 	strd	r3, r4, [r2]
            j = j - 1;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	3b01      	subs	r3, #1
 800beae:	613b      	str	r3, [r7, #16]
        while (j >= 0 && arr[j] > key)
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	db0e      	blt.n	800bed4 <insertionSort+0x6c>
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4413      	add	r3, r2
 800bebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bec2:	461a      	mov	r2, r3
 800bec4:	4623      	mov	r3, r4
 800bec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800beca:	f7f4 fe1f 	bl	8000b0c <__aeabi_dcmplt>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1dd      	bne.n	800be90 <insertionSort+0x28>
        }
        arr[j + 1] = key;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	3301      	adds	r3, #1
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	441a      	add	r2, r3
 800bede:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bee2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 1; i < n; i++)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	3301      	adds	r3, #1
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	dbc1      	blt.n	800be78 <insertionSort+0x10>
    }
}
 800bef4:	bf00      	nop
 800bef6:	371c      	adds	r7, #28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd90      	pop	{r4, r7, pc}

0800befc <atof>:
 800befc:	2100      	movs	r1, #0
 800befe:	f001 be6b 	b.w	800dbd8 <strtod>

0800bf02 <atoi>:
 800bf02:	220a      	movs	r2, #10
 800bf04:	2100      	movs	r1, #0
 800bf06:	f001 bf5d 	b.w	800ddc4 <strtol>
	...

0800bf0c <__errno>:
 800bf0c:	4b01      	ldr	r3, [pc, #4]	; (800bf14 <__errno+0x8>)
 800bf0e:	6818      	ldr	r0, [r3, #0]
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20000014 	.word	0x20000014

0800bf18 <__libc_init_array>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	4e0d      	ldr	r6, [pc, #52]	; (800bf50 <__libc_init_array+0x38>)
 800bf1c:	4c0d      	ldr	r4, [pc, #52]	; (800bf54 <__libc_init_array+0x3c>)
 800bf1e:	1ba4      	subs	r4, r4, r6
 800bf20:	10a4      	asrs	r4, r4, #2
 800bf22:	2500      	movs	r5, #0
 800bf24:	42a5      	cmp	r5, r4
 800bf26:	d109      	bne.n	800bf3c <__libc_init_array+0x24>
 800bf28:	4e0b      	ldr	r6, [pc, #44]	; (800bf58 <__libc_init_array+0x40>)
 800bf2a:	4c0c      	ldr	r4, [pc, #48]	; (800bf5c <__libc_init_array+0x44>)
 800bf2c:	f004 ffee 	bl	8010f0c <_init>
 800bf30:	1ba4      	subs	r4, r4, r6
 800bf32:	10a4      	asrs	r4, r4, #2
 800bf34:	2500      	movs	r5, #0
 800bf36:	42a5      	cmp	r5, r4
 800bf38:	d105      	bne.n	800bf46 <__libc_init_array+0x2e>
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf40:	4798      	blx	r3
 800bf42:	3501      	adds	r5, #1
 800bf44:	e7ee      	b.n	800bf24 <__libc_init_array+0xc>
 800bf46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf4a:	4798      	blx	r3
 800bf4c:	3501      	adds	r5, #1
 800bf4e:	e7f2      	b.n	800bf36 <__libc_init_array+0x1e>
 800bf50:	08012434 	.word	0x08012434
 800bf54:	08012434 	.word	0x08012434
 800bf58:	08012434 	.word	0x08012434
 800bf5c:	08012438 	.word	0x08012438

0800bf60 <memcpy>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	1e43      	subs	r3, r0, #1
 800bf64:	440a      	add	r2, r1
 800bf66:	4291      	cmp	r1, r2
 800bf68:	d100      	bne.n	800bf6c <memcpy+0xc>
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf74:	e7f7      	b.n	800bf66 <memcpy+0x6>

0800bf76 <memset>:
 800bf76:	4402      	add	r2, r0
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d100      	bne.n	800bf80 <memset+0xa>
 800bf7e:	4770      	bx	lr
 800bf80:	f803 1b01 	strb.w	r1, [r3], #1
 800bf84:	e7f9      	b.n	800bf7a <memset+0x4>

0800bf86 <__cvt>:
 800bf86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8a:	ec55 4b10 	vmov	r4, r5, d0
 800bf8e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bf90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	460e      	mov	r6, r1
 800bf98:	4691      	mov	r9, r2
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	bfb8      	it	lt
 800bf9e:	4622      	movlt	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	f027 0720 	bic.w	r7, r7, #32
 800bfa6:	bfbb      	ittet	lt
 800bfa8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bfac:	461d      	movlt	r5, r3
 800bfae:	2300      	movge	r3, #0
 800bfb0:	232d      	movlt	r3, #45	; 0x2d
 800bfb2:	bfb8      	it	lt
 800bfb4:	4614      	movlt	r4, r2
 800bfb6:	2f46      	cmp	r7, #70	; 0x46
 800bfb8:	700b      	strb	r3, [r1, #0]
 800bfba:	d004      	beq.n	800bfc6 <__cvt+0x40>
 800bfbc:	2f45      	cmp	r7, #69	; 0x45
 800bfbe:	d100      	bne.n	800bfc2 <__cvt+0x3c>
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	2102      	movs	r1, #2
 800bfc4:	e000      	b.n	800bfc8 <__cvt+0x42>
 800bfc6:	2103      	movs	r1, #3
 800bfc8:	ab03      	add	r3, sp, #12
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	ab02      	add	r3, sp, #8
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	4653      	mov	r3, sl
 800bfd4:	ec45 4b10 	vmov	d0, r4, r5
 800bfd8:	f001 ffba 	bl	800df50 <_dtoa_r>
 800bfdc:	2f47      	cmp	r7, #71	; 0x47
 800bfde:	4680      	mov	r8, r0
 800bfe0:	d102      	bne.n	800bfe8 <__cvt+0x62>
 800bfe2:	f019 0f01 	tst.w	r9, #1
 800bfe6:	d026      	beq.n	800c036 <__cvt+0xb0>
 800bfe8:	2f46      	cmp	r7, #70	; 0x46
 800bfea:	eb08 0906 	add.w	r9, r8, r6
 800bfee:	d111      	bne.n	800c014 <__cvt+0x8e>
 800bff0:	f898 3000 	ldrb.w	r3, [r8]
 800bff4:	2b30      	cmp	r3, #48	; 0x30
 800bff6:	d10a      	bne.n	800c00e <__cvt+0x88>
 800bff8:	2200      	movs	r2, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	4620      	mov	r0, r4
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 fd7a 	bl	8000af8 <__aeabi_dcmpeq>
 800c004:	b918      	cbnz	r0, 800c00e <__cvt+0x88>
 800c006:	f1c6 0601 	rsb	r6, r6, #1
 800c00a:	f8ca 6000 	str.w	r6, [sl]
 800c00e:	f8da 3000 	ldr.w	r3, [sl]
 800c012:	4499      	add	r9, r3
 800c014:	2200      	movs	r2, #0
 800c016:	2300      	movs	r3, #0
 800c018:	4620      	mov	r0, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	f7f4 fd6c 	bl	8000af8 <__aeabi_dcmpeq>
 800c020:	b938      	cbnz	r0, 800c032 <__cvt+0xac>
 800c022:	2230      	movs	r2, #48	; 0x30
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	454b      	cmp	r3, r9
 800c028:	d205      	bcs.n	800c036 <__cvt+0xb0>
 800c02a:	1c59      	adds	r1, r3, #1
 800c02c:	9103      	str	r1, [sp, #12]
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	e7f8      	b.n	800c024 <__cvt+0x9e>
 800c032:	f8cd 900c 	str.w	r9, [sp, #12]
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03a:	eba3 0308 	sub.w	r3, r3, r8
 800c03e:	4640      	mov	r0, r8
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	b004      	add	sp, #16
 800c044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c048 <__exponent>:
 800c048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c04a:	2900      	cmp	r1, #0
 800c04c:	4604      	mov	r4, r0
 800c04e:	bfba      	itte	lt
 800c050:	4249      	neglt	r1, r1
 800c052:	232d      	movlt	r3, #45	; 0x2d
 800c054:	232b      	movge	r3, #43	; 0x2b
 800c056:	2909      	cmp	r1, #9
 800c058:	f804 2b02 	strb.w	r2, [r4], #2
 800c05c:	7043      	strb	r3, [r0, #1]
 800c05e:	dd20      	ble.n	800c0a2 <__exponent+0x5a>
 800c060:	f10d 0307 	add.w	r3, sp, #7
 800c064:	461f      	mov	r7, r3
 800c066:	260a      	movs	r6, #10
 800c068:	fb91 f5f6 	sdiv	r5, r1, r6
 800c06c:	fb06 1115 	mls	r1, r6, r5, r1
 800c070:	3130      	adds	r1, #48	; 0x30
 800c072:	2d09      	cmp	r5, #9
 800c074:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c078:	f103 32ff 	add.w	r2, r3, #4294967295
 800c07c:	4629      	mov	r1, r5
 800c07e:	dc09      	bgt.n	800c094 <__exponent+0x4c>
 800c080:	3130      	adds	r1, #48	; 0x30
 800c082:	3b02      	subs	r3, #2
 800c084:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c088:	42bb      	cmp	r3, r7
 800c08a:	4622      	mov	r2, r4
 800c08c:	d304      	bcc.n	800c098 <__exponent+0x50>
 800c08e:	1a10      	subs	r0, r2, r0
 800c090:	b003      	add	sp, #12
 800c092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c094:	4613      	mov	r3, r2
 800c096:	e7e7      	b.n	800c068 <__exponent+0x20>
 800c098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09c:	f804 2b01 	strb.w	r2, [r4], #1
 800c0a0:	e7f2      	b.n	800c088 <__exponent+0x40>
 800c0a2:	2330      	movs	r3, #48	; 0x30
 800c0a4:	4419      	add	r1, r3
 800c0a6:	7083      	strb	r3, [r0, #2]
 800c0a8:	1d02      	adds	r2, r0, #4
 800c0aa:	70c1      	strb	r1, [r0, #3]
 800c0ac:	e7ef      	b.n	800c08e <__exponent+0x46>
	...

0800c0b0 <_printf_float>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	b08d      	sub	sp, #52	; 0x34
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c0bc:	4616      	mov	r6, r2
 800c0be:	461f      	mov	r7, r3
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	f003 f9b1 	bl	800f428 <_localeconv_r>
 800c0c6:	6803      	ldr	r3, [r0, #0]
 800c0c8:	9304      	str	r3, [sp, #16]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7f4 f892 	bl	80001f4 <strlen>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d8:	9005      	str	r0, [sp, #20]
 800c0da:	3307      	adds	r3, #7
 800c0dc:	f023 0307 	bic.w	r3, r3, #7
 800c0e0:	f103 0208 	add.w	r2, r3, #8
 800c0e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0e8:	f8d4 b000 	ldr.w	fp, [r4]
 800c0ec:	f8c8 2000 	str.w	r2, [r8]
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	f8cd 8018 	str.w	r8, [sp, #24]
 800c106:	f04f 32ff 	mov.w	r2, #4294967295
 800c10a:	4ba7      	ldr	r3, [pc, #668]	; (800c3a8 <_printf_float+0x2f8>)
 800c10c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c110:	f7f4 fd24 	bl	8000b5c <__aeabi_dcmpun>
 800c114:	bb70      	cbnz	r0, 800c174 <_printf_float+0xc4>
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	4ba3      	ldr	r3, [pc, #652]	; (800c3a8 <_printf_float+0x2f8>)
 800c11c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c120:	f7f4 fcfe 	bl	8000b20 <__aeabi_dcmple>
 800c124:	bb30      	cbnz	r0, 800c174 <_printf_float+0xc4>
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fced 	bl	8000b0c <__aeabi_dcmplt>
 800c132:	b110      	cbz	r0, 800c13a <_printf_float+0x8a>
 800c134:	232d      	movs	r3, #45	; 0x2d
 800c136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c13a:	4a9c      	ldr	r2, [pc, #624]	; (800c3ac <_printf_float+0x2fc>)
 800c13c:	4b9c      	ldr	r3, [pc, #624]	; (800c3b0 <_printf_float+0x300>)
 800c13e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c142:	bf8c      	ite	hi
 800c144:	4690      	movhi	r8, r2
 800c146:	4698      	movls	r8, r3
 800c148:	2303      	movs	r3, #3
 800c14a:	f02b 0204 	bic.w	r2, fp, #4
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	6022      	str	r2, [r4, #0]
 800c152:	f04f 0900 	mov.w	r9, #0
 800c156:	9700      	str	r7, [sp, #0]
 800c158:	4633      	mov	r3, r6
 800c15a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c15c:	4621      	mov	r1, r4
 800c15e:	4628      	mov	r0, r5
 800c160:	f000 f9e6 	bl	800c530 <_printf_common>
 800c164:	3001      	adds	r0, #1
 800c166:	f040 808d 	bne.w	800c284 <_printf_float+0x1d4>
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	b00d      	add	sp, #52	; 0x34
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	4640      	mov	r0, r8
 800c17a:	4649      	mov	r1, r9
 800c17c:	f7f4 fcee 	bl	8000b5c <__aeabi_dcmpun>
 800c180:	b110      	cbz	r0, 800c188 <_printf_float+0xd8>
 800c182:	4a8c      	ldr	r2, [pc, #560]	; (800c3b4 <_printf_float+0x304>)
 800c184:	4b8c      	ldr	r3, [pc, #560]	; (800c3b8 <_printf_float+0x308>)
 800c186:	e7da      	b.n	800c13e <_printf_float+0x8e>
 800c188:	6861      	ldr	r1, [r4, #4]
 800c18a:	1c4b      	adds	r3, r1, #1
 800c18c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c190:	a80a      	add	r0, sp, #40	; 0x28
 800c192:	d13e      	bne.n	800c212 <_printf_float+0x162>
 800c194:	2306      	movs	r3, #6
 800c196:	6063      	str	r3, [r4, #4]
 800c198:	2300      	movs	r3, #0
 800c19a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c19e:	ab09      	add	r3, sp, #36	; 0x24
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	ec49 8b10 	vmov	d0, r8, r9
 800c1a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c1aa:	6022      	str	r2, [r4, #0]
 800c1ac:	f8cd a004 	str.w	sl, [sp, #4]
 800c1b0:	6861      	ldr	r1, [r4, #4]
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7ff fee7 	bl	800bf86 <__cvt>
 800c1b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c1bc:	2b47      	cmp	r3, #71	; 0x47
 800c1be:	4680      	mov	r8, r0
 800c1c0:	d109      	bne.n	800c1d6 <_printf_float+0x126>
 800c1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c4:	1cd8      	adds	r0, r3, #3
 800c1c6:	db02      	blt.n	800c1ce <_printf_float+0x11e>
 800c1c8:	6862      	ldr	r2, [r4, #4]
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	dd47      	ble.n	800c25e <_printf_float+0x1ae>
 800c1ce:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1d2:	fa5f fa8a 	uxtb.w	sl, sl
 800c1d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c1da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1dc:	d824      	bhi.n	800c228 <_printf_float+0x178>
 800c1de:	3901      	subs	r1, #1
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1e6:	9109      	str	r1, [sp, #36]	; 0x24
 800c1e8:	f7ff ff2e 	bl	800c048 <__exponent>
 800c1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ee:	1813      	adds	r3, r2, r0
 800c1f0:	2a01      	cmp	r2, #1
 800c1f2:	4681      	mov	r9, r0
 800c1f4:	6123      	str	r3, [r4, #16]
 800c1f6:	dc02      	bgt.n	800c1fe <_printf_float+0x14e>
 800c1f8:	6822      	ldr	r2, [r4, #0]
 800c1fa:	07d1      	lsls	r1, r2, #31
 800c1fc:	d501      	bpl.n	800c202 <_printf_float+0x152>
 800c1fe:	3301      	adds	r3, #1
 800c200:	6123      	str	r3, [r4, #16]
 800c202:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0a5      	beq.n	800c156 <_printf_float+0xa6>
 800c20a:	232d      	movs	r3, #45	; 0x2d
 800c20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c210:	e7a1      	b.n	800c156 <_printf_float+0xa6>
 800c212:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c216:	f000 8177 	beq.w	800c508 <_printf_float+0x458>
 800c21a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c21e:	d1bb      	bne.n	800c198 <_printf_float+0xe8>
 800c220:	2900      	cmp	r1, #0
 800c222:	d1b9      	bne.n	800c198 <_printf_float+0xe8>
 800c224:	2301      	movs	r3, #1
 800c226:	e7b6      	b.n	800c196 <_printf_float+0xe6>
 800c228:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c22c:	d119      	bne.n	800c262 <_printf_float+0x1b2>
 800c22e:	2900      	cmp	r1, #0
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	dd0c      	ble.n	800c24e <_printf_float+0x19e>
 800c234:	6121      	str	r1, [r4, #16]
 800c236:	b913      	cbnz	r3, 800c23e <_printf_float+0x18e>
 800c238:	6822      	ldr	r2, [r4, #0]
 800c23a:	07d2      	lsls	r2, r2, #31
 800c23c:	d502      	bpl.n	800c244 <_printf_float+0x194>
 800c23e:	3301      	adds	r3, #1
 800c240:	440b      	add	r3, r1
 800c242:	6123      	str	r3, [r4, #16]
 800c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c246:	65a3      	str	r3, [r4, #88]	; 0x58
 800c248:	f04f 0900 	mov.w	r9, #0
 800c24c:	e7d9      	b.n	800c202 <_printf_float+0x152>
 800c24e:	b913      	cbnz	r3, 800c256 <_printf_float+0x1a6>
 800c250:	6822      	ldr	r2, [r4, #0]
 800c252:	07d0      	lsls	r0, r2, #31
 800c254:	d501      	bpl.n	800c25a <_printf_float+0x1aa>
 800c256:	3302      	adds	r3, #2
 800c258:	e7f3      	b.n	800c242 <_printf_float+0x192>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e7f1      	b.n	800c242 <_printf_float+0x192>
 800c25e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c262:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c266:	4293      	cmp	r3, r2
 800c268:	db05      	blt.n	800c276 <_printf_float+0x1c6>
 800c26a:	6822      	ldr	r2, [r4, #0]
 800c26c:	6123      	str	r3, [r4, #16]
 800c26e:	07d1      	lsls	r1, r2, #31
 800c270:	d5e8      	bpl.n	800c244 <_printf_float+0x194>
 800c272:	3301      	adds	r3, #1
 800c274:	e7e5      	b.n	800c242 <_printf_float+0x192>
 800c276:	2b00      	cmp	r3, #0
 800c278:	bfd4      	ite	le
 800c27a:	f1c3 0302 	rsble	r3, r3, #2
 800c27e:	2301      	movgt	r3, #1
 800c280:	4413      	add	r3, r2
 800c282:	e7de      	b.n	800c242 <_printf_float+0x192>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	055a      	lsls	r2, r3, #21
 800c288:	d407      	bmi.n	800c29a <_printf_float+0x1ea>
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	4642      	mov	r2, r8
 800c28e:	4631      	mov	r1, r6
 800c290:	4628      	mov	r0, r5
 800c292:	47b8      	blx	r7
 800c294:	3001      	adds	r0, #1
 800c296:	d12b      	bne.n	800c2f0 <_printf_float+0x240>
 800c298:	e767      	b.n	800c16a <_printf_float+0xba>
 800c29a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c29e:	f240 80dc 	bls.w	800c45a <_printf_float+0x3aa>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2aa:	f7f4 fc25 	bl	8000af8 <__aeabi_dcmpeq>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d033      	beq.n	800c31a <_printf_float+0x26a>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	4a41      	ldr	r2, [pc, #260]	; (800c3bc <_printf_float+0x30c>)
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b8      	blx	r7
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f43f af54 	beq.w	800c16a <_printf_float+0xba>
 800c2c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	db02      	blt.n	800c2d0 <_printf_float+0x220>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	07d8      	lsls	r0, r3, #31
 800c2ce:	d50f      	bpl.n	800c2f0 <_printf_float+0x240>
 800c2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f af45 	beq.w	800c16a <_printf_float+0xba>
 800c2e0:	f04f 0800 	mov.w	r8, #0
 800c2e4:	f104 091a 	add.w	r9, r4, #26
 800c2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	4543      	cmp	r3, r8
 800c2ee:	dc09      	bgt.n	800c304 <_printf_float+0x254>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	079b      	lsls	r3, r3, #30
 800c2f4:	f100 8103 	bmi.w	800c4fe <_printf_float+0x44e>
 800c2f8:	68e0      	ldr	r0, [r4, #12]
 800c2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2fc:	4298      	cmp	r0, r3
 800c2fe:	bfb8      	it	lt
 800c300:	4618      	movlt	r0, r3
 800c302:	e734      	b.n	800c16e <_printf_float+0xbe>
 800c304:	2301      	movs	r3, #1
 800c306:	464a      	mov	r2, r9
 800c308:	4631      	mov	r1, r6
 800c30a:	4628      	mov	r0, r5
 800c30c:	47b8      	blx	r7
 800c30e:	3001      	adds	r0, #1
 800c310:	f43f af2b 	beq.w	800c16a <_printf_float+0xba>
 800c314:	f108 0801 	add.w	r8, r8, #1
 800c318:	e7e6      	b.n	800c2e8 <_printf_float+0x238>
 800c31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dc2b      	bgt.n	800c378 <_printf_float+0x2c8>
 800c320:	2301      	movs	r3, #1
 800c322:	4a26      	ldr	r2, [pc, #152]	; (800c3bc <_printf_float+0x30c>)
 800c324:	4631      	mov	r1, r6
 800c326:	4628      	mov	r0, r5
 800c328:	47b8      	blx	r7
 800c32a:	3001      	adds	r0, #1
 800c32c:	f43f af1d 	beq.w	800c16a <_printf_float+0xba>
 800c330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c332:	b923      	cbnz	r3, 800c33e <_printf_float+0x28e>
 800c334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c336:	b913      	cbnz	r3, 800c33e <_printf_float+0x28e>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	07d9      	lsls	r1, r3, #31
 800c33c:	d5d8      	bpl.n	800c2f0 <_printf_float+0x240>
 800c33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c342:	4631      	mov	r1, r6
 800c344:	4628      	mov	r0, r5
 800c346:	47b8      	blx	r7
 800c348:	3001      	adds	r0, #1
 800c34a:	f43f af0e 	beq.w	800c16a <_printf_float+0xba>
 800c34e:	f04f 0900 	mov.w	r9, #0
 800c352:	f104 0a1a 	add.w	sl, r4, #26
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	425b      	negs	r3, r3
 800c35a:	454b      	cmp	r3, r9
 800c35c:	dc01      	bgt.n	800c362 <_printf_float+0x2b2>
 800c35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c360:	e794      	b.n	800c28c <_printf_float+0x1dc>
 800c362:	2301      	movs	r3, #1
 800c364:	4652      	mov	r2, sl
 800c366:	4631      	mov	r1, r6
 800c368:	4628      	mov	r0, r5
 800c36a:	47b8      	blx	r7
 800c36c:	3001      	adds	r0, #1
 800c36e:	f43f aefc 	beq.w	800c16a <_printf_float+0xba>
 800c372:	f109 0901 	add.w	r9, r9, #1
 800c376:	e7ee      	b.n	800c356 <_printf_float+0x2a6>
 800c378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c37a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c37c:	429a      	cmp	r2, r3
 800c37e:	bfa8      	it	ge
 800c380:	461a      	movge	r2, r3
 800c382:	2a00      	cmp	r2, #0
 800c384:	4691      	mov	r9, r2
 800c386:	dd07      	ble.n	800c398 <_printf_float+0x2e8>
 800c388:	4613      	mov	r3, r2
 800c38a:	4631      	mov	r1, r6
 800c38c:	4642      	mov	r2, r8
 800c38e:	4628      	mov	r0, r5
 800c390:	47b8      	blx	r7
 800c392:	3001      	adds	r0, #1
 800c394:	f43f aee9 	beq.w	800c16a <_printf_float+0xba>
 800c398:	f104 031a 	add.w	r3, r4, #26
 800c39c:	f04f 0b00 	mov.w	fp, #0
 800c3a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3a4:	9306      	str	r3, [sp, #24]
 800c3a6:	e015      	b.n	800c3d4 <_printf_float+0x324>
 800c3a8:	7fefffff 	.word	0x7fefffff
 800c3ac:	080120f8 	.word	0x080120f8
 800c3b0:	080120f4 	.word	0x080120f4
 800c3b4:	08012100 	.word	0x08012100
 800c3b8:	080120fc 	.word	0x080120fc
 800c3bc:	08012323 	.word	0x08012323
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	9a06      	ldr	r2, [sp, #24]
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	47b8      	blx	r7
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	f43f aecd 	beq.w	800c16a <_printf_float+0xba>
 800c3d0:	f10b 0b01 	add.w	fp, fp, #1
 800c3d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c3d8:	ebaa 0309 	sub.w	r3, sl, r9
 800c3dc:	455b      	cmp	r3, fp
 800c3de:	dcef      	bgt.n	800c3c0 <_printf_float+0x310>
 800c3e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	44d0      	add	r8, sl
 800c3e8:	db15      	blt.n	800c416 <_printf_float+0x366>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	07da      	lsls	r2, r3, #31
 800c3ee:	d412      	bmi.n	800c416 <_printf_float+0x366>
 800c3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3f4:	eba3 020a 	sub.w	r2, r3, sl
 800c3f8:	eba3 0a01 	sub.w	sl, r3, r1
 800c3fc:	4592      	cmp	sl, r2
 800c3fe:	bfa8      	it	ge
 800c400:	4692      	movge	sl, r2
 800c402:	f1ba 0f00 	cmp.w	sl, #0
 800c406:	dc0e      	bgt.n	800c426 <_printf_float+0x376>
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c410:	f104 091a 	add.w	r9, r4, #26
 800c414:	e019      	b.n	800c44a <_printf_float+0x39a>
 800c416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c41a:	4631      	mov	r1, r6
 800c41c:	4628      	mov	r0, r5
 800c41e:	47b8      	blx	r7
 800c420:	3001      	adds	r0, #1
 800c422:	d1e5      	bne.n	800c3f0 <_printf_float+0x340>
 800c424:	e6a1      	b.n	800c16a <_printf_float+0xba>
 800c426:	4653      	mov	r3, sl
 800c428:	4642      	mov	r2, r8
 800c42a:	4631      	mov	r1, r6
 800c42c:	4628      	mov	r0, r5
 800c42e:	47b8      	blx	r7
 800c430:	3001      	adds	r0, #1
 800c432:	d1e9      	bne.n	800c408 <_printf_float+0x358>
 800c434:	e699      	b.n	800c16a <_printf_float+0xba>
 800c436:	2301      	movs	r3, #1
 800c438:	464a      	mov	r2, r9
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	f43f ae92 	beq.w	800c16a <_printf_float+0xba>
 800c446:	f108 0801 	add.w	r8, r8, #1
 800c44a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	eba3 030a 	sub.w	r3, r3, sl
 800c454:	4543      	cmp	r3, r8
 800c456:	dcee      	bgt.n	800c436 <_printf_float+0x386>
 800c458:	e74a      	b.n	800c2f0 <_printf_float+0x240>
 800c45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c45c:	2a01      	cmp	r2, #1
 800c45e:	dc01      	bgt.n	800c464 <_printf_float+0x3b4>
 800c460:	07db      	lsls	r3, r3, #31
 800c462:	d53a      	bpl.n	800c4da <_printf_float+0x42a>
 800c464:	2301      	movs	r3, #1
 800c466:	4642      	mov	r2, r8
 800c468:	4631      	mov	r1, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	47b8      	blx	r7
 800c46e:	3001      	adds	r0, #1
 800c470:	f43f ae7b 	beq.w	800c16a <_printf_float+0xba>
 800c474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c478:	4631      	mov	r1, r6
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b8      	blx	r7
 800c47e:	3001      	adds	r0, #1
 800c480:	f108 0801 	add.w	r8, r8, #1
 800c484:	f43f ae71 	beq.w	800c16a <_printf_float+0xba>
 800c488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48a:	2200      	movs	r2, #0
 800c48c:	f103 3aff 	add.w	sl, r3, #4294967295
 800c490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c494:	2300      	movs	r3, #0
 800c496:	f7f4 fb2f 	bl	8000af8 <__aeabi_dcmpeq>
 800c49a:	b9c8      	cbnz	r0, 800c4d0 <_printf_float+0x420>
 800c49c:	4653      	mov	r3, sl
 800c49e:	4642      	mov	r2, r8
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d10e      	bne.n	800c4c8 <_printf_float+0x418>
 800c4aa:	e65e      	b.n	800c16a <_printf_float+0xba>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	4652      	mov	r2, sl
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	47b8      	blx	r7
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	f43f ae57 	beq.w	800c16a <_printf_float+0xba>
 800c4bc:	f108 0801 	add.w	r8, r8, #1
 800c4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	4543      	cmp	r3, r8
 800c4c6:	dcf1      	bgt.n	800c4ac <_printf_float+0x3fc>
 800c4c8:	464b      	mov	r3, r9
 800c4ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4ce:	e6de      	b.n	800c28e <_printf_float+0x1de>
 800c4d0:	f04f 0800 	mov.w	r8, #0
 800c4d4:	f104 0a1a 	add.w	sl, r4, #26
 800c4d8:	e7f2      	b.n	800c4c0 <_printf_float+0x410>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e7df      	b.n	800c49e <_printf_float+0x3ee>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	464a      	mov	r2, r9
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	47b8      	blx	r7
 800c4e8:	3001      	adds	r0, #1
 800c4ea:	f43f ae3e 	beq.w	800c16a <_printf_float+0xba>
 800c4ee:	f108 0801 	add.w	r8, r8, #1
 800c4f2:	68e3      	ldr	r3, [r4, #12]
 800c4f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	dcf0      	bgt.n	800c4de <_printf_float+0x42e>
 800c4fc:	e6fc      	b.n	800c2f8 <_printf_float+0x248>
 800c4fe:	f04f 0800 	mov.w	r8, #0
 800c502:	f104 0919 	add.w	r9, r4, #25
 800c506:	e7f4      	b.n	800c4f2 <_printf_float+0x442>
 800c508:	2900      	cmp	r1, #0
 800c50a:	f43f ae8b 	beq.w	800c224 <_printf_float+0x174>
 800c50e:	2300      	movs	r3, #0
 800c510:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c514:	ab09      	add	r3, sp, #36	; 0x24
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	ec49 8b10 	vmov	d0, r8, r9
 800c51c:	6022      	str	r2, [r4, #0]
 800c51e:	f8cd a004 	str.w	sl, [sp, #4]
 800c522:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c526:	4628      	mov	r0, r5
 800c528:	f7ff fd2d 	bl	800bf86 <__cvt>
 800c52c:	4680      	mov	r8, r0
 800c52e:	e648      	b.n	800c1c2 <_printf_float+0x112>

0800c530 <_printf_common>:
 800c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	4691      	mov	r9, r2
 800c536:	461f      	mov	r7, r3
 800c538:	688a      	ldr	r2, [r1, #8]
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c540:	4293      	cmp	r3, r2
 800c542:	bfb8      	it	lt
 800c544:	4613      	movlt	r3, r2
 800c546:	f8c9 3000 	str.w	r3, [r9]
 800c54a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c54e:	4606      	mov	r6, r0
 800c550:	460c      	mov	r4, r1
 800c552:	b112      	cbz	r2, 800c55a <_printf_common+0x2a>
 800c554:	3301      	adds	r3, #1
 800c556:	f8c9 3000 	str.w	r3, [r9]
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	0699      	lsls	r1, r3, #26
 800c55e:	bf42      	ittt	mi
 800c560:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c564:	3302      	addmi	r3, #2
 800c566:	f8c9 3000 	strmi.w	r3, [r9]
 800c56a:	6825      	ldr	r5, [r4, #0]
 800c56c:	f015 0506 	ands.w	r5, r5, #6
 800c570:	d107      	bne.n	800c582 <_printf_common+0x52>
 800c572:	f104 0a19 	add.w	sl, r4, #25
 800c576:	68e3      	ldr	r3, [r4, #12]
 800c578:	f8d9 2000 	ldr.w	r2, [r9]
 800c57c:	1a9b      	subs	r3, r3, r2
 800c57e:	42ab      	cmp	r3, r5
 800c580:	dc28      	bgt.n	800c5d4 <_printf_common+0xa4>
 800c582:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c586:	6822      	ldr	r2, [r4, #0]
 800c588:	3300      	adds	r3, #0
 800c58a:	bf18      	it	ne
 800c58c:	2301      	movne	r3, #1
 800c58e:	0692      	lsls	r2, r2, #26
 800c590:	d42d      	bmi.n	800c5ee <_printf_common+0xbe>
 800c592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c596:	4639      	mov	r1, r7
 800c598:	4630      	mov	r0, r6
 800c59a:	47c0      	blx	r8
 800c59c:	3001      	adds	r0, #1
 800c59e:	d020      	beq.n	800c5e2 <_printf_common+0xb2>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	68e5      	ldr	r5, [r4, #12]
 800c5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800c5a8:	f003 0306 	and.w	r3, r3, #6
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	bf08      	it	eq
 800c5b0:	1aad      	subeq	r5, r5, r2
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	6922      	ldr	r2, [r4, #16]
 800c5b6:	bf0c      	ite	eq
 800c5b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5bc:	2500      	movne	r5, #0
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	bfc4      	itt	gt
 800c5c2:	1a9b      	subgt	r3, r3, r2
 800c5c4:	18ed      	addgt	r5, r5, r3
 800c5c6:	f04f 0900 	mov.w	r9, #0
 800c5ca:	341a      	adds	r4, #26
 800c5cc:	454d      	cmp	r5, r9
 800c5ce:	d11a      	bne.n	800c606 <_printf_common+0xd6>
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e008      	b.n	800c5e6 <_printf_common+0xb6>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	4652      	mov	r2, sl
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4630      	mov	r0, r6
 800c5dc:	47c0      	blx	r8
 800c5de:	3001      	adds	r0, #1
 800c5e0:	d103      	bne.n	800c5ea <_printf_common+0xba>
 800c5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ea:	3501      	adds	r5, #1
 800c5ec:	e7c3      	b.n	800c576 <_printf_common+0x46>
 800c5ee:	18e1      	adds	r1, r4, r3
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	2030      	movs	r0, #48	; 0x30
 800c5f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5f8:	4422      	add	r2, r4
 800c5fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c602:	3302      	adds	r3, #2
 800c604:	e7c5      	b.n	800c592 <_printf_common+0x62>
 800c606:	2301      	movs	r3, #1
 800c608:	4622      	mov	r2, r4
 800c60a:	4639      	mov	r1, r7
 800c60c:	4630      	mov	r0, r6
 800c60e:	47c0      	blx	r8
 800c610:	3001      	adds	r0, #1
 800c612:	d0e6      	beq.n	800c5e2 <_printf_common+0xb2>
 800c614:	f109 0901 	add.w	r9, r9, #1
 800c618:	e7d8      	b.n	800c5cc <_printf_common+0x9c>
	...

0800c61c <_printf_i>:
 800c61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c620:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c624:	460c      	mov	r4, r1
 800c626:	7e09      	ldrb	r1, [r1, #24]
 800c628:	b085      	sub	sp, #20
 800c62a:	296e      	cmp	r1, #110	; 0x6e
 800c62c:	4617      	mov	r7, r2
 800c62e:	4606      	mov	r6, r0
 800c630:	4698      	mov	r8, r3
 800c632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c634:	f000 80b3 	beq.w	800c79e <_printf_i+0x182>
 800c638:	d822      	bhi.n	800c680 <_printf_i+0x64>
 800c63a:	2963      	cmp	r1, #99	; 0x63
 800c63c:	d036      	beq.n	800c6ac <_printf_i+0x90>
 800c63e:	d80a      	bhi.n	800c656 <_printf_i+0x3a>
 800c640:	2900      	cmp	r1, #0
 800c642:	f000 80b9 	beq.w	800c7b8 <_printf_i+0x19c>
 800c646:	2958      	cmp	r1, #88	; 0x58
 800c648:	f000 8083 	beq.w	800c752 <_printf_i+0x136>
 800c64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c650:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c654:	e032      	b.n	800c6bc <_printf_i+0xa0>
 800c656:	2964      	cmp	r1, #100	; 0x64
 800c658:	d001      	beq.n	800c65e <_printf_i+0x42>
 800c65a:	2969      	cmp	r1, #105	; 0x69
 800c65c:	d1f6      	bne.n	800c64c <_printf_i+0x30>
 800c65e:	6820      	ldr	r0, [r4, #0]
 800c660:	6813      	ldr	r3, [r2, #0]
 800c662:	0605      	lsls	r5, r0, #24
 800c664:	f103 0104 	add.w	r1, r3, #4
 800c668:	d52a      	bpl.n	800c6c0 <_printf_i+0xa4>
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	da03      	bge.n	800c67a <_printf_i+0x5e>
 800c672:	222d      	movs	r2, #45	; 0x2d
 800c674:	425b      	negs	r3, r3
 800c676:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c67a:	486f      	ldr	r0, [pc, #444]	; (800c838 <_printf_i+0x21c>)
 800c67c:	220a      	movs	r2, #10
 800c67e:	e039      	b.n	800c6f4 <_printf_i+0xd8>
 800c680:	2973      	cmp	r1, #115	; 0x73
 800c682:	f000 809d 	beq.w	800c7c0 <_printf_i+0x1a4>
 800c686:	d808      	bhi.n	800c69a <_printf_i+0x7e>
 800c688:	296f      	cmp	r1, #111	; 0x6f
 800c68a:	d020      	beq.n	800c6ce <_printf_i+0xb2>
 800c68c:	2970      	cmp	r1, #112	; 0x70
 800c68e:	d1dd      	bne.n	800c64c <_printf_i+0x30>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	f043 0320 	orr.w	r3, r3, #32
 800c696:	6023      	str	r3, [r4, #0]
 800c698:	e003      	b.n	800c6a2 <_printf_i+0x86>
 800c69a:	2975      	cmp	r1, #117	; 0x75
 800c69c:	d017      	beq.n	800c6ce <_printf_i+0xb2>
 800c69e:	2978      	cmp	r1, #120	; 0x78
 800c6a0:	d1d4      	bne.n	800c64c <_printf_i+0x30>
 800c6a2:	2378      	movs	r3, #120	; 0x78
 800c6a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6a8:	4864      	ldr	r0, [pc, #400]	; (800c83c <_printf_i+0x220>)
 800c6aa:	e055      	b.n	800c758 <_printf_i+0x13c>
 800c6ac:	6813      	ldr	r3, [r2, #0]
 800c6ae:	1d19      	adds	r1, r3, #4
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6011      	str	r1, [r2, #0]
 800c6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e08c      	b.n	800c7da <_printf_i+0x1be>
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6011      	str	r1, [r2, #0]
 800c6c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6c8:	bf18      	it	ne
 800c6ca:	b21b      	sxthne	r3, r3
 800c6cc:	e7cf      	b.n	800c66e <_printf_i+0x52>
 800c6ce:	6813      	ldr	r3, [r2, #0]
 800c6d0:	6825      	ldr	r5, [r4, #0]
 800c6d2:	1d18      	adds	r0, r3, #4
 800c6d4:	6010      	str	r0, [r2, #0]
 800c6d6:	0628      	lsls	r0, r5, #24
 800c6d8:	d501      	bpl.n	800c6de <_printf_i+0xc2>
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	e002      	b.n	800c6e4 <_printf_i+0xc8>
 800c6de:	0668      	lsls	r0, r5, #25
 800c6e0:	d5fb      	bpl.n	800c6da <_printf_i+0xbe>
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	4854      	ldr	r0, [pc, #336]	; (800c838 <_printf_i+0x21c>)
 800c6e6:	296f      	cmp	r1, #111	; 0x6f
 800c6e8:	bf14      	ite	ne
 800c6ea:	220a      	movne	r2, #10
 800c6ec:	2208      	moveq	r2, #8
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6f4:	6865      	ldr	r5, [r4, #4]
 800c6f6:	60a5      	str	r5, [r4, #8]
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	f2c0 8095 	blt.w	800c828 <_printf_i+0x20c>
 800c6fe:	6821      	ldr	r1, [r4, #0]
 800c700:	f021 0104 	bic.w	r1, r1, #4
 800c704:	6021      	str	r1, [r4, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d13d      	bne.n	800c786 <_printf_i+0x16a>
 800c70a:	2d00      	cmp	r5, #0
 800c70c:	f040 808e 	bne.w	800c82c <_printf_i+0x210>
 800c710:	4665      	mov	r5, ip
 800c712:	2a08      	cmp	r2, #8
 800c714:	d10b      	bne.n	800c72e <_printf_i+0x112>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	07db      	lsls	r3, r3, #31
 800c71a:	d508      	bpl.n	800c72e <_printf_i+0x112>
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	6862      	ldr	r2, [r4, #4]
 800c720:	429a      	cmp	r2, r3
 800c722:	bfde      	ittt	le
 800c724:	2330      	movle	r3, #48	; 0x30
 800c726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c72a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c72e:	ebac 0305 	sub.w	r3, ip, r5
 800c732:	6123      	str	r3, [r4, #16]
 800c734:	f8cd 8000 	str.w	r8, [sp]
 800c738:	463b      	mov	r3, r7
 800c73a:	aa03      	add	r2, sp, #12
 800c73c:	4621      	mov	r1, r4
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff fef6 	bl	800c530 <_printf_common>
 800c744:	3001      	adds	r0, #1
 800c746:	d14d      	bne.n	800c7e4 <_printf_i+0x1c8>
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	b005      	add	sp, #20
 800c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c752:	4839      	ldr	r0, [pc, #228]	; (800c838 <_printf_i+0x21c>)
 800c754:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c758:	6813      	ldr	r3, [r2, #0]
 800c75a:	6821      	ldr	r1, [r4, #0]
 800c75c:	1d1d      	adds	r5, r3, #4
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6015      	str	r5, [r2, #0]
 800c762:	060a      	lsls	r2, r1, #24
 800c764:	d50b      	bpl.n	800c77e <_printf_i+0x162>
 800c766:	07ca      	lsls	r2, r1, #31
 800c768:	bf44      	itt	mi
 800c76a:	f041 0120 	orrmi.w	r1, r1, #32
 800c76e:	6021      	strmi	r1, [r4, #0]
 800c770:	b91b      	cbnz	r3, 800c77a <_printf_i+0x15e>
 800c772:	6822      	ldr	r2, [r4, #0]
 800c774:	f022 0220 	bic.w	r2, r2, #32
 800c778:	6022      	str	r2, [r4, #0]
 800c77a:	2210      	movs	r2, #16
 800c77c:	e7b7      	b.n	800c6ee <_printf_i+0xd2>
 800c77e:	064d      	lsls	r5, r1, #25
 800c780:	bf48      	it	mi
 800c782:	b29b      	uxthmi	r3, r3
 800c784:	e7ef      	b.n	800c766 <_printf_i+0x14a>
 800c786:	4665      	mov	r5, ip
 800c788:	fbb3 f1f2 	udiv	r1, r3, r2
 800c78c:	fb02 3311 	mls	r3, r2, r1, r3
 800c790:	5cc3      	ldrb	r3, [r0, r3]
 800c792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c796:	460b      	mov	r3, r1
 800c798:	2900      	cmp	r1, #0
 800c79a:	d1f5      	bne.n	800c788 <_printf_i+0x16c>
 800c79c:	e7b9      	b.n	800c712 <_printf_i+0xf6>
 800c79e:	6813      	ldr	r3, [r2, #0]
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	6961      	ldr	r1, [r4, #20]
 800c7a4:	1d18      	adds	r0, r3, #4
 800c7a6:	6010      	str	r0, [r2, #0]
 800c7a8:	0628      	lsls	r0, r5, #24
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	d501      	bpl.n	800c7b2 <_printf_i+0x196>
 800c7ae:	6019      	str	r1, [r3, #0]
 800c7b0:	e002      	b.n	800c7b8 <_printf_i+0x19c>
 800c7b2:	066a      	lsls	r2, r5, #25
 800c7b4:	d5fb      	bpl.n	800c7ae <_printf_i+0x192>
 800c7b6:	8019      	strh	r1, [r3, #0]
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6123      	str	r3, [r4, #16]
 800c7bc:	4665      	mov	r5, ip
 800c7be:	e7b9      	b.n	800c734 <_printf_i+0x118>
 800c7c0:	6813      	ldr	r3, [r2, #0]
 800c7c2:	1d19      	adds	r1, r3, #4
 800c7c4:	6011      	str	r1, [r2, #0]
 800c7c6:	681d      	ldr	r5, [r3, #0]
 800c7c8:	6862      	ldr	r2, [r4, #4]
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f7f3 fd1f 	bl	8000210 <memchr>
 800c7d2:	b108      	cbz	r0, 800c7d8 <_printf_i+0x1bc>
 800c7d4:	1b40      	subs	r0, r0, r5
 800c7d6:	6060      	str	r0, [r4, #4]
 800c7d8:	6863      	ldr	r3, [r4, #4]
 800c7da:	6123      	str	r3, [r4, #16]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e2:	e7a7      	b.n	800c734 <_printf_i+0x118>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	462a      	mov	r2, r5
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	47c0      	blx	r8
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d0aa      	beq.n	800c748 <_printf_i+0x12c>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	079b      	lsls	r3, r3, #30
 800c7f6:	d413      	bmi.n	800c820 <_printf_i+0x204>
 800c7f8:	68e0      	ldr	r0, [r4, #12]
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	4298      	cmp	r0, r3
 800c7fe:	bfb8      	it	lt
 800c800:	4618      	movlt	r0, r3
 800c802:	e7a3      	b.n	800c74c <_printf_i+0x130>
 800c804:	2301      	movs	r3, #1
 800c806:	464a      	mov	r2, r9
 800c808:	4639      	mov	r1, r7
 800c80a:	4630      	mov	r0, r6
 800c80c:	47c0      	blx	r8
 800c80e:	3001      	adds	r0, #1
 800c810:	d09a      	beq.n	800c748 <_printf_i+0x12c>
 800c812:	3501      	adds	r5, #1
 800c814:	68e3      	ldr	r3, [r4, #12]
 800c816:	9a03      	ldr	r2, [sp, #12]
 800c818:	1a9b      	subs	r3, r3, r2
 800c81a:	42ab      	cmp	r3, r5
 800c81c:	dcf2      	bgt.n	800c804 <_printf_i+0x1e8>
 800c81e:	e7eb      	b.n	800c7f8 <_printf_i+0x1dc>
 800c820:	2500      	movs	r5, #0
 800c822:	f104 0919 	add.w	r9, r4, #25
 800c826:	e7f5      	b.n	800c814 <_printf_i+0x1f8>
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1ac      	bne.n	800c786 <_printf_i+0x16a>
 800c82c:	7803      	ldrb	r3, [r0, #0]
 800c82e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c836:	e76c      	b.n	800c712 <_printf_i+0xf6>
 800c838:	08012104 	.word	0x08012104
 800c83c:	08012115 	.word	0x08012115

0800c840 <_scanf_float>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	469a      	mov	sl, r3
 800c846:	688b      	ldr	r3, [r1, #8]
 800c848:	4616      	mov	r6, r2
 800c84a:	1e5a      	subs	r2, r3, #1
 800c84c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c850:	b087      	sub	sp, #28
 800c852:	bf83      	ittte	hi
 800c854:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c858:	189b      	addhi	r3, r3, r2
 800c85a:	9301      	strhi	r3, [sp, #4]
 800c85c:	2300      	movls	r3, #0
 800c85e:	bf86      	itte	hi
 800c860:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c864:	608b      	strhi	r3, [r1, #8]
 800c866:	9301      	strls	r3, [sp, #4]
 800c868:	680b      	ldr	r3, [r1, #0]
 800c86a:	4688      	mov	r8, r1
 800c86c:	f04f 0b00 	mov.w	fp, #0
 800c870:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c874:	f848 3b1c 	str.w	r3, [r8], #28
 800c878:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c87c:	4607      	mov	r7, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	4645      	mov	r5, r8
 800c882:	465a      	mov	r2, fp
 800c884:	46d9      	mov	r9, fp
 800c886:	f8cd b008 	str.w	fp, [sp, #8]
 800c88a:	68a1      	ldr	r1, [r4, #8]
 800c88c:	b181      	cbz	r1, 800c8b0 <_scanf_float+0x70>
 800c88e:	6833      	ldr	r3, [r6, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b49      	cmp	r3, #73	; 0x49
 800c894:	d071      	beq.n	800c97a <_scanf_float+0x13a>
 800c896:	d84d      	bhi.n	800c934 <_scanf_float+0xf4>
 800c898:	2b39      	cmp	r3, #57	; 0x39
 800c89a:	d840      	bhi.n	800c91e <_scanf_float+0xde>
 800c89c:	2b31      	cmp	r3, #49	; 0x31
 800c89e:	f080 8088 	bcs.w	800c9b2 <_scanf_float+0x172>
 800c8a2:	2b2d      	cmp	r3, #45	; 0x2d
 800c8a4:	f000 8090 	beq.w	800c9c8 <_scanf_float+0x188>
 800c8a8:	d815      	bhi.n	800c8d6 <_scanf_float+0x96>
 800c8aa:	2b2b      	cmp	r3, #43	; 0x2b
 800c8ac:	f000 808c 	beq.w	800c9c8 <_scanf_float+0x188>
 800c8b0:	f1b9 0f00 	cmp.w	r9, #0
 800c8b4:	d003      	beq.n	800c8be <_scanf_float+0x7e>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	2a01      	cmp	r2, #1
 800c8c2:	f200 80ea 	bhi.w	800ca9a <_scanf_float+0x25a>
 800c8c6:	4545      	cmp	r5, r8
 800c8c8:	f200 80dc 	bhi.w	800ca84 <_scanf_float+0x244>
 800c8cc:	2601      	movs	r6, #1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	b007      	add	sp, #28
 800c8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d8:	f000 809f 	beq.w	800ca1a <_scanf_float+0x1da>
 800c8dc:	2b30      	cmp	r3, #48	; 0x30
 800c8de:	d1e7      	bne.n	800c8b0 <_scanf_float+0x70>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c8e6:	d064      	beq.n	800c9b2 <_scanf_float+0x172>
 800c8e8:	9b01      	ldr	r3, [sp, #4]
 800c8ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c8ee:	6020      	str	r0, [r4, #0]
 800c8f0:	f109 0901 	add.w	r9, r9, #1
 800c8f4:	b11b      	cbz	r3, 800c8fe <_scanf_float+0xbe>
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	3101      	adds	r1, #1
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	60a1      	str	r1, [r4, #8]
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	60a3      	str	r3, [r4, #8]
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	3301      	adds	r3, #1
 800c908:	6123      	str	r3, [r4, #16]
 800c90a:	6873      	ldr	r3, [r6, #4]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	6073      	str	r3, [r6, #4]
 800c912:	f340 80ac 	ble.w	800ca6e <_scanf_float+0x22e>
 800c916:	6833      	ldr	r3, [r6, #0]
 800c918:	3301      	adds	r3, #1
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	e7b5      	b.n	800c88a <_scanf_float+0x4a>
 800c91e:	2b45      	cmp	r3, #69	; 0x45
 800c920:	f000 8085 	beq.w	800ca2e <_scanf_float+0x1ee>
 800c924:	2b46      	cmp	r3, #70	; 0x46
 800c926:	d06a      	beq.n	800c9fe <_scanf_float+0x1be>
 800c928:	2b41      	cmp	r3, #65	; 0x41
 800c92a:	d1c1      	bne.n	800c8b0 <_scanf_float+0x70>
 800c92c:	2a01      	cmp	r2, #1
 800c92e:	d1bf      	bne.n	800c8b0 <_scanf_float+0x70>
 800c930:	2202      	movs	r2, #2
 800c932:	e046      	b.n	800c9c2 <_scanf_float+0x182>
 800c934:	2b65      	cmp	r3, #101	; 0x65
 800c936:	d07a      	beq.n	800ca2e <_scanf_float+0x1ee>
 800c938:	d818      	bhi.n	800c96c <_scanf_float+0x12c>
 800c93a:	2b54      	cmp	r3, #84	; 0x54
 800c93c:	d066      	beq.n	800ca0c <_scanf_float+0x1cc>
 800c93e:	d811      	bhi.n	800c964 <_scanf_float+0x124>
 800c940:	2b4e      	cmp	r3, #78	; 0x4e
 800c942:	d1b5      	bne.n	800c8b0 <_scanf_float+0x70>
 800c944:	2a00      	cmp	r2, #0
 800c946:	d146      	bne.n	800c9d6 <_scanf_float+0x196>
 800c948:	f1b9 0f00 	cmp.w	r9, #0
 800c94c:	d145      	bne.n	800c9da <_scanf_float+0x19a>
 800c94e:	6821      	ldr	r1, [r4, #0]
 800c950:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c954:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c958:	d13f      	bne.n	800c9da <_scanf_float+0x19a>
 800c95a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c95e:	6021      	str	r1, [r4, #0]
 800c960:	2201      	movs	r2, #1
 800c962:	e02e      	b.n	800c9c2 <_scanf_float+0x182>
 800c964:	2b59      	cmp	r3, #89	; 0x59
 800c966:	d01e      	beq.n	800c9a6 <_scanf_float+0x166>
 800c968:	2b61      	cmp	r3, #97	; 0x61
 800c96a:	e7de      	b.n	800c92a <_scanf_float+0xea>
 800c96c:	2b6e      	cmp	r3, #110	; 0x6e
 800c96e:	d0e9      	beq.n	800c944 <_scanf_float+0x104>
 800c970:	d815      	bhi.n	800c99e <_scanf_float+0x15e>
 800c972:	2b66      	cmp	r3, #102	; 0x66
 800c974:	d043      	beq.n	800c9fe <_scanf_float+0x1be>
 800c976:	2b69      	cmp	r3, #105	; 0x69
 800c978:	d19a      	bne.n	800c8b0 <_scanf_float+0x70>
 800c97a:	f1bb 0f00 	cmp.w	fp, #0
 800c97e:	d138      	bne.n	800c9f2 <_scanf_float+0x1b2>
 800c980:	f1b9 0f00 	cmp.w	r9, #0
 800c984:	d197      	bne.n	800c8b6 <_scanf_float+0x76>
 800c986:	6821      	ldr	r1, [r4, #0]
 800c988:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c98c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c990:	d195      	bne.n	800c8be <_scanf_float+0x7e>
 800c992:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c996:	6021      	str	r1, [r4, #0]
 800c998:	f04f 0b01 	mov.w	fp, #1
 800c99c:	e011      	b.n	800c9c2 <_scanf_float+0x182>
 800c99e:	2b74      	cmp	r3, #116	; 0x74
 800c9a0:	d034      	beq.n	800ca0c <_scanf_float+0x1cc>
 800c9a2:	2b79      	cmp	r3, #121	; 0x79
 800c9a4:	d184      	bne.n	800c8b0 <_scanf_float+0x70>
 800c9a6:	f1bb 0f07 	cmp.w	fp, #7
 800c9aa:	d181      	bne.n	800c8b0 <_scanf_float+0x70>
 800c9ac:	f04f 0b08 	mov.w	fp, #8
 800c9b0:	e007      	b.n	800c9c2 <_scanf_float+0x182>
 800c9b2:	eb12 0f0b 	cmn.w	r2, fp
 800c9b6:	f47f af7b 	bne.w	800c8b0 <_scanf_float+0x70>
 800c9ba:	6821      	ldr	r1, [r4, #0]
 800c9bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c9c0:	6021      	str	r1, [r4, #0]
 800c9c2:	702b      	strb	r3, [r5, #0]
 800c9c4:	3501      	adds	r5, #1
 800c9c6:	e79a      	b.n	800c8fe <_scanf_float+0xbe>
 800c9c8:	6821      	ldr	r1, [r4, #0]
 800c9ca:	0608      	lsls	r0, r1, #24
 800c9cc:	f57f af70 	bpl.w	800c8b0 <_scanf_float+0x70>
 800c9d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c9d4:	e7f4      	b.n	800c9c0 <_scanf_float+0x180>
 800c9d6:	2a02      	cmp	r2, #2
 800c9d8:	d047      	beq.n	800ca6a <_scanf_float+0x22a>
 800c9da:	f1bb 0f01 	cmp.w	fp, #1
 800c9de:	d003      	beq.n	800c9e8 <_scanf_float+0x1a8>
 800c9e0:	f1bb 0f04 	cmp.w	fp, #4
 800c9e4:	f47f af64 	bne.w	800c8b0 <_scanf_float+0x70>
 800c9e8:	f10b 0b01 	add.w	fp, fp, #1
 800c9ec:	fa5f fb8b 	uxtb.w	fp, fp
 800c9f0:	e7e7      	b.n	800c9c2 <_scanf_float+0x182>
 800c9f2:	f1bb 0f03 	cmp.w	fp, #3
 800c9f6:	d0f7      	beq.n	800c9e8 <_scanf_float+0x1a8>
 800c9f8:	f1bb 0f05 	cmp.w	fp, #5
 800c9fc:	e7f2      	b.n	800c9e4 <_scanf_float+0x1a4>
 800c9fe:	f1bb 0f02 	cmp.w	fp, #2
 800ca02:	f47f af55 	bne.w	800c8b0 <_scanf_float+0x70>
 800ca06:	f04f 0b03 	mov.w	fp, #3
 800ca0a:	e7da      	b.n	800c9c2 <_scanf_float+0x182>
 800ca0c:	f1bb 0f06 	cmp.w	fp, #6
 800ca10:	f47f af4e 	bne.w	800c8b0 <_scanf_float+0x70>
 800ca14:	f04f 0b07 	mov.w	fp, #7
 800ca18:	e7d3      	b.n	800c9c2 <_scanf_float+0x182>
 800ca1a:	6821      	ldr	r1, [r4, #0]
 800ca1c:	0588      	lsls	r0, r1, #22
 800ca1e:	f57f af47 	bpl.w	800c8b0 <_scanf_float+0x70>
 800ca22:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ca26:	6021      	str	r1, [r4, #0]
 800ca28:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca2c:	e7c9      	b.n	800c9c2 <_scanf_float+0x182>
 800ca2e:	6821      	ldr	r1, [r4, #0]
 800ca30:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ca34:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ca38:	d006      	beq.n	800ca48 <_scanf_float+0x208>
 800ca3a:	0548      	lsls	r0, r1, #21
 800ca3c:	f57f af38 	bpl.w	800c8b0 <_scanf_float+0x70>
 800ca40:	f1b9 0f00 	cmp.w	r9, #0
 800ca44:	f43f af3b 	beq.w	800c8be <_scanf_float+0x7e>
 800ca48:	0588      	lsls	r0, r1, #22
 800ca4a:	bf58      	it	pl
 800ca4c:	9802      	ldrpl	r0, [sp, #8]
 800ca4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ca52:	bf58      	it	pl
 800ca54:	eba9 0000 	subpl.w	r0, r9, r0
 800ca58:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ca5c:	bf58      	it	pl
 800ca5e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ca62:	6021      	str	r1, [r4, #0]
 800ca64:	f04f 0900 	mov.w	r9, #0
 800ca68:	e7ab      	b.n	800c9c2 <_scanf_float+0x182>
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	e7a9      	b.n	800c9c2 <_scanf_float+0x182>
 800ca6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca72:	9205      	str	r2, [sp, #20]
 800ca74:	4631      	mov	r1, r6
 800ca76:	4638      	mov	r0, r7
 800ca78:	4798      	blx	r3
 800ca7a:	9a05      	ldr	r2, [sp, #20]
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f43f af04 	beq.w	800c88a <_scanf_float+0x4a>
 800ca82:	e715      	b.n	800c8b0 <_scanf_float+0x70>
 800ca84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	4638      	mov	r0, r7
 800ca90:	4798      	blx	r3
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	6123      	str	r3, [r4, #16]
 800ca98:	e715      	b.n	800c8c6 <_scanf_float+0x86>
 800ca9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	d80a      	bhi.n	800cab8 <_scanf_float+0x278>
 800caa2:	f1bb 0f02 	cmp.w	fp, #2
 800caa6:	d968      	bls.n	800cb7a <_scanf_float+0x33a>
 800caa8:	f1ab 0b03 	sub.w	fp, fp, #3
 800caac:	fa5f fb8b 	uxtb.w	fp, fp
 800cab0:	eba5 0b0b 	sub.w	fp, r5, fp
 800cab4:	455d      	cmp	r5, fp
 800cab6:	d14b      	bne.n	800cb50 <_scanf_float+0x310>
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	05da      	lsls	r2, r3, #23
 800cabc:	d51f      	bpl.n	800cafe <_scanf_float+0x2be>
 800cabe:	055b      	lsls	r3, r3, #21
 800cac0:	d468      	bmi.n	800cb94 <_scanf_float+0x354>
 800cac2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cac6:	6923      	ldr	r3, [r4, #16]
 800cac8:	2965      	cmp	r1, #101	; 0x65
 800caca:	f103 33ff 	add.w	r3, r3, #4294967295
 800cace:	f105 3bff 	add.w	fp, r5, #4294967295
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	d00d      	beq.n	800caf2 <_scanf_float+0x2b2>
 800cad6:	2945      	cmp	r1, #69	; 0x45
 800cad8:	d00b      	beq.n	800caf2 <_scanf_float+0x2b2>
 800cada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cade:	4632      	mov	r2, r6
 800cae0:	4638      	mov	r0, r7
 800cae2:	4798      	blx	r3
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800caea:	3b01      	subs	r3, #1
 800caec:	f1a5 0b02 	sub.w	fp, r5, #2
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800caf6:	4632      	mov	r2, r6
 800caf8:	4638      	mov	r0, r7
 800cafa:	4798      	blx	r3
 800cafc:	465d      	mov	r5, fp
 800cafe:	6826      	ldr	r6, [r4, #0]
 800cb00:	f016 0610 	ands.w	r6, r6, #16
 800cb04:	d17a      	bne.n	800cbfc <_scanf_float+0x3bc>
 800cb06:	702e      	strb	r6, [r5, #0]
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb12:	d142      	bne.n	800cb9a <_scanf_float+0x35a>
 800cb14:	9b02      	ldr	r3, [sp, #8]
 800cb16:	eba9 0303 	sub.w	r3, r9, r3
 800cb1a:	425a      	negs	r2, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d149      	bne.n	800cbb4 <_scanf_float+0x374>
 800cb20:	2200      	movs	r2, #0
 800cb22:	4641      	mov	r1, r8
 800cb24:	4638      	mov	r0, r7
 800cb26:	f001 f847 	bl	800dbb8 <_strtod_r>
 800cb2a:	6825      	ldr	r5, [r4, #0]
 800cb2c:	f8da 3000 	ldr.w	r3, [sl]
 800cb30:	f015 0f02 	tst.w	r5, #2
 800cb34:	f103 0204 	add.w	r2, r3, #4
 800cb38:	ec59 8b10 	vmov	r8, r9, d0
 800cb3c:	f8ca 2000 	str.w	r2, [sl]
 800cb40:	d043      	beq.n	800cbca <_scanf_float+0x38a>
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	e9c3 8900 	strd	r8, r9, [r3]
 800cb48:	68e3      	ldr	r3, [r4, #12]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	60e3      	str	r3, [r4, #12]
 800cb4e:	e6be      	b.n	800c8ce <_scanf_float+0x8e>
 800cb50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cb58:	4632      	mov	r2, r6
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	4798      	blx	r3
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	6123      	str	r3, [r4, #16]
 800cb64:	e7a6      	b.n	800cab4 <_scanf_float+0x274>
 800cb66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cb6e:	4632      	mov	r2, r6
 800cb70:	4638      	mov	r0, r7
 800cb72:	4798      	blx	r3
 800cb74:	6923      	ldr	r3, [r4, #16]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	4545      	cmp	r5, r8
 800cb7c:	d8f3      	bhi.n	800cb66 <_scanf_float+0x326>
 800cb7e:	e6a5      	b.n	800c8cc <_scanf_float+0x8c>
 800cb80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	4798      	blx	r3
 800cb8e:	6923      	ldr	r3, [r4, #16]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	6123      	str	r3, [r4, #16]
 800cb94:	4545      	cmp	r5, r8
 800cb96:	d8f3      	bhi.n	800cb80 <_scanf_float+0x340>
 800cb98:	e698      	b.n	800c8cc <_scanf_float+0x8c>
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d0bf      	beq.n	800cb20 <_scanf_float+0x2e0>
 800cba0:	9904      	ldr	r1, [sp, #16]
 800cba2:	230a      	movs	r3, #10
 800cba4:	4632      	mov	r2, r6
 800cba6:	3101      	adds	r1, #1
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f001 f8f9 	bl	800dda0 <_strtol_r>
 800cbae:	9b03      	ldr	r3, [sp, #12]
 800cbb0:	9d04      	ldr	r5, [sp, #16]
 800cbb2:	1ac2      	subs	r2, r0, r3
 800cbb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cbb8:	429d      	cmp	r5, r3
 800cbba:	bf28      	it	cs
 800cbbc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800cbc0:	490f      	ldr	r1, [pc, #60]	; (800cc00 <_scanf_float+0x3c0>)
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	f000 f906 	bl	800cdd4 <siprintf>
 800cbc8:	e7aa      	b.n	800cb20 <_scanf_float+0x2e0>
 800cbca:	f015 0504 	ands.w	r5, r5, #4
 800cbce:	d1b8      	bne.n	800cb42 <_scanf_float+0x302>
 800cbd0:	681f      	ldr	r7, [r3, #0]
 800cbd2:	ee10 2a10 	vmov	r2, s0
 800cbd6:	464b      	mov	r3, r9
 800cbd8:	ee10 0a10 	vmov	r0, s0
 800cbdc:	4649      	mov	r1, r9
 800cbde:	f7f3 ffbd 	bl	8000b5c <__aeabi_dcmpun>
 800cbe2:	b128      	cbz	r0, 800cbf0 <_scanf_float+0x3b0>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f000 f8ef 	bl	800cdc8 <nanf>
 800cbea:	ed87 0a00 	vstr	s0, [r7]
 800cbee:	e7ab      	b.n	800cb48 <_scanf_float+0x308>
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	f7f4 f810 	bl	8000c18 <__aeabi_d2f>
 800cbf8:	6038      	str	r0, [r7, #0]
 800cbfa:	e7a5      	b.n	800cb48 <_scanf_float+0x308>
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	e666      	b.n	800c8ce <_scanf_float+0x8e>
 800cc00:	08012126 	.word	0x08012126

0800cc04 <iprintf>:
 800cc04:	b40f      	push	{r0, r1, r2, r3}
 800cc06:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <iprintf+0x2c>)
 800cc08:	b513      	push	{r0, r1, r4, lr}
 800cc0a:	681c      	ldr	r4, [r3, #0]
 800cc0c:	b124      	cbz	r4, 800cc18 <iprintf+0x14>
 800cc0e:	69a3      	ldr	r3, [r4, #24]
 800cc10:	b913      	cbnz	r3, 800cc18 <iprintf+0x14>
 800cc12:	4620      	mov	r0, r4
 800cc14:	f002 f844 	bl	800eca0 <__sinit>
 800cc18:	ab05      	add	r3, sp, #20
 800cc1a:	9a04      	ldr	r2, [sp, #16]
 800cc1c:	68a1      	ldr	r1, [r4, #8]
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	4620      	mov	r0, r4
 800cc22:	f003 fc7b 	bl	801051c <_vfiprintf_r>
 800cc26:	b002      	add	sp, #8
 800cc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc2c:	b004      	add	sp, #16
 800cc2e:	4770      	bx	lr
 800cc30:	20000014 	.word	0x20000014

0800cc34 <putchar>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4b08      	ldr	r3, [pc, #32]	; (800cc58 <putchar+0x24>)
 800cc38:	681c      	ldr	r4, [r3, #0]
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	b124      	cbz	r4, 800cc48 <putchar+0x14>
 800cc3e:	69a3      	ldr	r3, [r4, #24]
 800cc40:	b913      	cbnz	r3, 800cc48 <putchar+0x14>
 800cc42:	4620      	mov	r0, r4
 800cc44:	f002 f82c 	bl	800eca0 <__sinit>
 800cc48:	68a2      	ldr	r2, [r4, #8]
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc52:	f003 bed1 	b.w	80109f8 <_putc_r>
 800cc56:	bf00      	nop
 800cc58:	20000014 	.word	0x20000014

0800cc5c <setbuf>:
 800cc5c:	2900      	cmp	r1, #0
 800cc5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc62:	bf0c      	ite	eq
 800cc64:	2202      	moveq	r2, #2
 800cc66:	2200      	movne	r2, #0
 800cc68:	f000 b800 	b.w	800cc6c <setvbuf>

0800cc6c <setvbuf>:
 800cc6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc70:	461d      	mov	r5, r3
 800cc72:	4b51      	ldr	r3, [pc, #324]	; (800cdb8 <setvbuf+0x14c>)
 800cc74:	681e      	ldr	r6, [r3, #0]
 800cc76:	4604      	mov	r4, r0
 800cc78:	460f      	mov	r7, r1
 800cc7a:	4690      	mov	r8, r2
 800cc7c:	b126      	cbz	r6, 800cc88 <setvbuf+0x1c>
 800cc7e:	69b3      	ldr	r3, [r6, #24]
 800cc80:	b913      	cbnz	r3, 800cc88 <setvbuf+0x1c>
 800cc82:	4630      	mov	r0, r6
 800cc84:	f002 f80c 	bl	800eca0 <__sinit>
 800cc88:	4b4c      	ldr	r3, [pc, #304]	; (800cdbc <setvbuf+0x150>)
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	d152      	bne.n	800cd34 <setvbuf+0xc8>
 800cc8e:	6874      	ldr	r4, [r6, #4]
 800cc90:	f1b8 0f02 	cmp.w	r8, #2
 800cc94:	d006      	beq.n	800cca4 <setvbuf+0x38>
 800cc96:	f1b8 0f01 	cmp.w	r8, #1
 800cc9a:	f200 8089 	bhi.w	800cdb0 <setvbuf+0x144>
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	f2c0 8086 	blt.w	800cdb0 <setvbuf+0x144>
 800cca4:	4621      	mov	r1, r4
 800cca6:	4630      	mov	r0, r6
 800cca8:	f001 ff90 	bl	800ebcc <_fflush_r>
 800ccac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccae:	b141      	cbz	r1, 800ccc2 <setvbuf+0x56>
 800ccb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb4:	4299      	cmp	r1, r3
 800ccb6:	d002      	beq.n	800ccbe <setvbuf+0x52>
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f003 f861 	bl	800fd80 <_free_r>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6363      	str	r3, [r4, #52]	; 0x34
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61a3      	str	r3, [r4, #24]
 800ccc6:	6063      	str	r3, [r4, #4]
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	061b      	lsls	r3, r3, #24
 800cccc:	d503      	bpl.n	800ccd6 <setvbuf+0x6a>
 800ccce:	6921      	ldr	r1, [r4, #16]
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f003 f855 	bl	800fd80 <_free_r>
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ccdc:	f023 0303 	bic.w	r3, r3, #3
 800cce0:	f1b8 0f02 	cmp.w	r8, #2
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	d05d      	beq.n	800cda4 <setvbuf+0x138>
 800cce8:	ab01      	add	r3, sp, #4
 800ccea:	466a      	mov	r2, sp
 800ccec:	4621      	mov	r1, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f002 fbba 	bl	800f468 <__swhatbuf_r>
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	4318      	orrs	r0, r3
 800ccf8:	81a0      	strh	r0, [r4, #12]
 800ccfa:	bb2d      	cbnz	r5, 800cd48 <setvbuf+0xdc>
 800ccfc:	9d00      	ldr	r5, [sp, #0]
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f002 fc16 	bl	800f530 <malloc>
 800cd04:	4607      	mov	r7, r0
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d14e      	bne.n	800cda8 <setvbuf+0x13c>
 800cd0a:	f8dd 9000 	ldr.w	r9, [sp]
 800cd0e:	45a9      	cmp	r9, r5
 800cd10:	d13c      	bne.n	800cd8c <setvbuf+0x120>
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	f043 0302 	orr.w	r3, r3, #2
 800cd1c:	81a3      	strh	r3, [r4, #12]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60a3      	str	r3, [r4, #8]
 800cd22:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	6123      	str	r3, [r4, #16]
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	6163      	str	r3, [r4, #20]
 800cd2e:	b003      	add	sp, #12
 800cd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd34:	4b22      	ldr	r3, [pc, #136]	; (800cdc0 <setvbuf+0x154>)
 800cd36:	429c      	cmp	r4, r3
 800cd38:	d101      	bne.n	800cd3e <setvbuf+0xd2>
 800cd3a:	68b4      	ldr	r4, [r6, #8]
 800cd3c:	e7a8      	b.n	800cc90 <setvbuf+0x24>
 800cd3e:	4b21      	ldr	r3, [pc, #132]	; (800cdc4 <setvbuf+0x158>)
 800cd40:	429c      	cmp	r4, r3
 800cd42:	bf08      	it	eq
 800cd44:	68f4      	ldreq	r4, [r6, #12]
 800cd46:	e7a3      	b.n	800cc90 <setvbuf+0x24>
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d0d8      	beq.n	800ccfe <setvbuf+0x92>
 800cd4c:	69b3      	ldr	r3, [r6, #24]
 800cd4e:	b913      	cbnz	r3, 800cd56 <setvbuf+0xea>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f001 ffa5 	bl	800eca0 <__sinit>
 800cd56:	f1b8 0f01 	cmp.w	r8, #1
 800cd5a:	bf08      	it	eq
 800cd5c:	89a3      	ldrheq	r3, [r4, #12]
 800cd5e:	6027      	str	r7, [r4, #0]
 800cd60:	bf04      	itt	eq
 800cd62:	f043 0301 	orreq.w	r3, r3, #1
 800cd66:	81a3      	strheq	r3, [r4, #12]
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f013 0008 	ands.w	r0, r3, #8
 800cd6e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800cd72:	d01b      	beq.n	800cdac <setvbuf+0x140>
 800cd74:	f013 0001 	ands.w	r0, r3, #1
 800cd78:	bf18      	it	ne
 800cd7a:	426d      	negne	r5, r5
 800cd7c:	f04f 0300 	mov.w	r3, #0
 800cd80:	bf1d      	ittte	ne
 800cd82:	60a3      	strne	r3, [r4, #8]
 800cd84:	61a5      	strne	r5, [r4, #24]
 800cd86:	4618      	movne	r0, r3
 800cd88:	60a5      	streq	r5, [r4, #8]
 800cd8a:	e7d0      	b.n	800cd2e <setvbuf+0xc2>
 800cd8c:	4648      	mov	r0, r9
 800cd8e:	f002 fbcf 	bl	800f530 <malloc>
 800cd92:	4607      	mov	r7, r0
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d0bc      	beq.n	800cd12 <setvbuf+0xa6>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	464d      	mov	r5, r9
 800cda2:	e7d3      	b.n	800cd4c <setvbuf+0xe0>
 800cda4:	2000      	movs	r0, #0
 800cda6:	e7b6      	b.n	800cd16 <setvbuf+0xaa>
 800cda8:	46a9      	mov	r9, r5
 800cdaa:	e7f5      	b.n	800cd98 <setvbuf+0x12c>
 800cdac:	60a0      	str	r0, [r4, #8]
 800cdae:	e7be      	b.n	800cd2e <setvbuf+0xc2>
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e7bb      	b.n	800cd2e <setvbuf+0xc2>
 800cdb6:	bf00      	nop
 800cdb8:	20000014 	.word	0x20000014
 800cdbc:	080121b0 	.word	0x080121b0
 800cdc0:	080121d0 	.word	0x080121d0
 800cdc4:	08012190 	.word	0x08012190

0800cdc8 <nanf>:
 800cdc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cdd0 <nanf+0x8>
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	7fc00000 	.word	0x7fc00000

0800cdd4 <siprintf>:
 800cdd4:	b40e      	push	{r1, r2, r3}
 800cdd6:	b500      	push	{lr}
 800cdd8:	b09c      	sub	sp, #112	; 0x70
 800cdda:	ab1d      	add	r3, sp, #116	; 0x74
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	9006      	str	r0, [sp, #24]
 800cde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cde4:	4809      	ldr	r0, [pc, #36]	; (800ce0c <siprintf+0x38>)
 800cde6:	9107      	str	r1, [sp, #28]
 800cde8:	9104      	str	r1, [sp, #16]
 800cdea:	4909      	ldr	r1, [pc, #36]	; (800ce10 <siprintf+0x3c>)
 800cdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	6800      	ldr	r0, [r0, #0]
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	a902      	add	r1, sp, #8
 800cdf8:	f003 f8c4 	bl	800ff84 <_svfiprintf_r>
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	b01c      	add	sp, #112	; 0x70
 800ce04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce08:	b003      	add	sp, #12
 800ce0a:	4770      	bx	lr
 800ce0c:	20000014 	.word	0x20000014
 800ce10:	ffff0208 	.word	0xffff0208

0800ce14 <siscanf>:
 800ce14:	b40e      	push	{r1, r2, r3}
 800ce16:	b530      	push	{r4, r5, lr}
 800ce18:	b09c      	sub	sp, #112	; 0x70
 800ce1a:	ac1f      	add	r4, sp, #124	; 0x7c
 800ce1c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ce20:	f854 5b04 	ldr.w	r5, [r4], #4
 800ce24:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ce28:	9002      	str	r0, [sp, #8]
 800ce2a:	9006      	str	r0, [sp, #24]
 800ce2c:	f7f3 f9e2 	bl	80001f4 <strlen>
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <siscanf+0x4c>)
 800ce32:	9003      	str	r0, [sp, #12]
 800ce34:	9007      	str	r0, [sp, #28]
 800ce36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce38:	480a      	ldr	r0, [pc, #40]	; (800ce64 <siscanf+0x50>)
 800ce3a:	9401      	str	r4, [sp, #4]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce40:	9314      	str	r3, [sp, #80]	; 0x50
 800ce42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce46:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4623      	mov	r3, r4
 800ce4e:	a902      	add	r1, sp, #8
 800ce50:	6800      	ldr	r0, [r0, #0]
 800ce52:	f003 f9e9 	bl	8010228 <__ssvfiscanf_r>
 800ce56:	b01c      	add	sp, #112	; 0x70
 800ce58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce5c:	b003      	add	sp, #12
 800ce5e:	4770      	bx	lr
 800ce60:	0800ce8b 	.word	0x0800ce8b
 800ce64:	20000014 	.word	0x20000014

0800ce68 <__sread>:
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce70:	f003 fdf8 	bl	8010a64 <_read_r>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	bfab      	itete	ge
 800ce78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce7c:	181b      	addge	r3, r3, r0
 800ce7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce82:	bfac      	ite	ge
 800ce84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce86:	81a3      	strhlt	r3, [r4, #12]
 800ce88:	bd10      	pop	{r4, pc}

0800ce8a <__seofread>:
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	4770      	bx	lr

0800ce8e <__swrite>:
 800ce8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	461f      	mov	r7, r3
 800ce94:	898b      	ldrh	r3, [r1, #12]
 800ce96:	05db      	lsls	r3, r3, #23
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	d505      	bpl.n	800ceac <__swrite+0x1e>
 800cea0:	2302      	movs	r3, #2
 800cea2:	2200      	movs	r2, #0
 800cea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea8:	f002 facc 	bl	800f444 <_lseek_r>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	4628      	mov	r0, r5
 800cebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	f000 bf95 	b.w	800ddf0 <_write_r>

0800cec6 <__sseek>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	f002 fab9 	bl	800f444 <_lseek_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	bf15      	itete	ne
 800ced8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strheq	r3, [r4, #12]
 800cee4:	bf18      	it	ne
 800cee6:	81a3      	strhne	r3, [r4, #12]
 800cee8:	bd10      	pop	{r4, pc}

0800ceea <__sclose>:
 800ceea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceee:	f000 bf91 	b.w	800de14 <_close_r>

0800cef2 <strcat>:
 800cef2:	b510      	push	{r4, lr}
 800cef4:	4603      	mov	r3, r0
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	1c5c      	adds	r4, r3, #1
 800cefa:	b93a      	cbnz	r2, 800cf0c <strcat+0x1a>
 800cefc:	3b01      	subs	r3, #1
 800cefe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	d1f9      	bne.n	800cefe <strcat+0xc>
 800cf0a:	bd10      	pop	{r4, pc}
 800cf0c:	4623      	mov	r3, r4
 800cf0e:	e7f2      	b.n	800cef6 <strcat+0x4>

0800cf10 <strchr>:
 800cf10:	b2c9      	uxtb	r1, r1
 800cf12:	4603      	mov	r3, r0
 800cf14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf18:	b11a      	cbz	r2, 800cf22 <strchr+0x12>
 800cf1a:	428a      	cmp	r2, r1
 800cf1c:	d1f9      	bne.n	800cf12 <strchr+0x2>
 800cf1e:	4618      	mov	r0, r3
 800cf20:	4770      	bx	lr
 800cf22:	2900      	cmp	r1, #0
 800cf24:	bf18      	it	ne
 800cf26:	2300      	movne	r3, #0
 800cf28:	e7f9      	b.n	800cf1e <strchr+0xe>

0800cf2a <strcpy>:
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf30:	f803 2b01 	strb.w	r2, [r3], #1
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	d1f9      	bne.n	800cf2c <strcpy+0x2>
 800cf38:	4770      	bx	lr

0800cf3a <strncmp>:
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	b16a      	cbz	r2, 800cf5a <strncmp+0x20>
 800cf3e:	3901      	subs	r1, #1
 800cf40:	1884      	adds	r4, r0, r2
 800cf42:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cf46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d103      	bne.n	800cf56 <strncmp+0x1c>
 800cf4e:	42a0      	cmp	r0, r4
 800cf50:	d001      	beq.n	800cf56 <strncmp+0x1c>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1f5      	bne.n	800cf42 <strncmp+0x8>
 800cf56:	1a98      	subs	r0, r3, r2
 800cf58:	bd10      	pop	{r4, pc}
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	e7fc      	b.n	800cf58 <strncmp+0x1e>

0800cf5e <strstr>:
 800cf5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf60:	7803      	ldrb	r3, [r0, #0]
 800cf62:	b17b      	cbz	r3, 800cf84 <strstr+0x26>
 800cf64:	4604      	mov	r4, r0
 800cf66:	7823      	ldrb	r3, [r4, #0]
 800cf68:	4620      	mov	r0, r4
 800cf6a:	1c66      	adds	r6, r4, #1
 800cf6c:	b17b      	cbz	r3, 800cf8e <strstr+0x30>
 800cf6e:	1e4a      	subs	r2, r1, #1
 800cf70:	1e63      	subs	r3, r4, #1
 800cf72:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800cf76:	b14d      	cbz	r5, 800cf8c <strstr+0x2e>
 800cf78:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800cf7c:	42af      	cmp	r7, r5
 800cf7e:	4634      	mov	r4, r6
 800cf80:	d0f7      	beq.n	800cf72 <strstr+0x14>
 800cf82:	e7f0      	b.n	800cf66 <strstr+0x8>
 800cf84:	780b      	ldrb	r3, [r1, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	bf18      	it	ne
 800cf8a:	2000      	movne	r0, #0
 800cf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	e7fc      	b.n	800cf8c <strstr+0x2e>

0800cf92 <sulp>:
 800cf92:	b570      	push	{r4, r5, r6, lr}
 800cf94:	4604      	mov	r4, r0
 800cf96:	460d      	mov	r5, r1
 800cf98:	ec45 4b10 	vmov	d0, r4, r5
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	f002 fdad 	bl	800fafc <__ulp>
 800cfa2:	ec51 0b10 	vmov	r0, r1, d0
 800cfa6:	b17e      	cbz	r6, 800cfc8 <sulp+0x36>
 800cfa8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cfac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dd09      	ble.n	800cfc8 <sulp+0x36>
 800cfb4:	051b      	lsls	r3, r3, #20
 800cfb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cfba:	2400      	movs	r4, #0
 800cfbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	f7f3 fb30 	bl	8000628 <__aeabi_dmul>
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	0000      	movs	r0, r0
 800cfcc:	0000      	movs	r0, r0
	...

0800cfd0 <_strtod_l>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	461f      	mov	r7, r3
 800cfd6:	b0a1      	sub	sp, #132	; 0x84
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4681      	mov	r9, r0
 800cfdc:	4638      	mov	r0, r7
 800cfde:	460e      	mov	r6, r1
 800cfe0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfe2:	931c      	str	r3, [sp, #112]	; 0x70
 800cfe4:	f002 fa1e 	bl	800f424 <__localeconv_l>
 800cfe8:	4680      	mov	r8, r0
 800cfea:	6800      	ldr	r0, [r0, #0]
 800cfec:	f7f3 f902 	bl	80001f4 <strlen>
 800cff0:	f04f 0a00 	mov.w	sl, #0
 800cff4:	4604      	mov	r4, r0
 800cff6:	f04f 0b00 	mov.w	fp, #0
 800cffa:	961b      	str	r6, [sp, #108]	; 0x6c
 800cffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cffe:	781a      	ldrb	r2, [r3, #0]
 800d000:	2a0d      	cmp	r2, #13
 800d002:	d832      	bhi.n	800d06a <_strtod_l+0x9a>
 800d004:	2a09      	cmp	r2, #9
 800d006:	d236      	bcs.n	800d076 <_strtod_l+0xa6>
 800d008:	2a00      	cmp	r2, #0
 800d00a:	d03e      	beq.n	800d08a <_strtod_l+0xba>
 800d00c:	2300      	movs	r3, #0
 800d00e:	930d      	str	r3, [sp, #52]	; 0x34
 800d010:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d012:	782b      	ldrb	r3, [r5, #0]
 800d014:	2b30      	cmp	r3, #48	; 0x30
 800d016:	f040 80ac 	bne.w	800d172 <_strtod_l+0x1a2>
 800d01a:	786b      	ldrb	r3, [r5, #1]
 800d01c:	2b58      	cmp	r3, #88	; 0x58
 800d01e:	d001      	beq.n	800d024 <_strtod_l+0x54>
 800d020:	2b78      	cmp	r3, #120	; 0x78
 800d022:	d167      	bne.n	800d0f4 <_strtod_l+0x124>
 800d024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	ab1c      	add	r3, sp, #112	; 0x70
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	9702      	str	r7, [sp, #8]
 800d02e:	ab1d      	add	r3, sp, #116	; 0x74
 800d030:	4a88      	ldr	r2, [pc, #544]	; (800d254 <_strtod_l+0x284>)
 800d032:	a91b      	add	r1, sp, #108	; 0x6c
 800d034:	4648      	mov	r0, r9
 800d036:	f001 ff0c 	bl	800ee52 <__gethex>
 800d03a:	f010 0407 	ands.w	r4, r0, #7
 800d03e:	4606      	mov	r6, r0
 800d040:	d005      	beq.n	800d04e <_strtod_l+0x7e>
 800d042:	2c06      	cmp	r4, #6
 800d044:	d12b      	bne.n	800d09e <_strtod_l+0xce>
 800d046:	3501      	adds	r5, #1
 800d048:	2300      	movs	r3, #0
 800d04a:	951b      	str	r5, [sp, #108]	; 0x6c
 800d04c:	930d      	str	r3, [sp, #52]	; 0x34
 800d04e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d050:	2b00      	cmp	r3, #0
 800d052:	f040 859a 	bne.w	800db8a <_strtod_l+0xbba>
 800d056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d058:	b1e3      	cbz	r3, 800d094 <_strtod_l+0xc4>
 800d05a:	4652      	mov	r2, sl
 800d05c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d060:	ec43 2b10 	vmov	d0, r2, r3
 800d064:	b021      	add	sp, #132	; 0x84
 800d066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06a:	2a2b      	cmp	r2, #43	; 0x2b
 800d06c:	d015      	beq.n	800d09a <_strtod_l+0xca>
 800d06e:	2a2d      	cmp	r2, #45	; 0x2d
 800d070:	d004      	beq.n	800d07c <_strtod_l+0xac>
 800d072:	2a20      	cmp	r2, #32
 800d074:	d1ca      	bne.n	800d00c <_strtod_l+0x3c>
 800d076:	3301      	adds	r3, #1
 800d078:	931b      	str	r3, [sp, #108]	; 0x6c
 800d07a:	e7bf      	b.n	800cffc <_strtod_l+0x2c>
 800d07c:	2201      	movs	r2, #1
 800d07e:	920d      	str	r2, [sp, #52]	; 0x34
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	921b      	str	r2, [sp, #108]	; 0x6c
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1c2      	bne.n	800d010 <_strtod_l+0x40>
 800d08a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d08c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f040 8579 	bne.w	800db86 <_strtod_l+0xbb6>
 800d094:	4652      	mov	r2, sl
 800d096:	465b      	mov	r3, fp
 800d098:	e7e2      	b.n	800d060 <_strtod_l+0x90>
 800d09a:	2200      	movs	r2, #0
 800d09c:	e7ef      	b.n	800d07e <_strtod_l+0xae>
 800d09e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d0a0:	b13a      	cbz	r2, 800d0b2 <_strtod_l+0xe2>
 800d0a2:	2135      	movs	r1, #53	; 0x35
 800d0a4:	a81e      	add	r0, sp, #120	; 0x78
 800d0a6:	f002 fe21 	bl	800fcec <__copybits>
 800d0aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d0ac:	4648      	mov	r0, r9
 800d0ae:	f002 fa8d 	bl	800f5cc <_Bfree>
 800d0b2:	3c01      	subs	r4, #1
 800d0b4:	2c04      	cmp	r4, #4
 800d0b6:	d806      	bhi.n	800d0c6 <_strtod_l+0xf6>
 800d0b8:	e8df f004 	tbb	[pc, r4]
 800d0bc:	1714030a 	.word	0x1714030a
 800d0c0:	0a          	.byte	0x0a
 800d0c1:	00          	.byte	0x00
 800d0c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d0c6:	0730      	lsls	r0, r6, #28
 800d0c8:	d5c1      	bpl.n	800d04e <_strtod_l+0x7e>
 800d0ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d0ce:	e7be      	b.n	800d04e <_strtod_l+0x7e>
 800d0d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d0d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d0da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d0de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0e2:	e7f0      	b.n	800d0c6 <_strtod_l+0xf6>
 800d0e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d258 <_strtod_l+0x288>
 800d0e8:	e7ed      	b.n	800d0c6 <_strtod_l+0xf6>
 800d0ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d0ee:	f04f 3aff 	mov.w	sl, #4294967295
 800d0f2:	e7e8      	b.n	800d0c6 <_strtod_l+0xf6>
 800d0f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800d0fa:	785b      	ldrb	r3, [r3, #1]
 800d0fc:	2b30      	cmp	r3, #48	; 0x30
 800d0fe:	d0f9      	beq.n	800d0f4 <_strtod_l+0x124>
 800d100:	2b00      	cmp	r3, #0
 800d102:	d0a4      	beq.n	800d04e <_strtod_l+0x7e>
 800d104:	2301      	movs	r3, #1
 800d106:	2500      	movs	r5, #0
 800d108:	9306      	str	r3, [sp, #24]
 800d10a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d10c:	9308      	str	r3, [sp, #32]
 800d10e:	9507      	str	r5, [sp, #28]
 800d110:	9505      	str	r5, [sp, #20]
 800d112:	220a      	movs	r2, #10
 800d114:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d116:	7807      	ldrb	r7, [r0, #0]
 800d118:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d11c:	b2d9      	uxtb	r1, r3
 800d11e:	2909      	cmp	r1, #9
 800d120:	d929      	bls.n	800d176 <_strtod_l+0x1a6>
 800d122:	4622      	mov	r2, r4
 800d124:	f8d8 1000 	ldr.w	r1, [r8]
 800d128:	f7ff ff07 	bl	800cf3a <strncmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d031      	beq.n	800d194 <_strtod_l+0x1c4>
 800d130:	2000      	movs	r0, #0
 800d132:	9c05      	ldr	r4, [sp, #20]
 800d134:	9004      	str	r0, [sp, #16]
 800d136:	463b      	mov	r3, r7
 800d138:	4602      	mov	r2, r0
 800d13a:	2b65      	cmp	r3, #101	; 0x65
 800d13c:	d001      	beq.n	800d142 <_strtod_l+0x172>
 800d13e:	2b45      	cmp	r3, #69	; 0x45
 800d140:	d114      	bne.n	800d16c <_strtod_l+0x19c>
 800d142:	b924      	cbnz	r4, 800d14e <_strtod_l+0x17e>
 800d144:	b910      	cbnz	r0, 800d14c <_strtod_l+0x17c>
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d09e      	beq.n	800d08a <_strtod_l+0xba>
 800d14c:	2400      	movs	r4, #0
 800d14e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d150:	1c73      	adds	r3, r6, #1
 800d152:	931b      	str	r3, [sp, #108]	; 0x6c
 800d154:	7873      	ldrb	r3, [r6, #1]
 800d156:	2b2b      	cmp	r3, #43	; 0x2b
 800d158:	d078      	beq.n	800d24c <_strtod_l+0x27c>
 800d15a:	2b2d      	cmp	r3, #45	; 0x2d
 800d15c:	d070      	beq.n	800d240 <_strtod_l+0x270>
 800d15e:	f04f 0c00 	mov.w	ip, #0
 800d162:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d166:	2f09      	cmp	r7, #9
 800d168:	d97c      	bls.n	800d264 <_strtod_l+0x294>
 800d16a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d16c:	f04f 0e00 	mov.w	lr, #0
 800d170:	e09a      	b.n	800d2a8 <_strtod_l+0x2d8>
 800d172:	2300      	movs	r3, #0
 800d174:	e7c7      	b.n	800d106 <_strtod_l+0x136>
 800d176:	9905      	ldr	r1, [sp, #20]
 800d178:	2908      	cmp	r1, #8
 800d17a:	bfdd      	ittte	le
 800d17c:	9907      	ldrle	r1, [sp, #28]
 800d17e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d182:	9307      	strle	r3, [sp, #28]
 800d184:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d188:	9b05      	ldr	r3, [sp, #20]
 800d18a:	3001      	adds	r0, #1
 800d18c:	3301      	adds	r3, #1
 800d18e:	9305      	str	r3, [sp, #20]
 800d190:	901b      	str	r0, [sp, #108]	; 0x6c
 800d192:	e7bf      	b.n	800d114 <_strtod_l+0x144>
 800d194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d196:	191a      	adds	r2, r3, r4
 800d198:	921b      	str	r2, [sp, #108]	; 0x6c
 800d19a:	9a05      	ldr	r2, [sp, #20]
 800d19c:	5d1b      	ldrb	r3, [r3, r4]
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	d037      	beq.n	800d212 <_strtod_l+0x242>
 800d1a2:	9c05      	ldr	r4, [sp, #20]
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d1aa:	2909      	cmp	r1, #9
 800d1ac:	d913      	bls.n	800d1d6 <_strtod_l+0x206>
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	9104      	str	r1, [sp, #16]
 800d1b2:	e7c2      	b.n	800d13a <_strtod_l+0x16a>
 800d1b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1b6:	1c5a      	adds	r2, r3, #1
 800d1b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800d1ba:	785b      	ldrb	r3, [r3, #1]
 800d1bc:	3001      	adds	r0, #1
 800d1be:	2b30      	cmp	r3, #48	; 0x30
 800d1c0:	d0f8      	beq.n	800d1b4 <_strtod_l+0x1e4>
 800d1c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d1c6:	2a08      	cmp	r2, #8
 800d1c8:	f200 84e4 	bhi.w	800db94 <_strtod_l+0xbc4>
 800d1cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d1ce:	9208      	str	r2, [sp, #32]
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d1da:	f100 0101 	add.w	r1, r0, #1
 800d1de:	d012      	beq.n	800d206 <_strtod_l+0x236>
 800d1e0:	440a      	add	r2, r1
 800d1e2:	eb00 0c04 	add.w	ip, r0, r4
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	270a      	movs	r7, #10
 800d1ea:	458c      	cmp	ip, r1
 800d1ec:	d113      	bne.n	800d216 <_strtod_l+0x246>
 800d1ee:	1821      	adds	r1, r4, r0
 800d1f0:	2908      	cmp	r1, #8
 800d1f2:	f104 0401 	add.w	r4, r4, #1
 800d1f6:	4404      	add	r4, r0
 800d1f8:	dc19      	bgt.n	800d22e <_strtod_l+0x25e>
 800d1fa:	9b07      	ldr	r3, [sp, #28]
 800d1fc:	210a      	movs	r1, #10
 800d1fe:	fb01 e303 	mla	r3, r1, r3, lr
 800d202:	9307      	str	r3, [sp, #28]
 800d204:	2100      	movs	r1, #0
 800d206:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d208:	1c58      	adds	r0, r3, #1
 800d20a:	901b      	str	r0, [sp, #108]	; 0x6c
 800d20c:	785b      	ldrb	r3, [r3, #1]
 800d20e:	4608      	mov	r0, r1
 800d210:	e7c9      	b.n	800d1a6 <_strtod_l+0x1d6>
 800d212:	9805      	ldr	r0, [sp, #20]
 800d214:	e7d3      	b.n	800d1be <_strtod_l+0x1ee>
 800d216:	2908      	cmp	r1, #8
 800d218:	f101 0101 	add.w	r1, r1, #1
 800d21c:	dc03      	bgt.n	800d226 <_strtod_l+0x256>
 800d21e:	9b07      	ldr	r3, [sp, #28]
 800d220:	437b      	muls	r3, r7
 800d222:	9307      	str	r3, [sp, #28]
 800d224:	e7e1      	b.n	800d1ea <_strtod_l+0x21a>
 800d226:	2910      	cmp	r1, #16
 800d228:	bfd8      	it	le
 800d22a:	437d      	mulle	r5, r7
 800d22c:	e7dd      	b.n	800d1ea <_strtod_l+0x21a>
 800d22e:	2c10      	cmp	r4, #16
 800d230:	bfdc      	itt	le
 800d232:	210a      	movle	r1, #10
 800d234:	fb01 e505 	mlale	r5, r1, r5, lr
 800d238:	e7e4      	b.n	800d204 <_strtod_l+0x234>
 800d23a:	2301      	movs	r3, #1
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	e781      	b.n	800d144 <_strtod_l+0x174>
 800d240:	f04f 0c01 	mov.w	ip, #1
 800d244:	1cb3      	adds	r3, r6, #2
 800d246:	931b      	str	r3, [sp, #108]	; 0x6c
 800d248:	78b3      	ldrb	r3, [r6, #2]
 800d24a:	e78a      	b.n	800d162 <_strtod_l+0x192>
 800d24c:	f04f 0c00 	mov.w	ip, #0
 800d250:	e7f8      	b.n	800d244 <_strtod_l+0x274>
 800d252:	bf00      	nop
 800d254:	0801212c 	.word	0x0801212c
 800d258:	7ff00000 	.word	0x7ff00000
 800d25c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d25e:	1c5f      	adds	r7, r3, #1
 800d260:	971b      	str	r7, [sp, #108]	; 0x6c
 800d262:	785b      	ldrb	r3, [r3, #1]
 800d264:	2b30      	cmp	r3, #48	; 0x30
 800d266:	d0f9      	beq.n	800d25c <_strtod_l+0x28c>
 800d268:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d26c:	2f08      	cmp	r7, #8
 800d26e:	f63f af7d 	bhi.w	800d16c <_strtod_l+0x19c>
 800d272:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d278:	930a      	str	r3, [sp, #40]	; 0x28
 800d27a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d27c:	1c5f      	adds	r7, r3, #1
 800d27e:	971b      	str	r7, [sp, #108]	; 0x6c
 800d280:	785b      	ldrb	r3, [r3, #1]
 800d282:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d286:	f1b8 0f09 	cmp.w	r8, #9
 800d28a:	d937      	bls.n	800d2fc <_strtod_l+0x32c>
 800d28c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d28e:	1a7f      	subs	r7, r7, r1
 800d290:	2f08      	cmp	r7, #8
 800d292:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d296:	dc37      	bgt.n	800d308 <_strtod_l+0x338>
 800d298:	45be      	cmp	lr, r7
 800d29a:	bfa8      	it	ge
 800d29c:	46be      	movge	lr, r7
 800d29e:	f1bc 0f00 	cmp.w	ip, #0
 800d2a2:	d001      	beq.n	800d2a8 <_strtod_l+0x2d8>
 800d2a4:	f1ce 0e00 	rsb	lr, lr, #0
 800d2a8:	2c00      	cmp	r4, #0
 800d2aa:	d151      	bne.n	800d350 <_strtod_l+0x380>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	f47f aece 	bne.w	800d04e <_strtod_l+0x7e>
 800d2b2:	9a06      	ldr	r2, [sp, #24]
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	f47f aeca 	bne.w	800d04e <_strtod_l+0x7e>
 800d2ba:	9a04      	ldr	r2, [sp, #16]
 800d2bc:	2a00      	cmp	r2, #0
 800d2be:	f47f aee4 	bne.w	800d08a <_strtod_l+0xba>
 800d2c2:	2b4e      	cmp	r3, #78	; 0x4e
 800d2c4:	d027      	beq.n	800d316 <_strtod_l+0x346>
 800d2c6:	dc21      	bgt.n	800d30c <_strtod_l+0x33c>
 800d2c8:	2b49      	cmp	r3, #73	; 0x49
 800d2ca:	f47f aede 	bne.w	800d08a <_strtod_l+0xba>
 800d2ce:	49a0      	ldr	r1, [pc, #640]	; (800d550 <_strtod_l+0x580>)
 800d2d0:	a81b      	add	r0, sp, #108	; 0x6c
 800d2d2:	f001 fff1 	bl	800f2b8 <__match>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	f43f aed7 	beq.w	800d08a <_strtod_l+0xba>
 800d2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2de:	499d      	ldr	r1, [pc, #628]	; (800d554 <_strtod_l+0x584>)
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	a81b      	add	r0, sp, #108	; 0x6c
 800d2e4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2e6:	f001 ffe7 	bl	800f2b8 <__match>
 800d2ea:	b910      	cbnz	r0, 800d2f2 <_strtod_l+0x322>
 800d2ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d568 <_strtod_l+0x598>
 800d2f6:	f04f 0a00 	mov.w	sl, #0
 800d2fa:	e6a8      	b.n	800d04e <_strtod_l+0x7e>
 800d2fc:	210a      	movs	r1, #10
 800d2fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d302:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d306:	e7b8      	b.n	800d27a <_strtod_l+0x2aa>
 800d308:	46be      	mov	lr, r7
 800d30a:	e7c8      	b.n	800d29e <_strtod_l+0x2ce>
 800d30c:	2b69      	cmp	r3, #105	; 0x69
 800d30e:	d0de      	beq.n	800d2ce <_strtod_l+0x2fe>
 800d310:	2b6e      	cmp	r3, #110	; 0x6e
 800d312:	f47f aeba 	bne.w	800d08a <_strtod_l+0xba>
 800d316:	4990      	ldr	r1, [pc, #576]	; (800d558 <_strtod_l+0x588>)
 800d318:	a81b      	add	r0, sp, #108	; 0x6c
 800d31a:	f001 ffcd 	bl	800f2b8 <__match>
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f aeb3 	beq.w	800d08a <_strtod_l+0xba>
 800d324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b28      	cmp	r3, #40	; 0x28
 800d32a:	d10e      	bne.n	800d34a <_strtod_l+0x37a>
 800d32c:	aa1e      	add	r2, sp, #120	; 0x78
 800d32e:	498b      	ldr	r1, [pc, #556]	; (800d55c <_strtod_l+0x58c>)
 800d330:	a81b      	add	r0, sp, #108	; 0x6c
 800d332:	f001 ffd5 	bl	800f2e0 <__hexnan>
 800d336:	2805      	cmp	r0, #5
 800d338:	d107      	bne.n	800d34a <_strtod_l+0x37a>
 800d33a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d33c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d340:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d344:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d348:	e681      	b.n	800d04e <_strtod_l+0x7e>
 800d34a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d570 <_strtod_l+0x5a0>
 800d34e:	e7d2      	b.n	800d2f6 <_strtod_l+0x326>
 800d350:	ebae 0302 	sub.w	r3, lr, r2
 800d354:	9306      	str	r3, [sp, #24]
 800d356:	9b05      	ldr	r3, [sp, #20]
 800d358:	9807      	ldr	r0, [sp, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bf08      	it	eq
 800d35e:	4623      	moveq	r3, r4
 800d360:	2c10      	cmp	r4, #16
 800d362:	9305      	str	r3, [sp, #20]
 800d364:	46a0      	mov	r8, r4
 800d366:	bfa8      	it	ge
 800d368:	f04f 0810 	movge.w	r8, #16
 800d36c:	f7f3 f8e2 	bl	8000534 <__aeabi_ui2d>
 800d370:	2c09      	cmp	r4, #9
 800d372:	4682      	mov	sl, r0
 800d374:	468b      	mov	fp, r1
 800d376:	dc13      	bgt.n	800d3a0 <_strtod_l+0x3d0>
 800d378:	9b06      	ldr	r3, [sp, #24]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f43f ae67 	beq.w	800d04e <_strtod_l+0x7e>
 800d380:	9b06      	ldr	r3, [sp, #24]
 800d382:	dd7a      	ble.n	800d47a <_strtod_l+0x4aa>
 800d384:	2b16      	cmp	r3, #22
 800d386:	dc61      	bgt.n	800d44c <_strtod_l+0x47c>
 800d388:	4a75      	ldr	r2, [pc, #468]	; (800d560 <_strtod_l+0x590>)
 800d38a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d38e:	e9de 0100 	ldrd	r0, r1, [lr]
 800d392:	4652      	mov	r2, sl
 800d394:	465b      	mov	r3, fp
 800d396:	f7f3 f947 	bl	8000628 <__aeabi_dmul>
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	e656      	b.n	800d04e <_strtod_l+0x7e>
 800d3a0:	4b6f      	ldr	r3, [pc, #444]	; (800d560 <_strtod_l+0x590>)
 800d3a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d3a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d3aa:	f7f3 f93d 	bl	8000628 <__aeabi_dmul>
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	460f      	mov	r7, r1
 800d3b4:	f7f3 f8be 	bl	8000534 <__aeabi_ui2d>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4639      	mov	r1, r7
 800d3c0:	f7f2 ff7c 	bl	80002bc <__adddf3>
 800d3c4:	2c0f      	cmp	r4, #15
 800d3c6:	4682      	mov	sl, r0
 800d3c8:	468b      	mov	fp, r1
 800d3ca:	ddd5      	ble.n	800d378 <_strtod_l+0x3a8>
 800d3cc:	9b06      	ldr	r3, [sp, #24]
 800d3ce:	eba4 0808 	sub.w	r8, r4, r8
 800d3d2:	4498      	add	r8, r3
 800d3d4:	f1b8 0f00 	cmp.w	r8, #0
 800d3d8:	f340 8096 	ble.w	800d508 <_strtod_l+0x538>
 800d3dc:	f018 030f 	ands.w	r3, r8, #15
 800d3e0:	d00a      	beq.n	800d3f8 <_strtod_l+0x428>
 800d3e2:	495f      	ldr	r1, [pc, #380]	; (800d560 <_strtod_l+0x590>)
 800d3e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3e8:	4652      	mov	r2, sl
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f0:	f7f3 f91a 	bl	8000628 <__aeabi_dmul>
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	468b      	mov	fp, r1
 800d3f8:	f038 080f 	bics.w	r8, r8, #15
 800d3fc:	d073      	beq.n	800d4e6 <_strtod_l+0x516>
 800d3fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d402:	dd47      	ble.n	800d494 <_strtod_l+0x4c4>
 800d404:	2400      	movs	r4, #0
 800d406:	46a0      	mov	r8, r4
 800d408:	9407      	str	r4, [sp, #28]
 800d40a:	9405      	str	r4, [sp, #20]
 800d40c:	2322      	movs	r3, #34	; 0x22
 800d40e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d568 <_strtod_l+0x598>
 800d412:	f8c9 3000 	str.w	r3, [r9]
 800d416:	f04f 0a00 	mov.w	sl, #0
 800d41a:	9b07      	ldr	r3, [sp, #28]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f43f ae16 	beq.w	800d04e <_strtod_l+0x7e>
 800d422:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d424:	4648      	mov	r0, r9
 800d426:	f002 f8d1 	bl	800f5cc <_Bfree>
 800d42a:	9905      	ldr	r1, [sp, #20]
 800d42c:	4648      	mov	r0, r9
 800d42e:	f002 f8cd 	bl	800f5cc <_Bfree>
 800d432:	4641      	mov	r1, r8
 800d434:	4648      	mov	r0, r9
 800d436:	f002 f8c9 	bl	800f5cc <_Bfree>
 800d43a:	9907      	ldr	r1, [sp, #28]
 800d43c:	4648      	mov	r0, r9
 800d43e:	f002 f8c5 	bl	800f5cc <_Bfree>
 800d442:	4621      	mov	r1, r4
 800d444:	4648      	mov	r0, r9
 800d446:	f002 f8c1 	bl	800f5cc <_Bfree>
 800d44a:	e600      	b.n	800d04e <_strtod_l+0x7e>
 800d44c:	9a06      	ldr	r2, [sp, #24]
 800d44e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d452:	4293      	cmp	r3, r2
 800d454:	dbba      	blt.n	800d3cc <_strtod_l+0x3fc>
 800d456:	4d42      	ldr	r5, [pc, #264]	; (800d560 <_strtod_l+0x590>)
 800d458:	f1c4 040f 	rsb	r4, r4, #15
 800d45c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d460:	4652      	mov	r2, sl
 800d462:	465b      	mov	r3, fp
 800d464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d468:	f7f3 f8de 	bl	8000628 <__aeabi_dmul>
 800d46c:	9b06      	ldr	r3, [sp, #24]
 800d46e:	1b1c      	subs	r4, r3, r4
 800d470:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d474:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d478:	e78d      	b.n	800d396 <_strtod_l+0x3c6>
 800d47a:	f113 0f16 	cmn.w	r3, #22
 800d47e:	dba5      	blt.n	800d3cc <_strtod_l+0x3fc>
 800d480:	4a37      	ldr	r2, [pc, #220]	; (800d560 <_strtod_l+0x590>)
 800d482:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d486:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d48a:	4650      	mov	r0, sl
 800d48c:	4659      	mov	r1, fp
 800d48e:	f7f3 f9f5 	bl	800087c <__aeabi_ddiv>
 800d492:	e782      	b.n	800d39a <_strtod_l+0x3ca>
 800d494:	2300      	movs	r3, #0
 800d496:	4e33      	ldr	r6, [pc, #204]	; (800d564 <_strtod_l+0x594>)
 800d498:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d49c:	4650      	mov	r0, sl
 800d49e:	4659      	mov	r1, fp
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	f1b8 0f01 	cmp.w	r8, #1
 800d4a6:	dc21      	bgt.n	800d4ec <_strtod_l+0x51c>
 800d4a8:	b10b      	cbz	r3, 800d4ae <_strtod_l+0x4de>
 800d4aa:	4682      	mov	sl, r0
 800d4ac:	468b      	mov	fp, r1
 800d4ae:	4b2d      	ldr	r3, [pc, #180]	; (800d564 <_strtod_l+0x594>)
 800d4b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d4b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	465b      	mov	r3, fp
 800d4bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d4c0:	f7f3 f8b2 	bl	8000628 <__aeabi_dmul>
 800d4c4:	4b28      	ldr	r3, [pc, #160]	; (800d568 <_strtod_l+0x598>)
 800d4c6:	460a      	mov	r2, r1
 800d4c8:	400b      	ands	r3, r1
 800d4ca:	4928      	ldr	r1, [pc, #160]	; (800d56c <_strtod_l+0x59c>)
 800d4cc:	428b      	cmp	r3, r1
 800d4ce:	4682      	mov	sl, r0
 800d4d0:	d898      	bhi.n	800d404 <_strtod_l+0x434>
 800d4d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d4d6:	428b      	cmp	r3, r1
 800d4d8:	bf86      	itte	hi
 800d4da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d574 <_strtod_l+0x5a4>
 800d4de:	f04f 3aff 	movhi.w	sl, #4294967295
 800d4e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	e077      	b.n	800d5dc <_strtod_l+0x60c>
 800d4ec:	f018 0f01 	tst.w	r8, #1
 800d4f0:	d006      	beq.n	800d500 <_strtod_l+0x530>
 800d4f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f3 f895 	bl	8000628 <__aeabi_dmul>
 800d4fe:	2301      	movs	r3, #1
 800d500:	3501      	adds	r5, #1
 800d502:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d506:	e7cc      	b.n	800d4a2 <_strtod_l+0x4d2>
 800d508:	d0ed      	beq.n	800d4e6 <_strtod_l+0x516>
 800d50a:	f1c8 0800 	rsb	r8, r8, #0
 800d50e:	f018 020f 	ands.w	r2, r8, #15
 800d512:	d00a      	beq.n	800d52a <_strtod_l+0x55a>
 800d514:	4b12      	ldr	r3, [pc, #72]	; (800d560 <_strtod_l+0x590>)
 800d516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d51a:	4650      	mov	r0, sl
 800d51c:	4659      	mov	r1, fp
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	f7f3 f9ab 	bl	800087c <__aeabi_ddiv>
 800d526:	4682      	mov	sl, r0
 800d528:	468b      	mov	fp, r1
 800d52a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d52e:	d0da      	beq.n	800d4e6 <_strtod_l+0x516>
 800d530:	f1b8 0f1f 	cmp.w	r8, #31
 800d534:	dd20      	ble.n	800d578 <_strtod_l+0x5a8>
 800d536:	2400      	movs	r4, #0
 800d538:	46a0      	mov	r8, r4
 800d53a:	9407      	str	r4, [sp, #28]
 800d53c:	9405      	str	r4, [sp, #20]
 800d53e:	2322      	movs	r3, #34	; 0x22
 800d540:	f04f 0a00 	mov.w	sl, #0
 800d544:	f04f 0b00 	mov.w	fp, #0
 800d548:	f8c9 3000 	str.w	r3, [r9]
 800d54c:	e765      	b.n	800d41a <_strtod_l+0x44a>
 800d54e:	bf00      	nop
 800d550:	080120f9 	.word	0x080120f9
 800d554:	08012183 	.word	0x08012183
 800d558:	08012101 	.word	0x08012101
 800d55c:	08012140 	.word	0x08012140
 800d560:	08012228 	.word	0x08012228
 800d564:	08012200 	.word	0x08012200
 800d568:	7ff00000 	.word	0x7ff00000
 800d56c:	7ca00000 	.word	0x7ca00000
 800d570:	fff80000 	.word	0xfff80000
 800d574:	7fefffff 	.word	0x7fefffff
 800d578:	f018 0310 	ands.w	r3, r8, #16
 800d57c:	bf18      	it	ne
 800d57e:	236a      	movne	r3, #106	; 0x6a
 800d580:	4da0      	ldr	r5, [pc, #640]	; (800d804 <_strtod_l+0x834>)
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	4650      	mov	r0, sl
 800d586:	4659      	mov	r1, fp
 800d588:	2300      	movs	r3, #0
 800d58a:	f1b8 0f00 	cmp.w	r8, #0
 800d58e:	f300 810a 	bgt.w	800d7a6 <_strtod_l+0x7d6>
 800d592:	b10b      	cbz	r3, 800d598 <_strtod_l+0x5c8>
 800d594:	4682      	mov	sl, r0
 800d596:	468b      	mov	fp, r1
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	b1bb      	cbz	r3, 800d5cc <_strtod_l+0x5fc>
 800d59c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d5a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	4659      	mov	r1, fp
 800d5a8:	dd10      	ble.n	800d5cc <_strtod_l+0x5fc>
 800d5aa:	2b1f      	cmp	r3, #31
 800d5ac:	f340 8107 	ble.w	800d7be <_strtod_l+0x7ee>
 800d5b0:	2b34      	cmp	r3, #52	; 0x34
 800d5b2:	bfde      	ittt	le
 800d5b4:	3b20      	suble	r3, #32
 800d5b6:	f04f 32ff 	movle.w	r2, #4294967295
 800d5ba:	fa02 f303 	lslle.w	r3, r2, r3
 800d5be:	f04f 0a00 	mov.w	sl, #0
 800d5c2:	bfcc      	ite	gt
 800d5c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d5c8:	ea03 0b01 	andle.w	fp, r3, r1
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	4659      	mov	r1, fp
 800d5d4:	f7f3 fa90 	bl	8000af8 <__aeabi_dcmpeq>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1ac      	bne.n	800d536 <_strtod_l+0x566>
 800d5dc:	9b07      	ldr	r3, [sp, #28]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	9a05      	ldr	r2, [sp, #20]
 800d5e2:	9908      	ldr	r1, [sp, #32]
 800d5e4:	4623      	mov	r3, r4
 800d5e6:	4648      	mov	r0, r9
 800d5e8:	f002 f842 	bl	800f670 <__s2b>
 800d5ec:	9007      	str	r0, [sp, #28]
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f43f af08 	beq.w	800d404 <_strtod_l+0x434>
 800d5f4:	9a06      	ldr	r2, [sp, #24]
 800d5f6:	9b06      	ldr	r3, [sp, #24]
 800d5f8:	2a00      	cmp	r2, #0
 800d5fa:	f1c3 0300 	rsb	r3, r3, #0
 800d5fe:	bfa8      	it	ge
 800d600:	2300      	movge	r3, #0
 800d602:	930e      	str	r3, [sp, #56]	; 0x38
 800d604:	2400      	movs	r4, #0
 800d606:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d60a:	9316      	str	r3, [sp, #88]	; 0x58
 800d60c:	46a0      	mov	r8, r4
 800d60e:	9b07      	ldr	r3, [sp, #28]
 800d610:	4648      	mov	r0, r9
 800d612:	6859      	ldr	r1, [r3, #4]
 800d614:	f001 ffa6 	bl	800f564 <_Balloc>
 800d618:	9005      	str	r0, [sp, #20]
 800d61a:	2800      	cmp	r0, #0
 800d61c:	f43f aef6 	beq.w	800d40c <_strtod_l+0x43c>
 800d620:	9b07      	ldr	r3, [sp, #28]
 800d622:	691a      	ldr	r2, [r3, #16]
 800d624:	3202      	adds	r2, #2
 800d626:	f103 010c 	add.w	r1, r3, #12
 800d62a:	0092      	lsls	r2, r2, #2
 800d62c:	300c      	adds	r0, #12
 800d62e:	f7fe fc97 	bl	800bf60 <memcpy>
 800d632:	aa1e      	add	r2, sp, #120	; 0x78
 800d634:	a91d      	add	r1, sp, #116	; 0x74
 800d636:	ec4b ab10 	vmov	d0, sl, fp
 800d63a:	4648      	mov	r0, r9
 800d63c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d640:	f002 fad2 	bl	800fbe8 <__d2b>
 800d644:	901c      	str	r0, [sp, #112]	; 0x70
 800d646:	2800      	cmp	r0, #0
 800d648:	f43f aee0 	beq.w	800d40c <_strtod_l+0x43c>
 800d64c:	2101      	movs	r1, #1
 800d64e:	4648      	mov	r0, r9
 800d650:	f002 f89a 	bl	800f788 <__i2b>
 800d654:	4680      	mov	r8, r0
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f aed8 	beq.w	800d40c <_strtod_l+0x43c>
 800d65c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d65e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d660:	2e00      	cmp	r6, #0
 800d662:	bfab      	itete	ge
 800d664:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d666:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d668:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d66a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d66c:	bfac      	ite	ge
 800d66e:	18f7      	addge	r7, r6, r3
 800d670:	1b9d      	sublt	r5, r3, r6
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	1af6      	subs	r6, r6, r3
 800d676:	4416      	add	r6, r2
 800d678:	4b63      	ldr	r3, [pc, #396]	; (800d808 <_strtod_l+0x838>)
 800d67a:	3e01      	subs	r6, #1
 800d67c:	429e      	cmp	r6, r3
 800d67e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d682:	f280 80af 	bge.w	800d7e4 <_strtod_l+0x814>
 800d686:	1b9b      	subs	r3, r3, r6
 800d688:	2b1f      	cmp	r3, #31
 800d68a:	eba2 0203 	sub.w	r2, r2, r3
 800d68e:	f04f 0101 	mov.w	r1, #1
 800d692:	f300 809b 	bgt.w	800d7cc <_strtod_l+0x7fc>
 800d696:	fa01 f303 	lsl.w	r3, r1, r3
 800d69a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d69c:	2300      	movs	r3, #0
 800d69e:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a0:	18be      	adds	r6, r7, r2
 800d6a2:	9b04      	ldr	r3, [sp, #16]
 800d6a4:	42b7      	cmp	r7, r6
 800d6a6:	4415      	add	r5, r2
 800d6a8:	441d      	add	r5, r3
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	bfa8      	it	ge
 800d6ae:	4633      	movge	r3, r6
 800d6b0:	42ab      	cmp	r3, r5
 800d6b2:	bfa8      	it	ge
 800d6b4:	462b      	movge	r3, r5
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfc2      	ittt	gt
 800d6ba:	1af6      	subgt	r6, r6, r3
 800d6bc:	1aed      	subgt	r5, r5, r3
 800d6be:	1aff      	subgt	r7, r7, r3
 800d6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6c2:	b1bb      	cbz	r3, 800d6f4 <_strtod_l+0x724>
 800d6c4:	4641      	mov	r1, r8
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	4648      	mov	r0, r9
 800d6ca:	f002 f8fd 	bl	800f8c8 <__pow5mult>
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	f43f ae9b 	beq.w	800d40c <_strtod_l+0x43c>
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d6da:	4648      	mov	r0, r9
 800d6dc:	f002 f85d 	bl	800f79a <__multiply>
 800d6e0:	900c      	str	r0, [sp, #48]	; 0x30
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f43f ae92 	beq.w	800d40c <_strtod_l+0x43c>
 800d6e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6ea:	4648      	mov	r0, r9
 800d6ec:	f001 ff6e 	bl	800f5cc <_Bfree>
 800d6f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6f2:	931c      	str	r3, [sp, #112]	; 0x70
 800d6f4:	2e00      	cmp	r6, #0
 800d6f6:	dc7a      	bgt.n	800d7ee <_strtod_l+0x81e>
 800d6f8:	9b06      	ldr	r3, [sp, #24]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	dd08      	ble.n	800d710 <_strtod_l+0x740>
 800d6fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d700:	9905      	ldr	r1, [sp, #20]
 800d702:	4648      	mov	r0, r9
 800d704:	f002 f8e0 	bl	800f8c8 <__pow5mult>
 800d708:	9005      	str	r0, [sp, #20]
 800d70a:	2800      	cmp	r0, #0
 800d70c:	f43f ae7e 	beq.w	800d40c <_strtod_l+0x43c>
 800d710:	2d00      	cmp	r5, #0
 800d712:	dd08      	ble.n	800d726 <_strtod_l+0x756>
 800d714:	462a      	mov	r2, r5
 800d716:	9905      	ldr	r1, [sp, #20]
 800d718:	4648      	mov	r0, r9
 800d71a:	f002 f923 	bl	800f964 <__lshift>
 800d71e:	9005      	str	r0, [sp, #20]
 800d720:	2800      	cmp	r0, #0
 800d722:	f43f ae73 	beq.w	800d40c <_strtod_l+0x43c>
 800d726:	2f00      	cmp	r7, #0
 800d728:	dd08      	ble.n	800d73c <_strtod_l+0x76c>
 800d72a:	4641      	mov	r1, r8
 800d72c:	463a      	mov	r2, r7
 800d72e:	4648      	mov	r0, r9
 800d730:	f002 f918 	bl	800f964 <__lshift>
 800d734:	4680      	mov	r8, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	f43f ae68 	beq.w	800d40c <_strtod_l+0x43c>
 800d73c:	9a05      	ldr	r2, [sp, #20]
 800d73e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d740:	4648      	mov	r0, r9
 800d742:	f002 f97d 	bl	800fa40 <__mdiff>
 800d746:	4604      	mov	r4, r0
 800d748:	2800      	cmp	r0, #0
 800d74a:	f43f ae5f 	beq.w	800d40c <_strtod_l+0x43c>
 800d74e:	68c3      	ldr	r3, [r0, #12]
 800d750:	930c      	str	r3, [sp, #48]	; 0x30
 800d752:	2300      	movs	r3, #0
 800d754:	60c3      	str	r3, [r0, #12]
 800d756:	4641      	mov	r1, r8
 800d758:	f002 f958 	bl	800fa0c <__mcmp>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	da55      	bge.n	800d80c <_strtod_l+0x83c>
 800d760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d762:	b9e3      	cbnz	r3, 800d79e <_strtod_l+0x7ce>
 800d764:	f1ba 0f00 	cmp.w	sl, #0
 800d768:	d119      	bne.n	800d79e <_strtod_l+0x7ce>
 800d76a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d76e:	b9b3      	cbnz	r3, 800d79e <_strtod_l+0x7ce>
 800d770:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d774:	0d1b      	lsrs	r3, r3, #20
 800d776:	051b      	lsls	r3, r3, #20
 800d778:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d77c:	d90f      	bls.n	800d79e <_strtod_l+0x7ce>
 800d77e:	6963      	ldr	r3, [r4, #20]
 800d780:	b913      	cbnz	r3, 800d788 <_strtod_l+0x7b8>
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	2b01      	cmp	r3, #1
 800d786:	dd0a      	ble.n	800d79e <_strtod_l+0x7ce>
 800d788:	4621      	mov	r1, r4
 800d78a:	2201      	movs	r2, #1
 800d78c:	4648      	mov	r0, r9
 800d78e:	f002 f8e9 	bl	800f964 <__lshift>
 800d792:	4641      	mov	r1, r8
 800d794:	4604      	mov	r4, r0
 800d796:	f002 f939 	bl	800fa0c <__mcmp>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	dc67      	bgt.n	800d86e <_strtod_l+0x89e>
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d171      	bne.n	800d888 <_strtod_l+0x8b8>
 800d7a4:	e63d      	b.n	800d422 <_strtod_l+0x452>
 800d7a6:	f018 0f01 	tst.w	r8, #1
 800d7aa:	d004      	beq.n	800d7b6 <_strtod_l+0x7e6>
 800d7ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7b0:	f7f2 ff3a 	bl	8000628 <__aeabi_dmul>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d7ba:	3508      	adds	r5, #8
 800d7bc:	e6e5      	b.n	800d58a <_strtod_l+0x5ba>
 800d7be:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c6:	ea03 0a0a 	and.w	sl, r3, sl
 800d7ca:	e6ff      	b.n	800d5cc <_strtod_l+0x5fc>
 800d7cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d7d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d7d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d7d8:	36e2      	adds	r6, #226	; 0xe2
 800d7da:	fa01 f306 	lsl.w	r3, r1, r6
 800d7de:	930a      	str	r3, [sp, #40]	; 0x28
 800d7e0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d7e2:	e75d      	b.n	800d6a0 <_strtod_l+0x6d0>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ec:	e758      	b.n	800d6a0 <_strtod_l+0x6d0>
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7f2:	4648      	mov	r0, r9
 800d7f4:	f002 f8b6 	bl	800f964 <__lshift>
 800d7f8:	901c      	str	r0, [sp, #112]	; 0x70
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	f47f af7c 	bne.w	800d6f8 <_strtod_l+0x728>
 800d800:	e604      	b.n	800d40c <_strtod_l+0x43c>
 800d802:	bf00      	nop
 800d804:	08012158 	.word	0x08012158
 800d808:	fffffc02 	.word	0xfffffc02
 800d80c:	465d      	mov	r5, fp
 800d80e:	f040 8086 	bne.w	800d91e <_strtod_l+0x94e>
 800d812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d818:	b32a      	cbz	r2, 800d866 <_strtod_l+0x896>
 800d81a:	4aaf      	ldr	r2, [pc, #700]	; (800dad8 <_strtod_l+0xb08>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d153      	bne.n	800d8c8 <_strtod_l+0x8f8>
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	4650      	mov	r0, sl
 800d824:	b1d3      	cbz	r3, 800d85c <_strtod_l+0x88c>
 800d826:	4aad      	ldr	r2, [pc, #692]	; (800dadc <_strtod_l+0xb0c>)
 800d828:	402a      	ands	r2, r5
 800d82a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d82e:	f04f 31ff 	mov.w	r1, #4294967295
 800d832:	d816      	bhi.n	800d862 <_strtod_l+0x892>
 800d834:	0d12      	lsrs	r2, r2, #20
 800d836:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d83a:	fa01 f303 	lsl.w	r3, r1, r3
 800d83e:	4298      	cmp	r0, r3
 800d840:	d142      	bne.n	800d8c8 <_strtod_l+0x8f8>
 800d842:	4ba7      	ldr	r3, [pc, #668]	; (800dae0 <_strtod_l+0xb10>)
 800d844:	429d      	cmp	r5, r3
 800d846:	d102      	bne.n	800d84e <_strtod_l+0x87e>
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f addf 	beq.w	800d40c <_strtod_l+0x43c>
 800d84e:	4ba3      	ldr	r3, [pc, #652]	; (800dadc <_strtod_l+0xb0c>)
 800d850:	402b      	ands	r3, r5
 800d852:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d856:	f04f 0a00 	mov.w	sl, #0
 800d85a:	e7a0      	b.n	800d79e <_strtod_l+0x7ce>
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295
 800d860:	e7ed      	b.n	800d83e <_strtod_l+0x86e>
 800d862:	460b      	mov	r3, r1
 800d864:	e7eb      	b.n	800d83e <_strtod_l+0x86e>
 800d866:	bb7b      	cbnz	r3, 800d8c8 <_strtod_l+0x8f8>
 800d868:	f1ba 0f00 	cmp.w	sl, #0
 800d86c:	d12c      	bne.n	800d8c8 <_strtod_l+0x8f8>
 800d86e:	9904      	ldr	r1, [sp, #16]
 800d870:	4a9a      	ldr	r2, [pc, #616]	; (800dadc <_strtod_l+0xb0c>)
 800d872:	465b      	mov	r3, fp
 800d874:	b1f1      	cbz	r1, 800d8b4 <_strtod_l+0x8e4>
 800d876:	ea02 010b 	and.w	r1, r2, fp
 800d87a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d87e:	dc19      	bgt.n	800d8b4 <_strtod_l+0x8e4>
 800d880:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d884:	f77f ae5b 	ble.w	800d53e <_strtod_l+0x56e>
 800d888:	4a96      	ldr	r2, [pc, #600]	; (800dae4 <_strtod_l+0xb14>)
 800d88a:	2300      	movs	r3, #0
 800d88c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d890:	4650      	mov	r0, sl
 800d892:	4659      	mov	r1, fp
 800d894:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d898:	f7f2 fec6 	bl	8000628 <__aeabi_dmul>
 800d89c:	4682      	mov	sl, r0
 800d89e:	468b      	mov	fp, r1
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	f47f adbe 	bne.w	800d422 <_strtod_l+0x452>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	f47f adbb 	bne.w	800d422 <_strtod_l+0x452>
 800d8ac:	2322      	movs	r3, #34	; 0x22
 800d8ae:	f8c9 3000 	str.w	r3, [r9]
 800d8b2:	e5b6      	b.n	800d422 <_strtod_l+0x452>
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d8ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d8be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d8c2:	f04f 3aff 	mov.w	sl, #4294967295
 800d8c6:	e76a      	b.n	800d79e <_strtod_l+0x7ce>
 800d8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ca:	b193      	cbz	r3, 800d8f2 <_strtod_l+0x922>
 800d8cc:	422b      	tst	r3, r5
 800d8ce:	f43f af66 	beq.w	800d79e <_strtod_l+0x7ce>
 800d8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8d4:	9a04      	ldr	r2, [sp, #16]
 800d8d6:	4650      	mov	r0, sl
 800d8d8:	4659      	mov	r1, fp
 800d8da:	b173      	cbz	r3, 800d8fa <_strtod_l+0x92a>
 800d8dc:	f7ff fb59 	bl	800cf92 <sulp>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d8e8:	f7f2 fce8 	bl	80002bc <__adddf3>
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	468b      	mov	fp, r1
 800d8f0:	e755      	b.n	800d79e <_strtod_l+0x7ce>
 800d8f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8f4:	ea13 0f0a 	tst.w	r3, sl
 800d8f8:	e7e9      	b.n	800d8ce <_strtod_l+0x8fe>
 800d8fa:	f7ff fb4a 	bl	800cf92 <sulp>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d906:	f7f2 fcd7 	bl	80002b8 <__aeabi_dsub>
 800d90a:	2200      	movs	r2, #0
 800d90c:	2300      	movs	r3, #0
 800d90e:	4682      	mov	sl, r0
 800d910:	468b      	mov	fp, r1
 800d912:	f7f3 f8f1 	bl	8000af8 <__aeabi_dcmpeq>
 800d916:	2800      	cmp	r0, #0
 800d918:	f47f ae11 	bne.w	800d53e <_strtod_l+0x56e>
 800d91c:	e73f      	b.n	800d79e <_strtod_l+0x7ce>
 800d91e:	4641      	mov	r1, r8
 800d920:	4620      	mov	r0, r4
 800d922:	f002 f9b0 	bl	800fc86 <__ratio>
 800d926:	ec57 6b10 	vmov	r6, r7, d0
 800d92a:	2200      	movs	r2, #0
 800d92c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d930:	ee10 0a10 	vmov	r0, s0
 800d934:	4639      	mov	r1, r7
 800d936:	f7f3 f8f3 	bl	8000b20 <__aeabi_dcmple>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d077      	beq.n	800da2e <_strtod_l+0xa5e>
 800d93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d940:	2b00      	cmp	r3, #0
 800d942:	d04a      	beq.n	800d9da <_strtod_l+0xa0a>
 800d944:	4b68      	ldr	r3, [pc, #416]	; (800dae8 <_strtod_l+0xb18>)
 800d946:	2200      	movs	r2, #0
 800d948:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d94c:	4f66      	ldr	r7, [pc, #408]	; (800dae8 <_strtod_l+0xb18>)
 800d94e:	2600      	movs	r6, #0
 800d950:	4b62      	ldr	r3, [pc, #392]	; (800dadc <_strtod_l+0xb0c>)
 800d952:	402b      	ands	r3, r5
 800d954:	930f      	str	r3, [sp, #60]	; 0x3c
 800d956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d958:	4b64      	ldr	r3, [pc, #400]	; (800daec <_strtod_l+0xb1c>)
 800d95a:	429a      	cmp	r2, r3
 800d95c:	f040 80ce 	bne.w	800dafc <_strtod_l+0xb2c>
 800d960:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d964:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d968:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d96c:	ec4b ab10 	vmov	d0, sl, fp
 800d970:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d974:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d978:	f002 f8c0 	bl	800fafc <__ulp>
 800d97c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d980:	ec53 2b10 	vmov	r2, r3, d0
 800d984:	f7f2 fe50 	bl	8000628 <__aeabi_dmul>
 800d988:	4652      	mov	r2, sl
 800d98a:	465b      	mov	r3, fp
 800d98c:	f7f2 fc96 	bl	80002bc <__adddf3>
 800d990:	460b      	mov	r3, r1
 800d992:	4952      	ldr	r1, [pc, #328]	; (800dadc <_strtod_l+0xb0c>)
 800d994:	4a56      	ldr	r2, [pc, #344]	; (800daf0 <_strtod_l+0xb20>)
 800d996:	4019      	ands	r1, r3
 800d998:	4291      	cmp	r1, r2
 800d99a:	4682      	mov	sl, r0
 800d99c:	d95b      	bls.n	800da56 <_strtod_l+0xa86>
 800d99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d103      	bne.n	800d9b0 <_strtod_l+0x9e0>
 800d9a8:	9b08      	ldr	r3, [sp, #32]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	f43f ad2e 	beq.w	800d40c <_strtod_l+0x43c>
 800d9b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800dae0 <_strtod_l+0xb10>
 800d9b4:	f04f 3aff 	mov.w	sl, #4294967295
 800d9b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d9ba:	4648      	mov	r0, r9
 800d9bc:	f001 fe06 	bl	800f5cc <_Bfree>
 800d9c0:	9905      	ldr	r1, [sp, #20]
 800d9c2:	4648      	mov	r0, r9
 800d9c4:	f001 fe02 	bl	800f5cc <_Bfree>
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	f001 fdfe 	bl	800f5cc <_Bfree>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4648      	mov	r0, r9
 800d9d4:	f001 fdfa 	bl	800f5cc <_Bfree>
 800d9d8:	e619      	b.n	800d60e <_strtod_l+0x63e>
 800d9da:	f1ba 0f00 	cmp.w	sl, #0
 800d9de:	d11a      	bne.n	800da16 <_strtod_l+0xa46>
 800d9e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9e4:	b9eb      	cbnz	r3, 800da22 <_strtod_l+0xa52>
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	4b3f      	ldr	r3, [pc, #252]	; (800dae8 <_strtod_l+0xb18>)
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f3 f88d 	bl	8000b0c <__aeabi_dcmplt>
 800d9f2:	b9c8      	cbnz	r0, 800da28 <_strtod_l+0xa58>
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4b3e      	ldr	r3, [pc, #248]	; (800daf4 <_strtod_l+0xb24>)
 800d9fc:	f7f2 fe14 	bl	8000628 <__aeabi_dmul>
 800da00:	4606      	mov	r6, r0
 800da02:	460f      	mov	r7, r1
 800da04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800da08:	9618      	str	r6, [sp, #96]	; 0x60
 800da0a:	9319      	str	r3, [sp, #100]	; 0x64
 800da0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800da10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800da14:	e79c      	b.n	800d950 <_strtod_l+0x980>
 800da16:	f1ba 0f01 	cmp.w	sl, #1
 800da1a:	d102      	bne.n	800da22 <_strtod_l+0xa52>
 800da1c:	2d00      	cmp	r5, #0
 800da1e:	f43f ad8e 	beq.w	800d53e <_strtod_l+0x56e>
 800da22:	2200      	movs	r2, #0
 800da24:	4b34      	ldr	r3, [pc, #208]	; (800daf8 <_strtod_l+0xb28>)
 800da26:	e78f      	b.n	800d948 <_strtod_l+0x978>
 800da28:	2600      	movs	r6, #0
 800da2a:	4f32      	ldr	r7, [pc, #200]	; (800daf4 <_strtod_l+0xb24>)
 800da2c:	e7ea      	b.n	800da04 <_strtod_l+0xa34>
 800da2e:	4b31      	ldr	r3, [pc, #196]	; (800daf4 <_strtod_l+0xb24>)
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	2200      	movs	r2, #0
 800da36:	f7f2 fdf7 	bl	8000628 <__aeabi_dmul>
 800da3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	b933      	cbnz	r3, 800da50 <_strtod_l+0xa80>
 800da42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da46:	9010      	str	r0, [sp, #64]	; 0x40
 800da48:	9311      	str	r3, [sp, #68]	; 0x44
 800da4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800da4e:	e7df      	b.n	800da10 <_strtod_l+0xa40>
 800da50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800da54:	e7f9      	b.n	800da4a <_strtod_l+0xa7a>
 800da56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1ab      	bne.n	800d9b8 <_strtod_l+0x9e8>
 800da60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da64:	0d1b      	lsrs	r3, r3, #20
 800da66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da68:	051b      	lsls	r3, r3, #20
 800da6a:	429a      	cmp	r2, r3
 800da6c:	465d      	mov	r5, fp
 800da6e:	d1a3      	bne.n	800d9b8 <_strtod_l+0x9e8>
 800da70:	4639      	mov	r1, r7
 800da72:	4630      	mov	r0, r6
 800da74:	f7f3 f888 	bl	8000b88 <__aeabi_d2iz>
 800da78:	f7f2 fd6c 	bl	8000554 <__aeabi_i2d>
 800da7c:	460b      	mov	r3, r1
 800da7e:	4602      	mov	r2, r0
 800da80:	4639      	mov	r1, r7
 800da82:	4630      	mov	r0, r6
 800da84:	f7f2 fc18 	bl	80002b8 <__aeabi_dsub>
 800da88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da8a:	4606      	mov	r6, r0
 800da8c:	460f      	mov	r7, r1
 800da8e:	b933      	cbnz	r3, 800da9e <_strtod_l+0xace>
 800da90:	f1ba 0f00 	cmp.w	sl, #0
 800da94:	d103      	bne.n	800da9e <_strtod_l+0xace>
 800da96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800da9a:	2d00      	cmp	r5, #0
 800da9c:	d06d      	beq.n	800db7a <_strtod_l+0xbaa>
 800da9e:	a30a      	add	r3, pc, #40	; (adr r3, 800dac8 <_strtod_l+0xaf8>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f3 f830 	bl	8000b0c <__aeabi_dcmplt>
 800daac:	2800      	cmp	r0, #0
 800daae:	f47f acb8 	bne.w	800d422 <_strtod_l+0x452>
 800dab2:	a307      	add	r3, pc, #28	; (adr r3, 800dad0 <_strtod_l+0xb00>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f3 f844 	bl	8000b48 <__aeabi_dcmpgt>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f43f af79 	beq.w	800d9b8 <_strtod_l+0x9e8>
 800dac6:	e4ac      	b.n	800d422 <_strtod_l+0x452>
 800dac8:	94a03595 	.word	0x94a03595
 800dacc:	3fdfffff 	.word	0x3fdfffff
 800dad0:	35afe535 	.word	0x35afe535
 800dad4:	3fe00000 	.word	0x3fe00000
 800dad8:	000fffff 	.word	0x000fffff
 800dadc:	7ff00000 	.word	0x7ff00000
 800dae0:	7fefffff 	.word	0x7fefffff
 800dae4:	39500000 	.word	0x39500000
 800dae8:	3ff00000 	.word	0x3ff00000
 800daec:	7fe00000 	.word	0x7fe00000
 800daf0:	7c9fffff 	.word	0x7c9fffff
 800daf4:	3fe00000 	.word	0x3fe00000
 800daf8:	bff00000 	.word	0xbff00000
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	b333      	cbz	r3, 800db4e <_strtod_l+0xb7e>
 800db00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db06:	d822      	bhi.n	800db4e <_strtod_l+0xb7e>
 800db08:	a327      	add	r3, pc, #156	; (adr r3, 800dba8 <_strtod_l+0xbd8>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	4630      	mov	r0, r6
 800db10:	4639      	mov	r1, r7
 800db12:	f7f3 f805 	bl	8000b20 <__aeabi_dcmple>
 800db16:	b1a0      	cbz	r0, 800db42 <_strtod_l+0xb72>
 800db18:	4639      	mov	r1, r7
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7f3 f85c 	bl	8000bd8 <__aeabi_d2uiz>
 800db20:	2800      	cmp	r0, #0
 800db22:	bf08      	it	eq
 800db24:	2001      	moveq	r0, #1
 800db26:	f7f2 fd05 	bl	8000534 <__aeabi_ui2d>
 800db2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db2c:	4606      	mov	r6, r0
 800db2e:	460f      	mov	r7, r1
 800db30:	bb03      	cbnz	r3, 800db74 <_strtod_l+0xba4>
 800db32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db36:	9012      	str	r0, [sp, #72]	; 0x48
 800db38:	9313      	str	r3, [sp, #76]	; 0x4c
 800db3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800db3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800db42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800db4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800db52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800db56:	f001 ffd1 	bl	800fafc <__ulp>
 800db5a:	4650      	mov	r0, sl
 800db5c:	ec53 2b10 	vmov	r2, r3, d0
 800db60:	4659      	mov	r1, fp
 800db62:	f7f2 fd61 	bl	8000628 <__aeabi_dmul>
 800db66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db6a:	f7f2 fba7 	bl	80002bc <__adddf3>
 800db6e:	4682      	mov	sl, r0
 800db70:	468b      	mov	fp, r1
 800db72:	e772      	b.n	800da5a <_strtod_l+0xa8a>
 800db74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800db78:	e7df      	b.n	800db3a <_strtod_l+0xb6a>
 800db7a:	a30d      	add	r3, pc, #52	; (adr r3, 800dbb0 <_strtod_l+0xbe0>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 ffc4 	bl	8000b0c <__aeabi_dcmplt>
 800db84:	e79c      	b.n	800dac0 <_strtod_l+0xaf0>
 800db86:	2300      	movs	r3, #0
 800db88:	930d      	str	r3, [sp, #52]	; 0x34
 800db8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db8e:	6013      	str	r3, [r2, #0]
 800db90:	f7ff ba61 	b.w	800d056 <_strtod_l+0x86>
 800db94:	2b65      	cmp	r3, #101	; 0x65
 800db96:	f04f 0200 	mov.w	r2, #0
 800db9a:	f43f ab4e 	beq.w	800d23a <_strtod_l+0x26a>
 800db9e:	2101      	movs	r1, #1
 800dba0:	4614      	mov	r4, r2
 800dba2:	9104      	str	r1, [sp, #16]
 800dba4:	f7ff bacb 	b.w	800d13e <_strtod_l+0x16e>
 800dba8:	ffc00000 	.word	0xffc00000
 800dbac:	41dfffff 	.word	0x41dfffff
 800dbb0:	94a03595 	.word	0x94a03595
 800dbb4:	3fcfffff 	.word	0x3fcfffff

0800dbb8 <_strtod_r>:
 800dbb8:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <_strtod_r+0x18>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	b410      	push	{r4}
 800dbbe:	6a1b      	ldr	r3, [r3, #32]
 800dbc0:	4c04      	ldr	r4, [pc, #16]	; (800dbd4 <_strtod_r+0x1c>)
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bf08      	it	eq
 800dbc6:	4623      	moveq	r3, r4
 800dbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbcc:	f7ff ba00 	b.w	800cfd0 <_strtod_l>
 800dbd0:	20000014 	.word	0x20000014
 800dbd4:	20000078 	.word	0x20000078

0800dbd8 <strtod>:
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <strtod+0x20>)
 800dbda:	4a08      	ldr	r2, [pc, #32]	; (800dbfc <strtod+0x24>)
 800dbdc:	b410      	push	{r4}
 800dbde:	681c      	ldr	r4, [r3, #0]
 800dbe0:	6a23      	ldr	r3, [r4, #32]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	bf08      	it	eq
 800dbe6:	4613      	moveq	r3, r2
 800dbe8:	460a      	mov	r2, r1
 800dbea:	4601      	mov	r1, r0
 800dbec:	4620      	mov	r0, r4
 800dbee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbf2:	f7ff b9ed 	b.w	800cfd0 <_strtod_l>
 800dbf6:	bf00      	nop
 800dbf8:	20000014 	.word	0x20000014
 800dbfc:	20000078 	.word	0x20000078

0800dc00 <strtok>:
 800dc00:	4b13      	ldr	r3, [pc, #76]	; (800dc50 <strtok+0x50>)
 800dc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc06:	681d      	ldr	r5, [r3, #0]
 800dc08:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	460f      	mov	r7, r1
 800dc0e:	b9b4      	cbnz	r4, 800dc3e <strtok+0x3e>
 800dc10:	2050      	movs	r0, #80	; 0x50
 800dc12:	f001 fc8d 	bl	800f530 <malloc>
 800dc16:	65a8      	str	r0, [r5, #88]	; 0x58
 800dc18:	e9c0 4400 	strd	r4, r4, [r0]
 800dc1c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dc20:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dc24:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800dc28:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800dc2c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800dc30:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800dc34:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800dc38:	6184      	str	r4, [r0, #24]
 800dc3a:	7704      	strb	r4, [r0, #28]
 800dc3c:	6244      	str	r4, [r0, #36]	; 0x24
 800dc3e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800dc40:	4639      	mov	r1, r7
 800dc42:	4630      	mov	r0, r6
 800dc44:	2301      	movs	r3, #1
 800dc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4a:	f000 b803 	b.w	800dc54 <__strtok_r>
 800dc4e:	bf00      	nop
 800dc50:	20000014 	.word	0x20000014

0800dc54 <__strtok_r>:
 800dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc56:	b918      	cbnz	r0, 800dc60 <__strtok_r+0xc>
 800dc58:	6810      	ldr	r0, [r2, #0]
 800dc5a:	b908      	cbnz	r0, 800dc60 <__strtok_r+0xc>
 800dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4604      	mov	r4, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dc68:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dc6c:	b91e      	cbnz	r6, 800dc76 <__strtok_r+0x22>
 800dc6e:	b96d      	cbnz	r5, 800dc8c <__strtok_r+0x38>
 800dc70:	6015      	str	r5, [r2, #0]
 800dc72:	4628      	mov	r0, r5
 800dc74:	e7f2      	b.n	800dc5c <__strtok_r+0x8>
 800dc76:	42b5      	cmp	r5, r6
 800dc78:	d1f6      	bne.n	800dc68 <__strtok_r+0x14>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1ef      	bne.n	800dc5e <__strtok_r+0xa>
 800dc7e:	6014      	str	r4, [r2, #0]
 800dc80:	7003      	strb	r3, [r0, #0]
 800dc82:	e7eb      	b.n	800dc5c <__strtok_r+0x8>
 800dc84:	462b      	mov	r3, r5
 800dc86:	e00d      	b.n	800dca4 <__strtok_r+0x50>
 800dc88:	b926      	cbnz	r6, 800dc94 <__strtok_r+0x40>
 800dc8a:	461c      	mov	r4, r3
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	460f      	mov	r7, r1
 800dc90:	f813 5b01 	ldrb.w	r5, [r3], #1
 800dc94:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dc98:	42b5      	cmp	r5, r6
 800dc9a:	d1f5      	bne.n	800dc88 <__strtok_r+0x34>
 800dc9c:	2d00      	cmp	r5, #0
 800dc9e:	d0f1      	beq.n	800dc84 <__strtok_r+0x30>
 800dca0:	2100      	movs	r1, #0
 800dca2:	7021      	strb	r1, [r4, #0]
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	e7d9      	b.n	800dc5c <__strtok_r+0x8>

0800dca8 <_strtol_l.isra.0>:
 800dca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcac:	4680      	mov	r8, r0
 800dcae:	4689      	mov	r9, r1
 800dcb0:	4692      	mov	sl, r2
 800dcb2:	461e      	mov	r6, r3
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	463d      	mov	r5, r7
 800dcb8:	9808      	ldr	r0, [sp, #32]
 800dcba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcbe:	f001 fb9f 	bl	800f400 <__locale_ctype_ptr_l>
 800dcc2:	4420      	add	r0, r4
 800dcc4:	7843      	ldrb	r3, [r0, #1]
 800dcc6:	f013 0308 	ands.w	r3, r3, #8
 800dcca:	d132      	bne.n	800dd32 <_strtol_l.isra.0+0x8a>
 800dccc:	2c2d      	cmp	r4, #45	; 0x2d
 800dcce:	d132      	bne.n	800dd36 <_strtol_l.isra.0+0x8e>
 800dcd0:	787c      	ldrb	r4, [r7, #1]
 800dcd2:	1cbd      	adds	r5, r7, #2
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	2e00      	cmp	r6, #0
 800dcd8:	d05d      	beq.n	800dd96 <_strtol_l.isra.0+0xee>
 800dcda:	2e10      	cmp	r6, #16
 800dcdc:	d109      	bne.n	800dcf2 <_strtol_l.isra.0+0x4a>
 800dcde:	2c30      	cmp	r4, #48	; 0x30
 800dce0:	d107      	bne.n	800dcf2 <_strtol_l.isra.0+0x4a>
 800dce2:	782b      	ldrb	r3, [r5, #0]
 800dce4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dce8:	2b58      	cmp	r3, #88	; 0x58
 800dcea:	d14f      	bne.n	800dd8c <_strtol_l.isra.0+0xe4>
 800dcec:	786c      	ldrb	r4, [r5, #1]
 800dcee:	2610      	movs	r6, #16
 800dcf0:	3502      	adds	r5, #2
 800dcf2:	2a00      	cmp	r2, #0
 800dcf4:	bf14      	ite	ne
 800dcf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dcfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dcfe:	2700      	movs	r7, #0
 800dd00:	fbb1 fcf6 	udiv	ip, r1, r6
 800dd04:	4638      	mov	r0, r7
 800dd06:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dd0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dd0e:	2b09      	cmp	r3, #9
 800dd10:	d817      	bhi.n	800dd42 <_strtol_l.isra.0+0x9a>
 800dd12:	461c      	mov	r4, r3
 800dd14:	42a6      	cmp	r6, r4
 800dd16:	dd23      	ble.n	800dd60 <_strtol_l.isra.0+0xb8>
 800dd18:	1c7b      	adds	r3, r7, #1
 800dd1a:	d007      	beq.n	800dd2c <_strtol_l.isra.0+0x84>
 800dd1c:	4584      	cmp	ip, r0
 800dd1e:	d31c      	bcc.n	800dd5a <_strtol_l.isra.0+0xb2>
 800dd20:	d101      	bne.n	800dd26 <_strtol_l.isra.0+0x7e>
 800dd22:	45a6      	cmp	lr, r4
 800dd24:	db19      	blt.n	800dd5a <_strtol_l.isra.0+0xb2>
 800dd26:	fb00 4006 	mla	r0, r0, r6, r4
 800dd2a:	2701      	movs	r7, #1
 800dd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd30:	e7eb      	b.n	800dd0a <_strtol_l.isra.0+0x62>
 800dd32:	462f      	mov	r7, r5
 800dd34:	e7bf      	b.n	800dcb6 <_strtol_l.isra.0+0xe>
 800dd36:	2c2b      	cmp	r4, #43	; 0x2b
 800dd38:	bf04      	itt	eq
 800dd3a:	1cbd      	addeq	r5, r7, #2
 800dd3c:	787c      	ldrbeq	r4, [r7, #1]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	e7c9      	b.n	800dcd6 <_strtol_l.isra.0+0x2e>
 800dd42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dd46:	2b19      	cmp	r3, #25
 800dd48:	d801      	bhi.n	800dd4e <_strtol_l.isra.0+0xa6>
 800dd4a:	3c37      	subs	r4, #55	; 0x37
 800dd4c:	e7e2      	b.n	800dd14 <_strtol_l.isra.0+0x6c>
 800dd4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dd52:	2b19      	cmp	r3, #25
 800dd54:	d804      	bhi.n	800dd60 <_strtol_l.isra.0+0xb8>
 800dd56:	3c57      	subs	r4, #87	; 0x57
 800dd58:	e7dc      	b.n	800dd14 <_strtol_l.isra.0+0x6c>
 800dd5a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd5e:	e7e5      	b.n	800dd2c <_strtol_l.isra.0+0x84>
 800dd60:	1c7b      	adds	r3, r7, #1
 800dd62:	d108      	bne.n	800dd76 <_strtol_l.isra.0+0xce>
 800dd64:	2322      	movs	r3, #34	; 0x22
 800dd66:	f8c8 3000 	str.w	r3, [r8]
 800dd6a:	4608      	mov	r0, r1
 800dd6c:	f1ba 0f00 	cmp.w	sl, #0
 800dd70:	d107      	bne.n	800dd82 <_strtol_l.isra.0+0xda>
 800dd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd76:	b102      	cbz	r2, 800dd7a <_strtol_l.isra.0+0xd2>
 800dd78:	4240      	negs	r0, r0
 800dd7a:	f1ba 0f00 	cmp.w	sl, #0
 800dd7e:	d0f8      	beq.n	800dd72 <_strtol_l.isra.0+0xca>
 800dd80:	b10f      	cbz	r7, 800dd86 <_strtol_l.isra.0+0xde>
 800dd82:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd86:	f8ca 9000 	str.w	r9, [sl]
 800dd8a:	e7f2      	b.n	800dd72 <_strtol_l.isra.0+0xca>
 800dd8c:	2430      	movs	r4, #48	; 0x30
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	d1af      	bne.n	800dcf2 <_strtol_l.isra.0+0x4a>
 800dd92:	2608      	movs	r6, #8
 800dd94:	e7ad      	b.n	800dcf2 <_strtol_l.isra.0+0x4a>
 800dd96:	2c30      	cmp	r4, #48	; 0x30
 800dd98:	d0a3      	beq.n	800dce2 <_strtol_l.isra.0+0x3a>
 800dd9a:	260a      	movs	r6, #10
 800dd9c:	e7a9      	b.n	800dcf2 <_strtol_l.isra.0+0x4a>
	...

0800dda0 <_strtol_r>:
 800dda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dda2:	4c06      	ldr	r4, [pc, #24]	; (800ddbc <_strtol_r+0x1c>)
 800dda4:	4d06      	ldr	r5, [pc, #24]	; (800ddc0 <_strtol_r+0x20>)
 800dda6:	6824      	ldr	r4, [r4, #0]
 800dda8:	6a24      	ldr	r4, [r4, #32]
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	bf08      	it	eq
 800ddae:	462c      	moveq	r4, r5
 800ddb0:	9400      	str	r4, [sp, #0]
 800ddb2:	f7ff ff79 	bl	800dca8 <_strtol_l.isra.0>
 800ddb6:	b003      	add	sp, #12
 800ddb8:	bd30      	pop	{r4, r5, pc}
 800ddba:	bf00      	nop
 800ddbc:	20000014 	.word	0x20000014
 800ddc0:	20000078 	.word	0x20000078

0800ddc4 <strtol>:
 800ddc4:	4b08      	ldr	r3, [pc, #32]	; (800dde8 <strtol+0x24>)
 800ddc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc8:	681c      	ldr	r4, [r3, #0]
 800ddca:	4d08      	ldr	r5, [pc, #32]	; (800ddec <strtol+0x28>)
 800ddcc:	6a23      	ldr	r3, [r4, #32]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bf08      	it	eq
 800ddd2:	462b      	moveq	r3, r5
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	460a      	mov	r2, r1
 800ddda:	4601      	mov	r1, r0
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7ff ff63 	bl	800dca8 <_strtol_l.isra.0>
 800dde2:	b003      	add	sp, #12
 800dde4:	bd30      	pop	{r4, r5, pc}
 800dde6:	bf00      	nop
 800dde8:	20000014 	.word	0x20000014
 800ddec:	20000078 	.word	0x20000078

0800ddf0 <_write_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4c07      	ldr	r4, [pc, #28]	; (800de10 <_write_r+0x20>)
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	6022      	str	r2, [r4, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f6 ff37 	bl	8004c72 <_write>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_write_r+0x1e>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_write_r+0x1e>
 800de0c:	602b      	str	r3, [r5, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20002740 	.word	0x20002740

0800de14 <_close_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4c06      	ldr	r4, [pc, #24]	; (800de30 <_close_r+0x1c>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4605      	mov	r5, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	f7f6 ff43 	bl	8004caa <_close>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_close_r+0x1a>
 800de28:	6823      	ldr	r3, [r4, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_close_r+0x1a>
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20002740 	.word	0x20002740

0800de34 <quorem>:
 800de34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	6903      	ldr	r3, [r0, #16]
 800de3a:	690c      	ldr	r4, [r1, #16]
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	4680      	mov	r8, r0
 800de40:	f2c0 8082 	blt.w	800df48 <quorem+0x114>
 800de44:	3c01      	subs	r4, #1
 800de46:	f101 0714 	add.w	r7, r1, #20
 800de4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800de4e:	f100 0614 	add.w	r6, r0, #20
 800de52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800de56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800de5a:	eb06 030c 	add.w	r3, r6, ip
 800de5e:	3501      	adds	r5, #1
 800de60:	eb07 090c 	add.w	r9, r7, ip
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	fbb0 f5f5 	udiv	r5, r0, r5
 800de6a:	b395      	cbz	r5, 800ded2 <quorem+0x9e>
 800de6c:	f04f 0a00 	mov.w	sl, #0
 800de70:	4638      	mov	r0, r7
 800de72:	46b6      	mov	lr, r6
 800de74:	46d3      	mov	fp, sl
 800de76:	f850 2b04 	ldr.w	r2, [r0], #4
 800de7a:	b293      	uxth	r3, r2
 800de7c:	fb05 a303 	mla	r3, r5, r3, sl
 800de80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de84:	b29b      	uxth	r3, r3
 800de86:	ebab 0303 	sub.w	r3, fp, r3
 800de8a:	0c12      	lsrs	r2, r2, #16
 800de8c:	f8de b000 	ldr.w	fp, [lr]
 800de90:	fb05 a202 	mla	r2, r5, r2, sl
 800de94:	fa13 f38b 	uxtah	r3, r3, fp
 800de98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800de9c:	fa1f fb82 	uxth.w	fp, r2
 800dea0:	f8de 2000 	ldr.w	r2, [lr]
 800dea4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800deac:	b29b      	uxth	r3, r3
 800deae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deb2:	4581      	cmp	r9, r0
 800deb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800deb8:	f84e 3b04 	str.w	r3, [lr], #4
 800debc:	d2db      	bcs.n	800de76 <quorem+0x42>
 800debe:	f856 300c 	ldr.w	r3, [r6, ip]
 800dec2:	b933      	cbnz	r3, 800ded2 <quorem+0x9e>
 800dec4:	9b01      	ldr	r3, [sp, #4]
 800dec6:	3b04      	subs	r3, #4
 800dec8:	429e      	cmp	r6, r3
 800deca:	461a      	mov	r2, r3
 800decc:	d330      	bcc.n	800df30 <quorem+0xfc>
 800dece:	f8c8 4010 	str.w	r4, [r8, #16]
 800ded2:	4640      	mov	r0, r8
 800ded4:	f001 fd9a 	bl	800fa0c <__mcmp>
 800ded8:	2800      	cmp	r0, #0
 800deda:	db25      	blt.n	800df28 <quorem+0xf4>
 800dedc:	3501      	adds	r5, #1
 800dede:	4630      	mov	r0, r6
 800dee0:	f04f 0c00 	mov.w	ip, #0
 800dee4:	f857 2b04 	ldr.w	r2, [r7], #4
 800dee8:	f8d0 e000 	ldr.w	lr, [r0]
 800deec:	b293      	uxth	r3, r2
 800deee:	ebac 0303 	sub.w	r3, ip, r3
 800def2:	0c12      	lsrs	r2, r2, #16
 800def4:	fa13 f38e 	uxtah	r3, r3, lr
 800def8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800defc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df00:	b29b      	uxth	r3, r3
 800df02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df06:	45b9      	cmp	r9, r7
 800df08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800df0c:	f840 3b04 	str.w	r3, [r0], #4
 800df10:	d2e8      	bcs.n	800dee4 <quorem+0xb0>
 800df12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800df16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800df1a:	b92a      	cbnz	r2, 800df28 <quorem+0xf4>
 800df1c:	3b04      	subs	r3, #4
 800df1e:	429e      	cmp	r6, r3
 800df20:	461a      	mov	r2, r3
 800df22:	d30b      	bcc.n	800df3c <quorem+0x108>
 800df24:	f8c8 4010 	str.w	r4, [r8, #16]
 800df28:	4628      	mov	r0, r5
 800df2a:	b003      	add	sp, #12
 800df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df30:	6812      	ldr	r2, [r2, #0]
 800df32:	3b04      	subs	r3, #4
 800df34:	2a00      	cmp	r2, #0
 800df36:	d1ca      	bne.n	800dece <quorem+0x9a>
 800df38:	3c01      	subs	r4, #1
 800df3a:	e7c5      	b.n	800dec8 <quorem+0x94>
 800df3c:	6812      	ldr	r2, [r2, #0]
 800df3e:	3b04      	subs	r3, #4
 800df40:	2a00      	cmp	r2, #0
 800df42:	d1ef      	bne.n	800df24 <quorem+0xf0>
 800df44:	3c01      	subs	r4, #1
 800df46:	e7ea      	b.n	800df1e <quorem+0xea>
 800df48:	2000      	movs	r0, #0
 800df4a:	e7ee      	b.n	800df2a <quorem+0xf6>
 800df4c:	0000      	movs	r0, r0
	...

0800df50 <_dtoa_r>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	ec57 6b10 	vmov	r6, r7, d0
 800df58:	b097      	sub	sp, #92	; 0x5c
 800df5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df5c:	9106      	str	r1, [sp, #24]
 800df5e:	4604      	mov	r4, r0
 800df60:	920b      	str	r2, [sp, #44]	; 0x2c
 800df62:	9312      	str	r3, [sp, #72]	; 0x48
 800df64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800df68:	e9cd 6700 	strd	r6, r7, [sp]
 800df6c:	b93d      	cbnz	r5, 800df7e <_dtoa_r+0x2e>
 800df6e:	2010      	movs	r0, #16
 800df70:	f001 fade 	bl	800f530 <malloc>
 800df74:	6260      	str	r0, [r4, #36]	; 0x24
 800df76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df7a:	6005      	str	r5, [r0, #0]
 800df7c:	60c5      	str	r5, [r0, #12]
 800df7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df80:	6819      	ldr	r1, [r3, #0]
 800df82:	b151      	cbz	r1, 800df9a <_dtoa_r+0x4a>
 800df84:	685a      	ldr	r2, [r3, #4]
 800df86:	604a      	str	r2, [r1, #4]
 800df88:	2301      	movs	r3, #1
 800df8a:	4093      	lsls	r3, r2
 800df8c:	608b      	str	r3, [r1, #8]
 800df8e:	4620      	mov	r0, r4
 800df90:	f001 fb1c 	bl	800f5cc <_Bfree>
 800df94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	1e3b      	subs	r3, r7, #0
 800df9c:	bfbb      	ittet	lt
 800df9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dfa2:	9301      	strlt	r3, [sp, #4]
 800dfa4:	2300      	movge	r3, #0
 800dfa6:	2201      	movlt	r2, #1
 800dfa8:	bfac      	ite	ge
 800dfaa:	f8c8 3000 	strge.w	r3, [r8]
 800dfae:	f8c8 2000 	strlt.w	r2, [r8]
 800dfb2:	4baf      	ldr	r3, [pc, #700]	; (800e270 <_dtoa_r+0x320>)
 800dfb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dfb8:	ea33 0308 	bics.w	r3, r3, r8
 800dfbc:	d114      	bne.n	800dfe8 <_dtoa_r+0x98>
 800dfbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfc0:	f242 730f 	movw	r3, #9999	; 0x270f
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	b923      	cbnz	r3, 800dfd4 <_dtoa_r+0x84>
 800dfca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f000 8542 	beq.w	800ea58 <_dtoa_r+0xb08>
 800dfd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfd6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e284 <_dtoa_r+0x334>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8544 	beq.w	800ea68 <_dtoa_r+0xb18>
 800dfe0:	f10b 0303 	add.w	r3, fp, #3
 800dfe4:	f000 bd3e 	b.w	800ea64 <_dtoa_r+0xb14>
 800dfe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfec:	2200      	movs	r2, #0
 800dfee:	2300      	movs	r3, #0
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fd80 	bl	8000af8 <__aeabi_dcmpeq>
 800dff8:	4681      	mov	r9, r0
 800dffa:	b168      	cbz	r0, 800e018 <_dtoa_r+0xc8>
 800dffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dffe:	2301      	movs	r3, #1
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 8524 	beq.w	800ea52 <_dtoa_r+0xb02>
 800e00a:	4b9a      	ldr	r3, [pc, #616]	; (800e274 <_dtoa_r+0x324>)
 800e00c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e00e:	f103 3bff 	add.w	fp, r3, #4294967295
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	f000 bd28 	b.w	800ea68 <_dtoa_r+0xb18>
 800e018:	aa14      	add	r2, sp, #80	; 0x50
 800e01a:	a915      	add	r1, sp, #84	; 0x54
 800e01c:	ec47 6b10 	vmov	d0, r6, r7
 800e020:	4620      	mov	r0, r4
 800e022:	f001 fde1 	bl	800fbe8 <__d2b>
 800e026:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e02a:	9004      	str	r0, [sp, #16]
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	d07c      	beq.n	800e12a <_dtoa_r+0x1da>
 800e030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e034:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e038:	46b2      	mov	sl, r6
 800e03a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e03e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e042:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e046:	2200      	movs	r2, #0
 800e048:	4b8b      	ldr	r3, [pc, #556]	; (800e278 <_dtoa_r+0x328>)
 800e04a:	4650      	mov	r0, sl
 800e04c:	4659      	mov	r1, fp
 800e04e:	f7f2 f933 	bl	80002b8 <__aeabi_dsub>
 800e052:	a381      	add	r3, pc, #516	; (adr r3, 800e258 <_dtoa_r+0x308>)
 800e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e058:	f7f2 fae6 	bl	8000628 <__aeabi_dmul>
 800e05c:	a380      	add	r3, pc, #512	; (adr r3, 800e260 <_dtoa_r+0x310>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 f92b 	bl	80002bc <__adddf3>
 800e066:	4606      	mov	r6, r0
 800e068:	4628      	mov	r0, r5
 800e06a:	460f      	mov	r7, r1
 800e06c:	f7f2 fa72 	bl	8000554 <__aeabi_i2d>
 800e070:	a37d      	add	r3, pc, #500	; (adr r3, 800e268 <_dtoa_r+0x318>)
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	f7f2 fad7 	bl	8000628 <__aeabi_dmul>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4630      	mov	r0, r6
 800e080:	4639      	mov	r1, r7
 800e082:	f7f2 f91b 	bl	80002bc <__adddf3>
 800e086:	4606      	mov	r6, r0
 800e088:	460f      	mov	r7, r1
 800e08a:	f7f2 fd7d 	bl	8000b88 <__aeabi_d2iz>
 800e08e:	2200      	movs	r2, #0
 800e090:	4682      	mov	sl, r0
 800e092:	2300      	movs	r3, #0
 800e094:	4630      	mov	r0, r6
 800e096:	4639      	mov	r1, r7
 800e098:	f7f2 fd38 	bl	8000b0c <__aeabi_dcmplt>
 800e09c:	b148      	cbz	r0, 800e0b2 <_dtoa_r+0x162>
 800e09e:	4650      	mov	r0, sl
 800e0a0:	f7f2 fa58 	bl	8000554 <__aeabi_i2d>
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	f7f2 fd26 	bl	8000af8 <__aeabi_dcmpeq>
 800e0ac:	b908      	cbnz	r0, 800e0b2 <_dtoa_r+0x162>
 800e0ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0b2:	f1ba 0f16 	cmp.w	sl, #22
 800e0b6:	d859      	bhi.n	800e16c <_dtoa_r+0x21c>
 800e0b8:	4970      	ldr	r1, [pc, #448]	; (800e27c <_dtoa_r+0x32c>)
 800e0ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0c6:	f7f2 fd3f 	bl	8000b48 <__aeabi_dcmpgt>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d050      	beq.n	800e170 <_dtoa_r+0x220>
 800e0ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0d8:	1b5d      	subs	r5, r3, r5
 800e0da:	f1b5 0801 	subs.w	r8, r5, #1
 800e0de:	bf49      	itett	mi
 800e0e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800e0e4:	2300      	movpl	r3, #0
 800e0e6:	9305      	strmi	r3, [sp, #20]
 800e0e8:	f04f 0800 	movmi.w	r8, #0
 800e0ec:	bf58      	it	pl
 800e0ee:	9305      	strpl	r3, [sp, #20]
 800e0f0:	f1ba 0f00 	cmp.w	sl, #0
 800e0f4:	db3e      	blt.n	800e174 <_dtoa_r+0x224>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	44d0      	add	r8, sl
 800e0fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e0fe:	9307      	str	r3, [sp, #28]
 800e100:	9b06      	ldr	r3, [sp, #24]
 800e102:	2b09      	cmp	r3, #9
 800e104:	f200 8090 	bhi.w	800e228 <_dtoa_r+0x2d8>
 800e108:	2b05      	cmp	r3, #5
 800e10a:	bfc4      	itt	gt
 800e10c:	3b04      	subgt	r3, #4
 800e10e:	9306      	strgt	r3, [sp, #24]
 800e110:	9b06      	ldr	r3, [sp, #24]
 800e112:	f1a3 0302 	sub.w	r3, r3, #2
 800e116:	bfcc      	ite	gt
 800e118:	2500      	movgt	r5, #0
 800e11a:	2501      	movle	r5, #1
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	f200 808f 	bhi.w	800e240 <_dtoa_r+0x2f0>
 800e122:	e8df f003 	tbb	[pc, r3]
 800e126:	7f7d      	.short	0x7f7d
 800e128:	7131      	.short	0x7131
 800e12a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e12e:	441d      	add	r5, r3
 800e130:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e134:	2820      	cmp	r0, #32
 800e136:	dd13      	ble.n	800e160 <_dtoa_r+0x210>
 800e138:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e13c:	9b00      	ldr	r3, [sp, #0]
 800e13e:	fa08 f800 	lsl.w	r8, r8, r0
 800e142:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e146:	fa23 f000 	lsr.w	r0, r3, r0
 800e14a:	ea48 0000 	orr.w	r0, r8, r0
 800e14e:	f7f2 f9f1 	bl	8000534 <__aeabi_ui2d>
 800e152:	2301      	movs	r3, #1
 800e154:	4682      	mov	sl, r0
 800e156:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e15a:	3d01      	subs	r5, #1
 800e15c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e15e:	e772      	b.n	800e046 <_dtoa_r+0xf6>
 800e160:	9b00      	ldr	r3, [sp, #0]
 800e162:	f1c0 0020 	rsb	r0, r0, #32
 800e166:	fa03 f000 	lsl.w	r0, r3, r0
 800e16a:	e7f0      	b.n	800e14e <_dtoa_r+0x1fe>
 800e16c:	2301      	movs	r3, #1
 800e16e:	e7b1      	b.n	800e0d4 <_dtoa_r+0x184>
 800e170:	900f      	str	r0, [sp, #60]	; 0x3c
 800e172:	e7b0      	b.n	800e0d6 <_dtoa_r+0x186>
 800e174:	9b05      	ldr	r3, [sp, #20]
 800e176:	eba3 030a 	sub.w	r3, r3, sl
 800e17a:	9305      	str	r3, [sp, #20]
 800e17c:	f1ca 0300 	rsb	r3, sl, #0
 800e180:	9307      	str	r3, [sp, #28]
 800e182:	2300      	movs	r3, #0
 800e184:	930e      	str	r3, [sp, #56]	; 0x38
 800e186:	e7bb      	b.n	800e100 <_dtoa_r+0x1b0>
 800e188:	2301      	movs	r3, #1
 800e18a:	930a      	str	r3, [sp, #40]	; 0x28
 800e18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dd59      	ble.n	800e246 <_dtoa_r+0x2f6>
 800e192:	9302      	str	r3, [sp, #8]
 800e194:	4699      	mov	r9, r3
 800e196:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e198:	2200      	movs	r2, #0
 800e19a:	6072      	str	r2, [r6, #4]
 800e19c:	2204      	movs	r2, #4
 800e19e:	f102 0014 	add.w	r0, r2, #20
 800e1a2:	4298      	cmp	r0, r3
 800e1a4:	6871      	ldr	r1, [r6, #4]
 800e1a6:	d953      	bls.n	800e250 <_dtoa_r+0x300>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f001 f9db 	bl	800f564 <_Balloc>
 800e1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1b0:	6030      	str	r0, [r6, #0]
 800e1b2:	f1b9 0f0e 	cmp.w	r9, #14
 800e1b6:	f8d3 b000 	ldr.w	fp, [r3]
 800e1ba:	f200 80e6 	bhi.w	800e38a <_dtoa_r+0x43a>
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	f000 80e3 	beq.w	800e38a <_dtoa_r+0x43a>
 800e1c4:	ed9d 7b00 	vldr	d7, [sp]
 800e1c8:	f1ba 0f00 	cmp.w	sl, #0
 800e1cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e1d0:	dd74      	ble.n	800e2bc <_dtoa_r+0x36c>
 800e1d2:	4a2a      	ldr	r2, [pc, #168]	; (800e27c <_dtoa_r+0x32c>)
 800e1d4:	f00a 030f 	and.w	r3, sl, #15
 800e1d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1dc:	ed93 7b00 	vldr	d7, [r3]
 800e1e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e1e4:	06f0      	lsls	r0, r6, #27
 800e1e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e1ea:	d565      	bpl.n	800e2b8 <_dtoa_r+0x368>
 800e1ec:	4b24      	ldr	r3, [pc, #144]	; (800e280 <_dtoa_r+0x330>)
 800e1ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e1f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1f6:	f7f2 fb41 	bl	800087c <__aeabi_ddiv>
 800e1fa:	e9cd 0100 	strd	r0, r1, [sp]
 800e1fe:	f006 060f 	and.w	r6, r6, #15
 800e202:	2503      	movs	r5, #3
 800e204:	4f1e      	ldr	r7, [pc, #120]	; (800e280 <_dtoa_r+0x330>)
 800e206:	e04c      	b.n	800e2a2 <_dtoa_r+0x352>
 800e208:	2301      	movs	r3, #1
 800e20a:	930a      	str	r3, [sp, #40]	; 0x28
 800e20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e20e:	4453      	add	r3, sl
 800e210:	f103 0901 	add.w	r9, r3, #1
 800e214:	9302      	str	r3, [sp, #8]
 800e216:	464b      	mov	r3, r9
 800e218:	2b01      	cmp	r3, #1
 800e21a:	bfb8      	it	lt
 800e21c:	2301      	movlt	r3, #1
 800e21e:	e7ba      	b.n	800e196 <_dtoa_r+0x246>
 800e220:	2300      	movs	r3, #0
 800e222:	e7b2      	b.n	800e18a <_dtoa_r+0x23a>
 800e224:	2300      	movs	r3, #0
 800e226:	e7f0      	b.n	800e20a <_dtoa_r+0x2ba>
 800e228:	2501      	movs	r5, #1
 800e22a:	2300      	movs	r3, #0
 800e22c:	9306      	str	r3, [sp, #24]
 800e22e:	950a      	str	r5, [sp, #40]	; 0x28
 800e230:	f04f 33ff 	mov.w	r3, #4294967295
 800e234:	9302      	str	r3, [sp, #8]
 800e236:	4699      	mov	r9, r3
 800e238:	2200      	movs	r2, #0
 800e23a:	2312      	movs	r3, #18
 800e23c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e23e:	e7aa      	b.n	800e196 <_dtoa_r+0x246>
 800e240:	2301      	movs	r3, #1
 800e242:	930a      	str	r3, [sp, #40]	; 0x28
 800e244:	e7f4      	b.n	800e230 <_dtoa_r+0x2e0>
 800e246:	2301      	movs	r3, #1
 800e248:	9302      	str	r3, [sp, #8]
 800e24a:	4699      	mov	r9, r3
 800e24c:	461a      	mov	r2, r3
 800e24e:	e7f5      	b.n	800e23c <_dtoa_r+0x2ec>
 800e250:	3101      	adds	r1, #1
 800e252:	6071      	str	r1, [r6, #4]
 800e254:	0052      	lsls	r2, r2, #1
 800e256:	e7a2      	b.n	800e19e <_dtoa_r+0x24e>
 800e258:	636f4361 	.word	0x636f4361
 800e25c:	3fd287a7 	.word	0x3fd287a7
 800e260:	8b60c8b3 	.word	0x8b60c8b3
 800e264:	3fc68a28 	.word	0x3fc68a28
 800e268:	509f79fb 	.word	0x509f79fb
 800e26c:	3fd34413 	.word	0x3fd34413
 800e270:	7ff00000 	.word	0x7ff00000
 800e274:	08012324 	.word	0x08012324
 800e278:	3ff80000 	.word	0x3ff80000
 800e27c:	08012228 	.word	0x08012228
 800e280:	08012200 	.word	0x08012200
 800e284:	08012189 	.word	0x08012189
 800e288:	07f1      	lsls	r1, r6, #31
 800e28a:	d508      	bpl.n	800e29e <_dtoa_r+0x34e>
 800e28c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e294:	f7f2 f9c8 	bl	8000628 <__aeabi_dmul>
 800e298:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e29c:	3501      	adds	r5, #1
 800e29e:	1076      	asrs	r6, r6, #1
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	2e00      	cmp	r6, #0
 800e2a4:	d1f0      	bne.n	800e288 <_dtoa_r+0x338>
 800e2a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e2aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2ae:	f7f2 fae5 	bl	800087c <__aeabi_ddiv>
 800e2b2:	e9cd 0100 	strd	r0, r1, [sp]
 800e2b6:	e01a      	b.n	800e2ee <_dtoa_r+0x39e>
 800e2b8:	2502      	movs	r5, #2
 800e2ba:	e7a3      	b.n	800e204 <_dtoa_r+0x2b4>
 800e2bc:	f000 80a0 	beq.w	800e400 <_dtoa_r+0x4b0>
 800e2c0:	f1ca 0600 	rsb	r6, sl, #0
 800e2c4:	4b9f      	ldr	r3, [pc, #636]	; (800e544 <_dtoa_r+0x5f4>)
 800e2c6:	4fa0      	ldr	r7, [pc, #640]	; (800e548 <_dtoa_r+0x5f8>)
 800e2c8:	f006 020f 	and.w	r2, r6, #15
 800e2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2d8:	f7f2 f9a6 	bl	8000628 <__aeabi_dmul>
 800e2dc:	e9cd 0100 	strd	r0, r1, [sp]
 800e2e0:	1136      	asrs	r6, r6, #4
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	2502      	movs	r5, #2
 800e2e6:	2e00      	cmp	r6, #0
 800e2e8:	d17f      	bne.n	800e3ea <_dtoa_r+0x49a>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1e1      	bne.n	800e2b2 <_dtoa_r+0x362>
 800e2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8087 	beq.w	800e404 <_dtoa_r+0x4b4>
 800e2f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4b93      	ldr	r3, [pc, #588]	; (800e54c <_dtoa_r+0x5fc>)
 800e2fe:	4630      	mov	r0, r6
 800e300:	4639      	mov	r1, r7
 800e302:	f7f2 fc03 	bl	8000b0c <__aeabi_dcmplt>
 800e306:	2800      	cmp	r0, #0
 800e308:	d07c      	beq.n	800e404 <_dtoa_r+0x4b4>
 800e30a:	f1b9 0f00 	cmp.w	r9, #0
 800e30e:	d079      	beq.n	800e404 <_dtoa_r+0x4b4>
 800e310:	9b02      	ldr	r3, [sp, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	dd35      	ble.n	800e382 <_dtoa_r+0x432>
 800e316:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e31a:	9308      	str	r3, [sp, #32]
 800e31c:	4639      	mov	r1, r7
 800e31e:	2200      	movs	r2, #0
 800e320:	4b8b      	ldr	r3, [pc, #556]	; (800e550 <_dtoa_r+0x600>)
 800e322:	4630      	mov	r0, r6
 800e324:	f7f2 f980 	bl	8000628 <__aeabi_dmul>
 800e328:	e9cd 0100 	strd	r0, r1, [sp]
 800e32c:	9f02      	ldr	r7, [sp, #8]
 800e32e:	3501      	adds	r5, #1
 800e330:	4628      	mov	r0, r5
 800e332:	f7f2 f90f 	bl	8000554 <__aeabi_i2d>
 800e336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e33a:	f7f2 f975 	bl	8000628 <__aeabi_dmul>
 800e33e:	2200      	movs	r2, #0
 800e340:	4b84      	ldr	r3, [pc, #528]	; (800e554 <_dtoa_r+0x604>)
 800e342:	f7f1 ffbb 	bl	80002bc <__adddf3>
 800e346:	4605      	mov	r5, r0
 800e348:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e34c:	2f00      	cmp	r7, #0
 800e34e:	d15d      	bne.n	800e40c <_dtoa_r+0x4bc>
 800e350:	2200      	movs	r2, #0
 800e352:	4b81      	ldr	r3, [pc, #516]	; (800e558 <_dtoa_r+0x608>)
 800e354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e358:	f7f1 ffae 	bl	80002b8 <__aeabi_dsub>
 800e35c:	462a      	mov	r2, r5
 800e35e:	4633      	mov	r3, r6
 800e360:	e9cd 0100 	strd	r0, r1, [sp]
 800e364:	f7f2 fbf0 	bl	8000b48 <__aeabi_dcmpgt>
 800e368:	2800      	cmp	r0, #0
 800e36a:	f040 8288 	bne.w	800e87e <_dtoa_r+0x92e>
 800e36e:	462a      	mov	r2, r5
 800e370:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e378:	f7f2 fbc8 	bl	8000b0c <__aeabi_dcmplt>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f040 827c 	bne.w	800e87a <_dtoa_r+0x92a>
 800e382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e386:	e9cd 2300 	strd	r2, r3, [sp]
 800e38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f2c0 8150 	blt.w	800e632 <_dtoa_r+0x6e2>
 800e392:	f1ba 0f0e 	cmp.w	sl, #14
 800e396:	f300 814c 	bgt.w	800e632 <_dtoa_r+0x6e2>
 800e39a:	4b6a      	ldr	r3, [pc, #424]	; (800e544 <_dtoa_r+0x5f4>)
 800e39c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e3a0:	ed93 7b00 	vldr	d7, [r3]
 800e3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3ac:	f280 80d8 	bge.w	800e560 <_dtoa_r+0x610>
 800e3b0:	f1b9 0f00 	cmp.w	r9, #0
 800e3b4:	f300 80d4 	bgt.w	800e560 <_dtoa_r+0x610>
 800e3b8:	f040 825e 	bne.w	800e878 <_dtoa_r+0x928>
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4b66      	ldr	r3, [pc, #408]	; (800e558 <_dtoa_r+0x608>)
 800e3c0:	ec51 0b17 	vmov	r0, r1, d7
 800e3c4:	f7f2 f930 	bl	8000628 <__aeabi_dmul>
 800e3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3cc:	f7f2 fbb2 	bl	8000b34 <__aeabi_dcmpge>
 800e3d0:	464f      	mov	r7, r9
 800e3d2:	464e      	mov	r6, r9
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	f040 8234 	bne.w	800e842 <_dtoa_r+0x8f2>
 800e3da:	2331      	movs	r3, #49	; 0x31
 800e3dc:	f10b 0501 	add.w	r5, fp, #1
 800e3e0:	f88b 3000 	strb.w	r3, [fp]
 800e3e4:	f10a 0a01 	add.w	sl, sl, #1
 800e3e8:	e22f      	b.n	800e84a <_dtoa_r+0x8fa>
 800e3ea:	07f2      	lsls	r2, r6, #31
 800e3ec:	d505      	bpl.n	800e3fa <_dtoa_r+0x4aa>
 800e3ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3f2:	f7f2 f919 	bl	8000628 <__aeabi_dmul>
 800e3f6:	3501      	adds	r5, #1
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	1076      	asrs	r6, r6, #1
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	e772      	b.n	800e2e6 <_dtoa_r+0x396>
 800e400:	2502      	movs	r5, #2
 800e402:	e774      	b.n	800e2ee <_dtoa_r+0x39e>
 800e404:	f8cd a020 	str.w	sl, [sp, #32]
 800e408:	464f      	mov	r7, r9
 800e40a:	e791      	b.n	800e330 <_dtoa_r+0x3e0>
 800e40c:	4b4d      	ldr	r3, [pc, #308]	; (800e544 <_dtoa_r+0x5f4>)
 800e40e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e412:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d047      	beq.n	800e4ac <_dtoa_r+0x55c>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	2000      	movs	r0, #0
 800e422:	494e      	ldr	r1, [pc, #312]	; (800e55c <_dtoa_r+0x60c>)
 800e424:	f7f2 fa2a 	bl	800087c <__aeabi_ddiv>
 800e428:	462a      	mov	r2, r5
 800e42a:	4633      	mov	r3, r6
 800e42c:	f7f1 ff44 	bl	80002b8 <__aeabi_dsub>
 800e430:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e434:	465d      	mov	r5, fp
 800e436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e43a:	f7f2 fba5 	bl	8000b88 <__aeabi_d2iz>
 800e43e:	4606      	mov	r6, r0
 800e440:	f7f2 f888 	bl	8000554 <__aeabi_i2d>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e44c:	f7f1 ff34 	bl	80002b8 <__aeabi_dsub>
 800e450:	3630      	adds	r6, #48	; 0x30
 800e452:	f805 6b01 	strb.w	r6, [r5], #1
 800e456:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e45a:	e9cd 0100 	strd	r0, r1, [sp]
 800e45e:	f7f2 fb55 	bl	8000b0c <__aeabi_dcmplt>
 800e462:	2800      	cmp	r0, #0
 800e464:	d163      	bne.n	800e52e <_dtoa_r+0x5de>
 800e466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e46a:	2000      	movs	r0, #0
 800e46c:	4937      	ldr	r1, [pc, #220]	; (800e54c <_dtoa_r+0x5fc>)
 800e46e:	f7f1 ff23 	bl	80002b8 <__aeabi_dsub>
 800e472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e476:	f7f2 fb49 	bl	8000b0c <__aeabi_dcmplt>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	f040 80b7 	bne.w	800e5ee <_dtoa_r+0x69e>
 800e480:	eba5 030b 	sub.w	r3, r5, fp
 800e484:	429f      	cmp	r7, r3
 800e486:	f77f af7c 	ble.w	800e382 <_dtoa_r+0x432>
 800e48a:	2200      	movs	r2, #0
 800e48c:	4b30      	ldr	r3, [pc, #192]	; (800e550 <_dtoa_r+0x600>)
 800e48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e492:	f7f2 f8c9 	bl	8000628 <__aeabi_dmul>
 800e496:	2200      	movs	r2, #0
 800e498:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e49c:	4b2c      	ldr	r3, [pc, #176]	; (800e550 <_dtoa_r+0x600>)
 800e49e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4a2:	f7f2 f8c1 	bl	8000628 <__aeabi_dmul>
 800e4a6:	e9cd 0100 	strd	r0, r1, [sp]
 800e4aa:	e7c4      	b.n	800e436 <_dtoa_r+0x4e6>
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	4633      	mov	r3, r6
 800e4b0:	f7f2 f8ba 	bl	8000628 <__aeabi_dmul>
 800e4b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e4b8:	eb0b 0507 	add.w	r5, fp, r7
 800e4bc:	465e      	mov	r6, fp
 800e4be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4c2:	f7f2 fb61 	bl	8000b88 <__aeabi_d2iz>
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	f7f2 f844 	bl	8000554 <__aeabi_i2d>
 800e4cc:	3730      	adds	r7, #48	; 0x30
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4d6:	f7f1 feef 	bl	80002b8 <__aeabi_dsub>
 800e4da:	f806 7b01 	strb.w	r7, [r6], #1
 800e4de:	42ae      	cmp	r6, r5
 800e4e0:	e9cd 0100 	strd	r0, r1, [sp]
 800e4e4:	f04f 0200 	mov.w	r2, #0
 800e4e8:	d126      	bne.n	800e538 <_dtoa_r+0x5e8>
 800e4ea:	4b1c      	ldr	r3, [pc, #112]	; (800e55c <_dtoa_r+0x60c>)
 800e4ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4f0:	f7f1 fee4 	bl	80002bc <__adddf3>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4fc:	f7f2 fb24 	bl	8000b48 <__aeabi_dcmpgt>
 800e500:	2800      	cmp	r0, #0
 800e502:	d174      	bne.n	800e5ee <_dtoa_r+0x69e>
 800e504:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e508:	2000      	movs	r0, #0
 800e50a:	4914      	ldr	r1, [pc, #80]	; (800e55c <_dtoa_r+0x60c>)
 800e50c:	f7f1 fed4 	bl	80002b8 <__aeabi_dsub>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e518:	f7f2 faf8 	bl	8000b0c <__aeabi_dcmplt>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f43f af30 	beq.w	800e382 <_dtoa_r+0x432>
 800e522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e526:	2b30      	cmp	r3, #48	; 0x30
 800e528:	f105 32ff 	add.w	r2, r5, #4294967295
 800e52c:	d002      	beq.n	800e534 <_dtoa_r+0x5e4>
 800e52e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e532:	e04a      	b.n	800e5ca <_dtoa_r+0x67a>
 800e534:	4615      	mov	r5, r2
 800e536:	e7f4      	b.n	800e522 <_dtoa_r+0x5d2>
 800e538:	4b05      	ldr	r3, [pc, #20]	; (800e550 <_dtoa_r+0x600>)
 800e53a:	f7f2 f875 	bl	8000628 <__aeabi_dmul>
 800e53e:	e9cd 0100 	strd	r0, r1, [sp]
 800e542:	e7bc      	b.n	800e4be <_dtoa_r+0x56e>
 800e544:	08012228 	.word	0x08012228
 800e548:	08012200 	.word	0x08012200
 800e54c:	3ff00000 	.word	0x3ff00000
 800e550:	40240000 	.word	0x40240000
 800e554:	401c0000 	.word	0x401c0000
 800e558:	40140000 	.word	0x40140000
 800e55c:	3fe00000 	.word	0x3fe00000
 800e560:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e564:	465d      	mov	r5, fp
 800e566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e56a:	4630      	mov	r0, r6
 800e56c:	4639      	mov	r1, r7
 800e56e:	f7f2 f985 	bl	800087c <__aeabi_ddiv>
 800e572:	f7f2 fb09 	bl	8000b88 <__aeabi_d2iz>
 800e576:	4680      	mov	r8, r0
 800e578:	f7f1 ffec 	bl	8000554 <__aeabi_i2d>
 800e57c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e580:	f7f2 f852 	bl	8000628 <__aeabi_dmul>
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	4630      	mov	r0, r6
 800e58a:	4639      	mov	r1, r7
 800e58c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e590:	f7f1 fe92 	bl	80002b8 <__aeabi_dsub>
 800e594:	f805 6b01 	strb.w	r6, [r5], #1
 800e598:	eba5 060b 	sub.w	r6, r5, fp
 800e59c:	45b1      	cmp	r9, r6
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	d139      	bne.n	800e618 <_dtoa_r+0x6c8>
 800e5a4:	f7f1 fe8a 	bl	80002bc <__adddf3>
 800e5a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	460f      	mov	r7, r1
 800e5b0:	f7f2 faca 	bl	8000b48 <__aeabi_dcmpgt>
 800e5b4:	b9c8      	cbnz	r0, 800e5ea <_dtoa_r+0x69a>
 800e5b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4639      	mov	r1, r7
 800e5be:	f7f2 fa9b 	bl	8000af8 <__aeabi_dcmpeq>
 800e5c2:	b110      	cbz	r0, 800e5ca <_dtoa_r+0x67a>
 800e5c4:	f018 0f01 	tst.w	r8, #1
 800e5c8:	d10f      	bne.n	800e5ea <_dtoa_r+0x69a>
 800e5ca:	9904      	ldr	r1, [sp, #16]
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f000 fffd 	bl	800f5cc <_Bfree>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5d6:	702b      	strb	r3, [r5, #0]
 800e5d8:	f10a 0301 	add.w	r3, sl, #1
 800e5dc:	6013      	str	r3, [r2, #0]
 800e5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 8241 	beq.w	800ea68 <_dtoa_r+0xb18>
 800e5e6:	601d      	str	r5, [r3, #0]
 800e5e8:	e23e      	b.n	800ea68 <_dtoa_r+0xb18>
 800e5ea:	f8cd a020 	str.w	sl, [sp, #32]
 800e5ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e5f2:	2a39      	cmp	r2, #57	; 0x39
 800e5f4:	f105 33ff 	add.w	r3, r5, #4294967295
 800e5f8:	d108      	bne.n	800e60c <_dtoa_r+0x6bc>
 800e5fa:	459b      	cmp	fp, r3
 800e5fc:	d10a      	bne.n	800e614 <_dtoa_r+0x6c4>
 800e5fe:	9b08      	ldr	r3, [sp, #32]
 800e600:	3301      	adds	r3, #1
 800e602:	9308      	str	r3, [sp, #32]
 800e604:	2330      	movs	r3, #48	; 0x30
 800e606:	f88b 3000 	strb.w	r3, [fp]
 800e60a:	465b      	mov	r3, fp
 800e60c:	781a      	ldrb	r2, [r3, #0]
 800e60e:	3201      	adds	r2, #1
 800e610:	701a      	strb	r2, [r3, #0]
 800e612:	e78c      	b.n	800e52e <_dtoa_r+0x5de>
 800e614:	461d      	mov	r5, r3
 800e616:	e7ea      	b.n	800e5ee <_dtoa_r+0x69e>
 800e618:	2200      	movs	r2, #0
 800e61a:	4b9b      	ldr	r3, [pc, #620]	; (800e888 <_dtoa_r+0x938>)
 800e61c:	f7f2 f804 	bl	8000628 <__aeabi_dmul>
 800e620:	2200      	movs	r2, #0
 800e622:	2300      	movs	r3, #0
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	f7f2 fa66 	bl	8000af8 <__aeabi_dcmpeq>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d09a      	beq.n	800e566 <_dtoa_r+0x616>
 800e630:	e7cb      	b.n	800e5ca <_dtoa_r+0x67a>
 800e632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e634:	2a00      	cmp	r2, #0
 800e636:	f000 808b 	beq.w	800e750 <_dtoa_r+0x800>
 800e63a:	9a06      	ldr	r2, [sp, #24]
 800e63c:	2a01      	cmp	r2, #1
 800e63e:	dc6e      	bgt.n	800e71e <_dtoa_r+0x7ce>
 800e640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e642:	2a00      	cmp	r2, #0
 800e644:	d067      	beq.n	800e716 <_dtoa_r+0x7c6>
 800e646:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e64a:	9f07      	ldr	r7, [sp, #28]
 800e64c:	9d05      	ldr	r5, [sp, #20]
 800e64e:	9a05      	ldr	r2, [sp, #20]
 800e650:	2101      	movs	r1, #1
 800e652:	441a      	add	r2, r3
 800e654:	4620      	mov	r0, r4
 800e656:	9205      	str	r2, [sp, #20]
 800e658:	4498      	add	r8, r3
 800e65a:	f001 f895 	bl	800f788 <__i2b>
 800e65e:	4606      	mov	r6, r0
 800e660:	2d00      	cmp	r5, #0
 800e662:	dd0c      	ble.n	800e67e <_dtoa_r+0x72e>
 800e664:	f1b8 0f00 	cmp.w	r8, #0
 800e668:	dd09      	ble.n	800e67e <_dtoa_r+0x72e>
 800e66a:	4545      	cmp	r5, r8
 800e66c:	9a05      	ldr	r2, [sp, #20]
 800e66e:	462b      	mov	r3, r5
 800e670:	bfa8      	it	ge
 800e672:	4643      	movge	r3, r8
 800e674:	1ad2      	subs	r2, r2, r3
 800e676:	9205      	str	r2, [sp, #20]
 800e678:	1aed      	subs	r5, r5, r3
 800e67a:	eba8 0803 	sub.w	r8, r8, r3
 800e67e:	9b07      	ldr	r3, [sp, #28]
 800e680:	b1eb      	cbz	r3, 800e6be <_dtoa_r+0x76e>
 800e682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e684:	2b00      	cmp	r3, #0
 800e686:	d067      	beq.n	800e758 <_dtoa_r+0x808>
 800e688:	b18f      	cbz	r7, 800e6ae <_dtoa_r+0x75e>
 800e68a:	4631      	mov	r1, r6
 800e68c:	463a      	mov	r2, r7
 800e68e:	4620      	mov	r0, r4
 800e690:	f001 f91a 	bl	800f8c8 <__pow5mult>
 800e694:	9a04      	ldr	r2, [sp, #16]
 800e696:	4601      	mov	r1, r0
 800e698:	4606      	mov	r6, r0
 800e69a:	4620      	mov	r0, r4
 800e69c:	f001 f87d 	bl	800f79a <__multiply>
 800e6a0:	9904      	ldr	r1, [sp, #16]
 800e6a2:	9008      	str	r0, [sp, #32]
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f000 ff91 	bl	800f5cc <_Bfree>
 800e6aa:	9b08      	ldr	r3, [sp, #32]
 800e6ac:	9304      	str	r3, [sp, #16]
 800e6ae:	9b07      	ldr	r3, [sp, #28]
 800e6b0:	1bda      	subs	r2, r3, r7
 800e6b2:	d004      	beq.n	800e6be <_dtoa_r+0x76e>
 800e6b4:	9904      	ldr	r1, [sp, #16]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f001 f906 	bl	800f8c8 <__pow5mult>
 800e6bc:	9004      	str	r0, [sp, #16]
 800e6be:	2101      	movs	r1, #1
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f001 f861 	bl	800f788 <__i2b>
 800e6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6c8:	4607      	mov	r7, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 81d0 	beq.w	800ea70 <_dtoa_r+0xb20>
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f001 f8f7 	bl	800f8c8 <__pow5mult>
 800e6da:	9b06      	ldr	r3, [sp, #24]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	4607      	mov	r7, r0
 800e6e0:	dc40      	bgt.n	800e764 <_dtoa_r+0x814>
 800e6e2:	9b00      	ldr	r3, [sp, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d139      	bne.n	800e75c <_dtoa_r+0x80c>
 800e6e8:	9b01      	ldr	r3, [sp, #4]
 800e6ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d136      	bne.n	800e760 <_dtoa_r+0x810>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6f8:	0d1b      	lsrs	r3, r3, #20
 800e6fa:	051b      	lsls	r3, r3, #20
 800e6fc:	b12b      	cbz	r3, 800e70a <_dtoa_r+0x7ba>
 800e6fe:	9b05      	ldr	r3, [sp, #20]
 800e700:	3301      	adds	r3, #1
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	f108 0801 	add.w	r8, r8, #1
 800e708:	2301      	movs	r3, #1
 800e70a:	9307      	str	r3, [sp, #28]
 800e70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d12a      	bne.n	800e768 <_dtoa_r+0x818>
 800e712:	2001      	movs	r0, #1
 800e714:	e030      	b.n	800e778 <_dtoa_r+0x828>
 800e716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e718:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e71c:	e795      	b.n	800e64a <_dtoa_r+0x6fa>
 800e71e:	9b07      	ldr	r3, [sp, #28]
 800e720:	f109 37ff 	add.w	r7, r9, #4294967295
 800e724:	42bb      	cmp	r3, r7
 800e726:	bfbf      	itttt	lt
 800e728:	9b07      	ldrlt	r3, [sp, #28]
 800e72a:	9707      	strlt	r7, [sp, #28]
 800e72c:	1afa      	sublt	r2, r7, r3
 800e72e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e730:	bfbb      	ittet	lt
 800e732:	189b      	addlt	r3, r3, r2
 800e734:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e736:	1bdf      	subge	r7, r3, r7
 800e738:	2700      	movlt	r7, #0
 800e73a:	f1b9 0f00 	cmp.w	r9, #0
 800e73e:	bfb5      	itete	lt
 800e740:	9b05      	ldrlt	r3, [sp, #20]
 800e742:	9d05      	ldrge	r5, [sp, #20]
 800e744:	eba3 0509 	sublt.w	r5, r3, r9
 800e748:	464b      	movge	r3, r9
 800e74a:	bfb8      	it	lt
 800e74c:	2300      	movlt	r3, #0
 800e74e:	e77e      	b.n	800e64e <_dtoa_r+0x6fe>
 800e750:	9f07      	ldr	r7, [sp, #28]
 800e752:	9d05      	ldr	r5, [sp, #20]
 800e754:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e756:	e783      	b.n	800e660 <_dtoa_r+0x710>
 800e758:	9a07      	ldr	r2, [sp, #28]
 800e75a:	e7ab      	b.n	800e6b4 <_dtoa_r+0x764>
 800e75c:	2300      	movs	r3, #0
 800e75e:	e7d4      	b.n	800e70a <_dtoa_r+0x7ba>
 800e760:	9b00      	ldr	r3, [sp, #0]
 800e762:	e7d2      	b.n	800e70a <_dtoa_r+0x7ba>
 800e764:	2300      	movs	r3, #0
 800e766:	9307      	str	r3, [sp, #28]
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e76e:	6918      	ldr	r0, [r3, #16]
 800e770:	f000 ffbc 	bl	800f6ec <__hi0bits>
 800e774:	f1c0 0020 	rsb	r0, r0, #32
 800e778:	4440      	add	r0, r8
 800e77a:	f010 001f 	ands.w	r0, r0, #31
 800e77e:	d047      	beq.n	800e810 <_dtoa_r+0x8c0>
 800e780:	f1c0 0320 	rsb	r3, r0, #32
 800e784:	2b04      	cmp	r3, #4
 800e786:	dd3b      	ble.n	800e800 <_dtoa_r+0x8b0>
 800e788:	9b05      	ldr	r3, [sp, #20]
 800e78a:	f1c0 001c 	rsb	r0, r0, #28
 800e78e:	4403      	add	r3, r0
 800e790:	9305      	str	r3, [sp, #20]
 800e792:	4405      	add	r5, r0
 800e794:	4480      	add	r8, r0
 800e796:	9b05      	ldr	r3, [sp, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dd05      	ble.n	800e7a8 <_dtoa_r+0x858>
 800e79c:	461a      	mov	r2, r3
 800e79e:	9904      	ldr	r1, [sp, #16]
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f001 f8df 	bl	800f964 <__lshift>
 800e7a6:	9004      	str	r0, [sp, #16]
 800e7a8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ac:	dd05      	ble.n	800e7ba <_dtoa_r+0x86a>
 800e7ae:	4639      	mov	r1, r7
 800e7b0:	4642      	mov	r2, r8
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f001 f8d6 	bl	800f964 <__lshift>
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7bc:	b353      	cbz	r3, 800e814 <_dtoa_r+0x8c4>
 800e7be:	4639      	mov	r1, r7
 800e7c0:	9804      	ldr	r0, [sp, #16]
 800e7c2:	f001 f923 	bl	800fa0c <__mcmp>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	da24      	bge.n	800e814 <_dtoa_r+0x8c4>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	220a      	movs	r2, #10
 800e7ce:	9904      	ldr	r1, [sp, #16]
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 ff12 	bl	800f5fa <__multadd>
 800e7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d8:	9004      	str	r0, [sp, #16]
 800e7da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 814d 	beq.w	800ea7e <_dtoa_r+0xb2e>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	220a      	movs	r2, #10
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f000 ff05 	bl	800f5fa <__multadd>
 800e7f0:	9b02      	ldr	r3, [sp, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	dc4f      	bgt.n	800e898 <_dtoa_r+0x948>
 800e7f8:	9b06      	ldr	r3, [sp, #24]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	dd4c      	ble.n	800e898 <_dtoa_r+0x948>
 800e7fe:	e011      	b.n	800e824 <_dtoa_r+0x8d4>
 800e800:	d0c9      	beq.n	800e796 <_dtoa_r+0x846>
 800e802:	9a05      	ldr	r2, [sp, #20]
 800e804:	331c      	adds	r3, #28
 800e806:	441a      	add	r2, r3
 800e808:	9205      	str	r2, [sp, #20]
 800e80a:	441d      	add	r5, r3
 800e80c:	4498      	add	r8, r3
 800e80e:	e7c2      	b.n	800e796 <_dtoa_r+0x846>
 800e810:	4603      	mov	r3, r0
 800e812:	e7f6      	b.n	800e802 <_dtoa_r+0x8b2>
 800e814:	f1b9 0f00 	cmp.w	r9, #0
 800e818:	dc38      	bgt.n	800e88c <_dtoa_r+0x93c>
 800e81a:	9b06      	ldr	r3, [sp, #24]
 800e81c:	2b02      	cmp	r3, #2
 800e81e:	dd35      	ble.n	800e88c <_dtoa_r+0x93c>
 800e820:	f8cd 9008 	str.w	r9, [sp, #8]
 800e824:	9b02      	ldr	r3, [sp, #8]
 800e826:	b963      	cbnz	r3, 800e842 <_dtoa_r+0x8f2>
 800e828:	4639      	mov	r1, r7
 800e82a:	2205      	movs	r2, #5
 800e82c:	4620      	mov	r0, r4
 800e82e:	f000 fee4 	bl	800f5fa <__multadd>
 800e832:	4601      	mov	r1, r0
 800e834:	4607      	mov	r7, r0
 800e836:	9804      	ldr	r0, [sp, #16]
 800e838:	f001 f8e8 	bl	800fa0c <__mcmp>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f73f adcc 	bgt.w	800e3da <_dtoa_r+0x48a>
 800e842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e844:	465d      	mov	r5, fp
 800e846:	ea6f 0a03 	mvn.w	sl, r3
 800e84a:	f04f 0900 	mov.w	r9, #0
 800e84e:	4639      	mov	r1, r7
 800e850:	4620      	mov	r0, r4
 800e852:	f000 febb 	bl	800f5cc <_Bfree>
 800e856:	2e00      	cmp	r6, #0
 800e858:	f43f aeb7 	beq.w	800e5ca <_dtoa_r+0x67a>
 800e85c:	f1b9 0f00 	cmp.w	r9, #0
 800e860:	d005      	beq.n	800e86e <_dtoa_r+0x91e>
 800e862:	45b1      	cmp	r9, r6
 800e864:	d003      	beq.n	800e86e <_dtoa_r+0x91e>
 800e866:	4649      	mov	r1, r9
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 feaf 	bl	800f5cc <_Bfree>
 800e86e:	4631      	mov	r1, r6
 800e870:	4620      	mov	r0, r4
 800e872:	f000 feab 	bl	800f5cc <_Bfree>
 800e876:	e6a8      	b.n	800e5ca <_dtoa_r+0x67a>
 800e878:	2700      	movs	r7, #0
 800e87a:	463e      	mov	r6, r7
 800e87c:	e7e1      	b.n	800e842 <_dtoa_r+0x8f2>
 800e87e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e882:	463e      	mov	r6, r7
 800e884:	e5a9      	b.n	800e3da <_dtoa_r+0x48a>
 800e886:	bf00      	nop
 800e888:	40240000 	.word	0x40240000
 800e88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e88e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80fa 	beq.w	800ea8c <_dtoa_r+0xb3c>
 800e898:	2d00      	cmp	r5, #0
 800e89a:	dd05      	ble.n	800e8a8 <_dtoa_r+0x958>
 800e89c:	4631      	mov	r1, r6
 800e89e:	462a      	mov	r2, r5
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f001 f85f 	bl	800f964 <__lshift>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	9b07      	ldr	r3, [sp, #28]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d04c      	beq.n	800e948 <_dtoa_r+0x9f8>
 800e8ae:	6871      	ldr	r1, [r6, #4]
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fe57 	bl	800f564 <_Balloc>
 800e8b6:	6932      	ldr	r2, [r6, #16]
 800e8b8:	3202      	adds	r2, #2
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	0092      	lsls	r2, r2, #2
 800e8be:	f106 010c 	add.w	r1, r6, #12
 800e8c2:	300c      	adds	r0, #12
 800e8c4:	f7fd fb4c 	bl	800bf60 <memcpy>
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f001 f849 	bl	800f964 <__lshift>
 800e8d2:	9b00      	ldr	r3, [sp, #0]
 800e8d4:	f8cd b014 	str.w	fp, [sp, #20]
 800e8d8:	f003 0301 	and.w	r3, r3, #1
 800e8dc:	46b1      	mov	r9, r6
 800e8de:	9307      	str	r3, [sp, #28]
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	9804      	ldr	r0, [sp, #16]
 800e8e6:	f7ff faa5 	bl	800de34 <quorem>
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e8f2:	9804      	ldr	r0, [sp, #16]
 800e8f4:	f001 f88a 	bl	800fa0c <__mcmp>
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	9000      	str	r0, [sp, #0]
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	4620      	mov	r0, r4
 800e900:	f001 f89e 	bl	800fa40 <__mdiff>
 800e904:	68c3      	ldr	r3, [r0, #12]
 800e906:	4602      	mov	r2, r0
 800e908:	bb03      	cbnz	r3, 800e94c <_dtoa_r+0x9fc>
 800e90a:	4601      	mov	r1, r0
 800e90c:	9008      	str	r0, [sp, #32]
 800e90e:	9804      	ldr	r0, [sp, #16]
 800e910:	f001 f87c 	bl	800fa0c <__mcmp>
 800e914:	9a08      	ldr	r2, [sp, #32]
 800e916:	4603      	mov	r3, r0
 800e918:	4611      	mov	r1, r2
 800e91a:	4620      	mov	r0, r4
 800e91c:	9308      	str	r3, [sp, #32]
 800e91e:	f000 fe55 	bl	800f5cc <_Bfree>
 800e922:	9b08      	ldr	r3, [sp, #32]
 800e924:	b9a3      	cbnz	r3, 800e950 <_dtoa_r+0xa00>
 800e926:	9a06      	ldr	r2, [sp, #24]
 800e928:	b992      	cbnz	r2, 800e950 <_dtoa_r+0xa00>
 800e92a:	9a07      	ldr	r2, [sp, #28]
 800e92c:	b982      	cbnz	r2, 800e950 <_dtoa_r+0xa00>
 800e92e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e932:	d029      	beq.n	800e988 <_dtoa_r+0xa38>
 800e934:	9b00      	ldr	r3, [sp, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	dd01      	ble.n	800e93e <_dtoa_r+0x9ee>
 800e93a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e93e:	9b05      	ldr	r3, [sp, #20]
 800e940:	1c5d      	adds	r5, r3, #1
 800e942:	f883 8000 	strb.w	r8, [r3]
 800e946:	e782      	b.n	800e84e <_dtoa_r+0x8fe>
 800e948:	4630      	mov	r0, r6
 800e94a:	e7c2      	b.n	800e8d2 <_dtoa_r+0x982>
 800e94c:	2301      	movs	r3, #1
 800e94e:	e7e3      	b.n	800e918 <_dtoa_r+0x9c8>
 800e950:	9a00      	ldr	r2, [sp, #0]
 800e952:	2a00      	cmp	r2, #0
 800e954:	db04      	blt.n	800e960 <_dtoa_r+0xa10>
 800e956:	d125      	bne.n	800e9a4 <_dtoa_r+0xa54>
 800e958:	9a06      	ldr	r2, [sp, #24]
 800e95a:	bb1a      	cbnz	r2, 800e9a4 <_dtoa_r+0xa54>
 800e95c:	9a07      	ldr	r2, [sp, #28]
 800e95e:	bb0a      	cbnz	r2, 800e9a4 <_dtoa_r+0xa54>
 800e960:	2b00      	cmp	r3, #0
 800e962:	ddec      	ble.n	800e93e <_dtoa_r+0x9ee>
 800e964:	2201      	movs	r2, #1
 800e966:	9904      	ldr	r1, [sp, #16]
 800e968:	4620      	mov	r0, r4
 800e96a:	f000 fffb 	bl	800f964 <__lshift>
 800e96e:	4639      	mov	r1, r7
 800e970:	9004      	str	r0, [sp, #16]
 800e972:	f001 f84b 	bl	800fa0c <__mcmp>
 800e976:	2800      	cmp	r0, #0
 800e978:	dc03      	bgt.n	800e982 <_dtoa_r+0xa32>
 800e97a:	d1e0      	bne.n	800e93e <_dtoa_r+0x9ee>
 800e97c:	f018 0f01 	tst.w	r8, #1
 800e980:	d0dd      	beq.n	800e93e <_dtoa_r+0x9ee>
 800e982:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e986:	d1d8      	bne.n	800e93a <_dtoa_r+0x9ea>
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	9a05      	ldr	r2, [sp, #20]
 800e98c:	1c5d      	adds	r5, r3, #1
 800e98e:	2339      	movs	r3, #57	; 0x39
 800e990:	7013      	strb	r3, [r2, #0]
 800e992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e996:	2b39      	cmp	r3, #57	; 0x39
 800e998:	f105 32ff 	add.w	r2, r5, #4294967295
 800e99c:	d04f      	beq.n	800ea3e <_dtoa_r+0xaee>
 800e99e:	3301      	adds	r3, #1
 800e9a0:	7013      	strb	r3, [r2, #0]
 800e9a2:	e754      	b.n	800e84e <_dtoa_r+0x8fe>
 800e9a4:	9a05      	ldr	r2, [sp, #20]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f102 0501 	add.w	r5, r2, #1
 800e9ac:	dd06      	ble.n	800e9bc <_dtoa_r+0xa6c>
 800e9ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e9b2:	d0e9      	beq.n	800e988 <_dtoa_r+0xa38>
 800e9b4:	f108 0801 	add.w	r8, r8, #1
 800e9b8:	9b05      	ldr	r3, [sp, #20]
 800e9ba:	e7c2      	b.n	800e942 <_dtoa_r+0x9f2>
 800e9bc:	9a02      	ldr	r2, [sp, #8]
 800e9be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e9c2:	eba5 030b 	sub.w	r3, r5, fp
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d021      	beq.n	800ea0e <_dtoa_r+0xabe>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	220a      	movs	r2, #10
 800e9ce:	9904      	ldr	r1, [sp, #16]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fe12 	bl	800f5fa <__multadd>
 800e9d6:	45b1      	cmp	r9, r6
 800e9d8:	9004      	str	r0, [sp, #16]
 800e9da:	f04f 0300 	mov.w	r3, #0
 800e9de:	f04f 020a 	mov.w	r2, #10
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	d105      	bne.n	800e9f4 <_dtoa_r+0xaa4>
 800e9e8:	f000 fe07 	bl	800f5fa <__multadd>
 800e9ec:	4681      	mov	r9, r0
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	9505      	str	r5, [sp, #20]
 800e9f2:	e776      	b.n	800e8e2 <_dtoa_r+0x992>
 800e9f4:	f000 fe01 	bl	800f5fa <__multadd>
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	4681      	mov	r9, r0
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	220a      	movs	r2, #10
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 fdfa 	bl	800f5fa <__multadd>
 800ea06:	4606      	mov	r6, r0
 800ea08:	e7f2      	b.n	800e9f0 <_dtoa_r+0xaa0>
 800ea0a:	f04f 0900 	mov.w	r9, #0
 800ea0e:	2201      	movs	r2, #1
 800ea10:	9904      	ldr	r1, [sp, #16]
 800ea12:	4620      	mov	r0, r4
 800ea14:	f000 ffa6 	bl	800f964 <__lshift>
 800ea18:	4639      	mov	r1, r7
 800ea1a:	9004      	str	r0, [sp, #16]
 800ea1c:	f000 fff6 	bl	800fa0c <__mcmp>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dcb6      	bgt.n	800e992 <_dtoa_r+0xa42>
 800ea24:	d102      	bne.n	800ea2c <_dtoa_r+0xadc>
 800ea26:	f018 0f01 	tst.w	r8, #1
 800ea2a:	d1b2      	bne.n	800e992 <_dtoa_r+0xa42>
 800ea2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea30:	2b30      	cmp	r3, #48	; 0x30
 800ea32:	f105 32ff 	add.w	r2, r5, #4294967295
 800ea36:	f47f af0a 	bne.w	800e84e <_dtoa_r+0x8fe>
 800ea3a:	4615      	mov	r5, r2
 800ea3c:	e7f6      	b.n	800ea2c <_dtoa_r+0xadc>
 800ea3e:	4593      	cmp	fp, r2
 800ea40:	d105      	bne.n	800ea4e <_dtoa_r+0xafe>
 800ea42:	2331      	movs	r3, #49	; 0x31
 800ea44:	f10a 0a01 	add.w	sl, sl, #1
 800ea48:	f88b 3000 	strb.w	r3, [fp]
 800ea4c:	e6ff      	b.n	800e84e <_dtoa_r+0x8fe>
 800ea4e:	4615      	mov	r5, r2
 800ea50:	e79f      	b.n	800e992 <_dtoa_r+0xa42>
 800ea52:	f8df b064 	ldr.w	fp, [pc, #100]	; 800eab8 <_dtoa_r+0xb68>
 800ea56:	e007      	b.n	800ea68 <_dtoa_r+0xb18>
 800ea58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800eabc <_dtoa_r+0xb6c>
 800ea5e:	b11b      	cbz	r3, 800ea68 <_dtoa_r+0xb18>
 800ea60:	f10b 0308 	add.w	r3, fp, #8
 800ea64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	4658      	mov	r0, fp
 800ea6a:	b017      	add	sp, #92	; 0x5c
 800ea6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea70:	9b06      	ldr	r3, [sp, #24]
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	f77f ae35 	ble.w	800e6e2 <_dtoa_r+0x792>
 800ea78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea7a:	9307      	str	r3, [sp, #28]
 800ea7c:	e649      	b.n	800e712 <_dtoa_r+0x7c2>
 800ea7e:	9b02      	ldr	r3, [sp, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	dc03      	bgt.n	800ea8c <_dtoa_r+0xb3c>
 800ea84:	9b06      	ldr	r3, [sp, #24]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	f73f aecc 	bgt.w	800e824 <_dtoa_r+0x8d4>
 800ea8c:	465d      	mov	r5, fp
 800ea8e:	4639      	mov	r1, r7
 800ea90:	9804      	ldr	r0, [sp, #16]
 800ea92:	f7ff f9cf 	bl	800de34 <quorem>
 800ea96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ea9a:	f805 8b01 	strb.w	r8, [r5], #1
 800ea9e:	9a02      	ldr	r2, [sp, #8]
 800eaa0:	eba5 030b 	sub.w	r3, r5, fp
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	ddb0      	ble.n	800ea0a <_dtoa_r+0xaba>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	220a      	movs	r2, #10
 800eaac:	9904      	ldr	r1, [sp, #16]
 800eaae:	4620      	mov	r0, r4
 800eab0:	f000 fda3 	bl	800f5fa <__multadd>
 800eab4:	9004      	str	r0, [sp, #16]
 800eab6:	e7ea      	b.n	800ea8e <_dtoa_r+0xb3e>
 800eab8:	08012323 	.word	0x08012323
 800eabc:	08012180 	.word	0x08012180

0800eac0 <__sflush_r>:
 800eac0:	898a      	ldrh	r2, [r1, #12]
 800eac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac6:	4605      	mov	r5, r0
 800eac8:	0710      	lsls	r0, r2, #28
 800eaca:	460c      	mov	r4, r1
 800eacc:	d458      	bmi.n	800eb80 <__sflush_r+0xc0>
 800eace:	684b      	ldr	r3, [r1, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	dc05      	bgt.n	800eae0 <__sflush_r+0x20>
 800ead4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	dc02      	bgt.n	800eae0 <__sflush_r+0x20>
 800eada:	2000      	movs	r0, #0
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eae2:	2e00      	cmp	r6, #0
 800eae4:	d0f9      	beq.n	800eada <__sflush_r+0x1a>
 800eae6:	2300      	movs	r3, #0
 800eae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eaec:	682f      	ldr	r7, [r5, #0]
 800eaee:	6a21      	ldr	r1, [r4, #32]
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	d032      	beq.n	800eb5a <__sflush_r+0x9a>
 800eaf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	075a      	lsls	r2, r3, #29
 800eafa:	d505      	bpl.n	800eb08 <__sflush_r+0x48>
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	1ac0      	subs	r0, r0, r3
 800eb00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb02:	b10b      	cbz	r3, 800eb08 <__sflush_r+0x48>
 800eb04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb06:	1ac0      	subs	r0, r0, r3
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb0e:	6a21      	ldr	r1, [r4, #32]
 800eb10:	4628      	mov	r0, r5
 800eb12:	47b0      	blx	r6
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	d106      	bne.n	800eb28 <__sflush_r+0x68>
 800eb1a:	6829      	ldr	r1, [r5, #0]
 800eb1c:	291d      	cmp	r1, #29
 800eb1e:	d848      	bhi.n	800ebb2 <__sflush_r+0xf2>
 800eb20:	4a29      	ldr	r2, [pc, #164]	; (800ebc8 <__sflush_r+0x108>)
 800eb22:	40ca      	lsrs	r2, r1
 800eb24:	07d6      	lsls	r6, r2, #31
 800eb26:	d544      	bpl.n	800ebb2 <__sflush_r+0xf2>
 800eb28:	2200      	movs	r2, #0
 800eb2a:	6062      	str	r2, [r4, #4]
 800eb2c:	04d9      	lsls	r1, r3, #19
 800eb2e:	6922      	ldr	r2, [r4, #16]
 800eb30:	6022      	str	r2, [r4, #0]
 800eb32:	d504      	bpl.n	800eb3e <__sflush_r+0x7e>
 800eb34:	1c42      	adds	r2, r0, #1
 800eb36:	d101      	bne.n	800eb3c <__sflush_r+0x7c>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	b903      	cbnz	r3, 800eb3e <__sflush_r+0x7e>
 800eb3c:	6560      	str	r0, [r4, #84]	; 0x54
 800eb3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb40:	602f      	str	r7, [r5, #0]
 800eb42:	2900      	cmp	r1, #0
 800eb44:	d0c9      	beq.n	800eada <__sflush_r+0x1a>
 800eb46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb4a:	4299      	cmp	r1, r3
 800eb4c:	d002      	beq.n	800eb54 <__sflush_r+0x94>
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f001 f916 	bl	800fd80 <_free_r>
 800eb54:	2000      	movs	r0, #0
 800eb56:	6360      	str	r0, [r4, #52]	; 0x34
 800eb58:	e7c0      	b.n	800eadc <__sflush_r+0x1c>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	47b0      	blx	r6
 800eb60:	1c41      	adds	r1, r0, #1
 800eb62:	d1c8      	bne.n	800eaf6 <__sflush_r+0x36>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d0c5      	beq.n	800eaf6 <__sflush_r+0x36>
 800eb6a:	2b1d      	cmp	r3, #29
 800eb6c:	d001      	beq.n	800eb72 <__sflush_r+0xb2>
 800eb6e:	2b16      	cmp	r3, #22
 800eb70:	d101      	bne.n	800eb76 <__sflush_r+0xb6>
 800eb72:	602f      	str	r7, [r5, #0]
 800eb74:	e7b1      	b.n	800eada <__sflush_r+0x1a>
 800eb76:	89a3      	ldrh	r3, [r4, #12]
 800eb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb7c:	81a3      	strh	r3, [r4, #12]
 800eb7e:	e7ad      	b.n	800eadc <__sflush_r+0x1c>
 800eb80:	690f      	ldr	r7, [r1, #16]
 800eb82:	2f00      	cmp	r7, #0
 800eb84:	d0a9      	beq.n	800eada <__sflush_r+0x1a>
 800eb86:	0793      	lsls	r3, r2, #30
 800eb88:	680e      	ldr	r6, [r1, #0]
 800eb8a:	bf08      	it	eq
 800eb8c:	694b      	ldreq	r3, [r1, #20]
 800eb8e:	600f      	str	r7, [r1, #0]
 800eb90:	bf18      	it	ne
 800eb92:	2300      	movne	r3, #0
 800eb94:	eba6 0807 	sub.w	r8, r6, r7
 800eb98:	608b      	str	r3, [r1, #8]
 800eb9a:	f1b8 0f00 	cmp.w	r8, #0
 800eb9e:	dd9c      	ble.n	800eada <__sflush_r+0x1a>
 800eba0:	4643      	mov	r3, r8
 800eba2:	463a      	mov	r2, r7
 800eba4:	6a21      	ldr	r1, [r4, #32]
 800eba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b0      	blx	r6
 800ebac:	2800      	cmp	r0, #0
 800ebae:	dc06      	bgt.n	800ebbe <__sflush_r+0xfe>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebb6:	81a3      	strh	r3, [r4, #12]
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbc:	e78e      	b.n	800eadc <__sflush_r+0x1c>
 800ebbe:	4407      	add	r7, r0
 800ebc0:	eba8 0800 	sub.w	r8, r8, r0
 800ebc4:	e7e9      	b.n	800eb9a <__sflush_r+0xda>
 800ebc6:	bf00      	nop
 800ebc8:	20400001 	.word	0x20400001

0800ebcc <_fflush_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	690b      	ldr	r3, [r1, #16]
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	b1db      	cbz	r3, 800ec0e <_fflush_r+0x42>
 800ebd6:	b118      	cbz	r0, 800ebe0 <_fflush_r+0x14>
 800ebd8:	6983      	ldr	r3, [r0, #24]
 800ebda:	b90b      	cbnz	r3, 800ebe0 <_fflush_r+0x14>
 800ebdc:	f000 f860 	bl	800eca0 <__sinit>
 800ebe0:	4b0c      	ldr	r3, [pc, #48]	; (800ec14 <_fflush_r+0x48>)
 800ebe2:	429c      	cmp	r4, r3
 800ebe4:	d109      	bne.n	800ebfa <_fflush_r+0x2e>
 800ebe6:	686c      	ldr	r4, [r5, #4]
 800ebe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebec:	b17b      	cbz	r3, 800ec0e <_fflush_r+0x42>
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebf6:	f7ff bf63 	b.w	800eac0 <__sflush_r>
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <_fflush_r+0x4c>)
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	d101      	bne.n	800ec04 <_fflush_r+0x38>
 800ec00:	68ac      	ldr	r4, [r5, #8]
 800ec02:	e7f1      	b.n	800ebe8 <_fflush_r+0x1c>
 800ec04:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <_fflush_r+0x50>)
 800ec06:	429c      	cmp	r4, r3
 800ec08:	bf08      	it	eq
 800ec0a:	68ec      	ldreq	r4, [r5, #12]
 800ec0c:	e7ec      	b.n	800ebe8 <_fflush_r+0x1c>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	bd38      	pop	{r3, r4, r5, pc}
 800ec12:	bf00      	nop
 800ec14:	080121b0 	.word	0x080121b0
 800ec18:	080121d0 	.word	0x080121d0
 800ec1c:	08012190 	.word	0x08012190

0800ec20 <std>:
 800ec20:	2300      	movs	r3, #0
 800ec22:	b510      	push	{r4, lr}
 800ec24:	4604      	mov	r4, r0
 800ec26:	e9c0 3300 	strd	r3, r3, [r0]
 800ec2a:	6083      	str	r3, [r0, #8]
 800ec2c:	8181      	strh	r1, [r0, #12]
 800ec2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ec30:	81c2      	strh	r2, [r0, #14]
 800ec32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec36:	6183      	str	r3, [r0, #24]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	2208      	movs	r2, #8
 800ec3c:	305c      	adds	r0, #92	; 0x5c
 800ec3e:	f7fd f99a 	bl	800bf76 <memset>
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <std+0x38>)
 800ec44:	6263      	str	r3, [r4, #36]	; 0x24
 800ec46:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <std+0x3c>)
 800ec48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec4a:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <std+0x40>)
 800ec4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec4e:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <std+0x44>)
 800ec50:	6224      	str	r4, [r4, #32]
 800ec52:	6323      	str	r3, [r4, #48]	; 0x30
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	bf00      	nop
 800ec58:	0800ce69 	.word	0x0800ce69
 800ec5c:	0800ce8f 	.word	0x0800ce8f
 800ec60:	0800cec7 	.word	0x0800cec7
 800ec64:	0800ceeb 	.word	0x0800ceeb

0800ec68 <_cleanup_r>:
 800ec68:	4901      	ldr	r1, [pc, #4]	; (800ec70 <_cleanup_r+0x8>)
 800ec6a:	f000 b885 	b.w	800ed78 <_fwalk_reent>
 800ec6e:	bf00      	nop
 800ec70:	0800ebcd 	.word	0x0800ebcd

0800ec74 <__sfmoreglue>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	1e4a      	subs	r2, r1, #1
 800ec78:	2568      	movs	r5, #104	; 0x68
 800ec7a:	4355      	muls	r5, r2
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec82:	f001 f8cb 	bl	800fe1c <_malloc_r>
 800ec86:	4604      	mov	r4, r0
 800ec88:	b140      	cbz	r0, 800ec9c <__sfmoreglue+0x28>
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ec90:	300c      	adds	r0, #12
 800ec92:	60a0      	str	r0, [r4, #8]
 800ec94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec98:	f7fd f96d 	bl	800bf76 <memset>
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}

0800eca0 <__sinit>:
 800eca0:	6983      	ldr	r3, [r0, #24]
 800eca2:	b510      	push	{r4, lr}
 800eca4:	4604      	mov	r4, r0
 800eca6:	bb33      	cbnz	r3, 800ecf6 <__sinit+0x56>
 800eca8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ecac:	6503      	str	r3, [r0, #80]	; 0x50
 800ecae:	4b12      	ldr	r3, [pc, #72]	; (800ecf8 <__sinit+0x58>)
 800ecb0:	4a12      	ldr	r2, [pc, #72]	; (800ecfc <__sinit+0x5c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6282      	str	r2, [r0, #40]	; 0x28
 800ecb6:	4298      	cmp	r0, r3
 800ecb8:	bf04      	itt	eq
 800ecba:	2301      	moveq	r3, #1
 800ecbc:	6183      	streq	r3, [r0, #24]
 800ecbe:	f000 f81f 	bl	800ed00 <__sfp>
 800ecc2:	6060      	str	r0, [r4, #4]
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f000 f81b 	bl	800ed00 <__sfp>
 800ecca:	60a0      	str	r0, [r4, #8]
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 f817 	bl	800ed00 <__sfp>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	60e0      	str	r0, [r4, #12]
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	6860      	ldr	r0, [r4, #4]
 800ecda:	f7ff ffa1 	bl	800ec20 <std>
 800ecde:	2201      	movs	r2, #1
 800ece0:	2109      	movs	r1, #9
 800ece2:	68a0      	ldr	r0, [r4, #8]
 800ece4:	f7ff ff9c 	bl	800ec20 <std>
 800ece8:	2202      	movs	r2, #2
 800ecea:	2112      	movs	r1, #18
 800ecec:	68e0      	ldr	r0, [r4, #12]
 800ecee:	f7ff ff97 	bl	800ec20 <std>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	61a3      	str	r3, [r4, #24]
 800ecf6:	bd10      	pop	{r4, pc}
 800ecf8:	080120f0 	.word	0x080120f0
 800ecfc:	0800ec69 	.word	0x0800ec69

0800ed00 <__sfp>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	4b1b      	ldr	r3, [pc, #108]	; (800ed70 <__sfp+0x70>)
 800ed04:	681e      	ldr	r6, [r3, #0]
 800ed06:	69b3      	ldr	r3, [r6, #24]
 800ed08:	4607      	mov	r7, r0
 800ed0a:	b913      	cbnz	r3, 800ed12 <__sfp+0x12>
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7ff ffc7 	bl	800eca0 <__sinit>
 800ed12:	3648      	adds	r6, #72	; 0x48
 800ed14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	d503      	bpl.n	800ed24 <__sfp+0x24>
 800ed1c:	6833      	ldr	r3, [r6, #0]
 800ed1e:	b133      	cbz	r3, 800ed2e <__sfp+0x2e>
 800ed20:	6836      	ldr	r6, [r6, #0]
 800ed22:	e7f7      	b.n	800ed14 <__sfp+0x14>
 800ed24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed28:	b16d      	cbz	r5, 800ed46 <__sfp+0x46>
 800ed2a:	3468      	adds	r4, #104	; 0x68
 800ed2c:	e7f4      	b.n	800ed18 <__sfp+0x18>
 800ed2e:	2104      	movs	r1, #4
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7ff ff9f 	bl	800ec74 <__sfmoreglue>
 800ed36:	6030      	str	r0, [r6, #0]
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d1f1      	bne.n	800ed20 <__sfp+0x20>
 800ed3c:	230c      	movs	r3, #12
 800ed3e:	603b      	str	r3, [r7, #0]
 800ed40:	4604      	mov	r4, r0
 800ed42:	4620      	mov	r0, r4
 800ed44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed46:	4b0b      	ldr	r3, [pc, #44]	; (800ed74 <__sfp+0x74>)
 800ed48:	6665      	str	r5, [r4, #100]	; 0x64
 800ed4a:	e9c4 5500 	strd	r5, r5, [r4]
 800ed4e:	60a5      	str	r5, [r4, #8]
 800ed50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ed54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ed58:	2208      	movs	r2, #8
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed60:	f7fd f909 	bl	800bf76 <memset>
 800ed64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed6c:	e7e9      	b.n	800ed42 <__sfp+0x42>
 800ed6e:	bf00      	nop
 800ed70:	080120f0 	.word	0x080120f0
 800ed74:	ffff0001 	.word	0xffff0001

0800ed78 <_fwalk_reent>:
 800ed78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	4689      	mov	r9, r1
 800ed80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed84:	2600      	movs	r6, #0
 800ed86:	b914      	cbnz	r4, 800ed8e <_fwalk_reent+0x16>
 800ed88:	4630      	mov	r0, r6
 800ed8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ed92:	3f01      	subs	r7, #1
 800ed94:	d501      	bpl.n	800ed9a <_fwalk_reent+0x22>
 800ed96:	6824      	ldr	r4, [r4, #0]
 800ed98:	e7f5      	b.n	800ed86 <_fwalk_reent+0xe>
 800ed9a:	89ab      	ldrh	r3, [r5, #12]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d907      	bls.n	800edb0 <_fwalk_reent+0x38>
 800eda0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eda4:	3301      	adds	r3, #1
 800eda6:	d003      	beq.n	800edb0 <_fwalk_reent+0x38>
 800eda8:	4629      	mov	r1, r5
 800edaa:	4640      	mov	r0, r8
 800edac:	47c8      	blx	r9
 800edae:	4306      	orrs	r6, r0
 800edb0:	3568      	adds	r5, #104	; 0x68
 800edb2:	e7ee      	b.n	800ed92 <_fwalk_reent+0x1a>

0800edb4 <rshift>:
 800edb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb6:	6906      	ldr	r6, [r0, #16]
 800edb8:	114b      	asrs	r3, r1, #5
 800edba:	429e      	cmp	r6, r3
 800edbc:	f100 0414 	add.w	r4, r0, #20
 800edc0:	dd30      	ble.n	800ee24 <rshift+0x70>
 800edc2:	f011 011f 	ands.w	r1, r1, #31
 800edc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800edca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800edce:	d108      	bne.n	800ede2 <rshift+0x2e>
 800edd0:	4621      	mov	r1, r4
 800edd2:	42b2      	cmp	r2, r6
 800edd4:	460b      	mov	r3, r1
 800edd6:	d211      	bcs.n	800edfc <rshift+0x48>
 800edd8:	f852 3b04 	ldr.w	r3, [r2], #4
 800eddc:	f841 3b04 	str.w	r3, [r1], #4
 800ede0:	e7f7      	b.n	800edd2 <rshift+0x1e>
 800ede2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ede6:	f1c1 0c20 	rsb	ip, r1, #32
 800edea:	40cd      	lsrs	r5, r1
 800edec:	3204      	adds	r2, #4
 800edee:	4623      	mov	r3, r4
 800edf0:	42b2      	cmp	r2, r6
 800edf2:	4617      	mov	r7, r2
 800edf4:	d30c      	bcc.n	800ee10 <rshift+0x5c>
 800edf6:	601d      	str	r5, [r3, #0]
 800edf8:	b105      	cbz	r5, 800edfc <rshift+0x48>
 800edfa:	3304      	adds	r3, #4
 800edfc:	1b1a      	subs	r2, r3, r4
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee04:	bf08      	it	eq
 800ee06:	2300      	moveq	r3, #0
 800ee08:	6102      	str	r2, [r0, #16]
 800ee0a:	bf08      	it	eq
 800ee0c:	6143      	streq	r3, [r0, #20]
 800ee0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee10:	683f      	ldr	r7, [r7, #0]
 800ee12:	fa07 f70c 	lsl.w	r7, r7, ip
 800ee16:	433d      	orrs	r5, r7
 800ee18:	f843 5b04 	str.w	r5, [r3], #4
 800ee1c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ee20:	40cd      	lsrs	r5, r1
 800ee22:	e7e5      	b.n	800edf0 <rshift+0x3c>
 800ee24:	4623      	mov	r3, r4
 800ee26:	e7e9      	b.n	800edfc <rshift+0x48>

0800ee28 <__hexdig_fun>:
 800ee28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee2c:	2b09      	cmp	r3, #9
 800ee2e:	d802      	bhi.n	800ee36 <__hexdig_fun+0xe>
 800ee30:	3820      	subs	r0, #32
 800ee32:	b2c0      	uxtb	r0, r0
 800ee34:	4770      	bx	lr
 800ee36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d801      	bhi.n	800ee42 <__hexdig_fun+0x1a>
 800ee3e:	3847      	subs	r0, #71	; 0x47
 800ee40:	e7f7      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee46:	2b05      	cmp	r3, #5
 800ee48:	d801      	bhi.n	800ee4e <__hexdig_fun+0x26>
 800ee4a:	3827      	subs	r0, #39	; 0x27
 800ee4c:	e7f1      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4770      	bx	lr

0800ee52 <__gethex>:
 800ee52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee56:	b08b      	sub	sp, #44	; 0x2c
 800ee58:	468a      	mov	sl, r1
 800ee5a:	9002      	str	r0, [sp, #8]
 800ee5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ee5e:	9306      	str	r3, [sp, #24]
 800ee60:	4690      	mov	r8, r2
 800ee62:	f000 fadf 	bl	800f424 <__localeconv_l>
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	9303      	str	r3, [sp, #12]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f1 f9c2 	bl	80001f4 <strlen>
 800ee70:	9b03      	ldr	r3, [sp, #12]
 800ee72:	9001      	str	r0, [sp, #4]
 800ee74:	4403      	add	r3, r0
 800ee76:	f04f 0b00 	mov.w	fp, #0
 800ee7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ee7e:	9307      	str	r3, [sp, #28]
 800ee80:	f8da 3000 	ldr.w	r3, [sl]
 800ee84:	3302      	adds	r3, #2
 800ee86:	461f      	mov	r7, r3
 800ee88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee8c:	2830      	cmp	r0, #48	; 0x30
 800ee8e:	d06c      	beq.n	800ef6a <__gethex+0x118>
 800ee90:	f7ff ffca 	bl	800ee28 <__hexdig_fun>
 800ee94:	4604      	mov	r4, r0
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d16a      	bne.n	800ef70 <__gethex+0x11e>
 800ee9a:	9a01      	ldr	r2, [sp, #4]
 800ee9c:	9903      	ldr	r1, [sp, #12]
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f7fe f84b 	bl	800cf3a <strncmp>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d166      	bne.n	800ef76 <__gethex+0x124>
 800eea8:	9b01      	ldr	r3, [sp, #4]
 800eeaa:	5cf8      	ldrb	r0, [r7, r3]
 800eeac:	18fe      	adds	r6, r7, r3
 800eeae:	f7ff ffbb 	bl	800ee28 <__hexdig_fun>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d062      	beq.n	800ef7c <__gethex+0x12a>
 800eeb6:	4633      	mov	r3, r6
 800eeb8:	7818      	ldrb	r0, [r3, #0]
 800eeba:	2830      	cmp	r0, #48	; 0x30
 800eebc:	461f      	mov	r7, r3
 800eebe:	f103 0301 	add.w	r3, r3, #1
 800eec2:	d0f9      	beq.n	800eeb8 <__gethex+0x66>
 800eec4:	f7ff ffb0 	bl	800ee28 <__hexdig_fun>
 800eec8:	fab0 f580 	clz	r5, r0
 800eecc:	096d      	lsrs	r5, r5, #5
 800eece:	4634      	mov	r4, r6
 800eed0:	f04f 0b01 	mov.w	fp, #1
 800eed4:	463a      	mov	r2, r7
 800eed6:	4616      	mov	r6, r2
 800eed8:	3201      	adds	r2, #1
 800eeda:	7830      	ldrb	r0, [r6, #0]
 800eedc:	f7ff ffa4 	bl	800ee28 <__hexdig_fun>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d1f8      	bne.n	800eed6 <__gethex+0x84>
 800eee4:	9a01      	ldr	r2, [sp, #4]
 800eee6:	9903      	ldr	r1, [sp, #12]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f7fe f826 	bl	800cf3a <strncmp>
 800eeee:	b950      	cbnz	r0, 800ef06 <__gethex+0xb4>
 800eef0:	b954      	cbnz	r4, 800ef08 <__gethex+0xb6>
 800eef2:	9b01      	ldr	r3, [sp, #4]
 800eef4:	18f4      	adds	r4, r6, r3
 800eef6:	4622      	mov	r2, r4
 800eef8:	4616      	mov	r6, r2
 800eefa:	3201      	adds	r2, #1
 800eefc:	7830      	ldrb	r0, [r6, #0]
 800eefe:	f7ff ff93 	bl	800ee28 <__hexdig_fun>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d1f8      	bne.n	800eef8 <__gethex+0xa6>
 800ef06:	b10c      	cbz	r4, 800ef0c <__gethex+0xba>
 800ef08:	1ba4      	subs	r4, r4, r6
 800ef0a:	00a4      	lsls	r4, r4, #2
 800ef0c:	7833      	ldrb	r3, [r6, #0]
 800ef0e:	2b50      	cmp	r3, #80	; 0x50
 800ef10:	d001      	beq.n	800ef16 <__gethex+0xc4>
 800ef12:	2b70      	cmp	r3, #112	; 0x70
 800ef14:	d140      	bne.n	800ef98 <__gethex+0x146>
 800ef16:	7873      	ldrb	r3, [r6, #1]
 800ef18:	2b2b      	cmp	r3, #43	; 0x2b
 800ef1a:	d031      	beq.n	800ef80 <__gethex+0x12e>
 800ef1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ef1e:	d033      	beq.n	800ef88 <__gethex+0x136>
 800ef20:	1c71      	adds	r1, r6, #1
 800ef22:	f04f 0900 	mov.w	r9, #0
 800ef26:	7808      	ldrb	r0, [r1, #0]
 800ef28:	f7ff ff7e 	bl	800ee28 <__hexdig_fun>
 800ef2c:	1e43      	subs	r3, r0, #1
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b18      	cmp	r3, #24
 800ef32:	d831      	bhi.n	800ef98 <__gethex+0x146>
 800ef34:	f1a0 0210 	sub.w	r2, r0, #16
 800ef38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef3c:	f7ff ff74 	bl	800ee28 <__hexdig_fun>
 800ef40:	1e43      	subs	r3, r0, #1
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b18      	cmp	r3, #24
 800ef46:	d922      	bls.n	800ef8e <__gethex+0x13c>
 800ef48:	f1b9 0f00 	cmp.w	r9, #0
 800ef4c:	d000      	beq.n	800ef50 <__gethex+0xfe>
 800ef4e:	4252      	negs	r2, r2
 800ef50:	4414      	add	r4, r2
 800ef52:	f8ca 1000 	str.w	r1, [sl]
 800ef56:	b30d      	cbz	r5, 800ef9c <__gethex+0x14a>
 800ef58:	f1bb 0f00 	cmp.w	fp, #0
 800ef5c:	bf0c      	ite	eq
 800ef5e:	2706      	moveq	r7, #6
 800ef60:	2700      	movne	r7, #0
 800ef62:	4638      	mov	r0, r7
 800ef64:	b00b      	add	sp, #44	; 0x2c
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	f10b 0b01 	add.w	fp, fp, #1
 800ef6e:	e78a      	b.n	800ee86 <__gethex+0x34>
 800ef70:	2500      	movs	r5, #0
 800ef72:	462c      	mov	r4, r5
 800ef74:	e7ae      	b.n	800eed4 <__gethex+0x82>
 800ef76:	463e      	mov	r6, r7
 800ef78:	2501      	movs	r5, #1
 800ef7a:	e7c7      	b.n	800ef0c <__gethex+0xba>
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	e7fb      	b.n	800ef78 <__gethex+0x126>
 800ef80:	f04f 0900 	mov.w	r9, #0
 800ef84:	1cb1      	adds	r1, r6, #2
 800ef86:	e7ce      	b.n	800ef26 <__gethex+0xd4>
 800ef88:	f04f 0901 	mov.w	r9, #1
 800ef8c:	e7fa      	b.n	800ef84 <__gethex+0x132>
 800ef8e:	230a      	movs	r3, #10
 800ef90:	fb03 0202 	mla	r2, r3, r2, r0
 800ef94:	3a10      	subs	r2, #16
 800ef96:	e7cf      	b.n	800ef38 <__gethex+0xe6>
 800ef98:	4631      	mov	r1, r6
 800ef9a:	e7da      	b.n	800ef52 <__gethex+0x100>
 800ef9c:	1bf3      	subs	r3, r6, r7
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	4629      	mov	r1, r5
 800efa2:	2b07      	cmp	r3, #7
 800efa4:	dc49      	bgt.n	800f03a <__gethex+0x1e8>
 800efa6:	9802      	ldr	r0, [sp, #8]
 800efa8:	f000 fadc 	bl	800f564 <_Balloc>
 800efac:	9b01      	ldr	r3, [sp, #4]
 800efae:	f100 0914 	add.w	r9, r0, #20
 800efb2:	f04f 0b00 	mov.w	fp, #0
 800efb6:	f1c3 0301 	rsb	r3, r3, #1
 800efba:	4605      	mov	r5, r0
 800efbc:	f8cd 9010 	str.w	r9, [sp, #16]
 800efc0:	46da      	mov	sl, fp
 800efc2:	9308      	str	r3, [sp, #32]
 800efc4:	42b7      	cmp	r7, r6
 800efc6:	d33b      	bcc.n	800f040 <__gethex+0x1ee>
 800efc8:	9804      	ldr	r0, [sp, #16]
 800efca:	f840 ab04 	str.w	sl, [r0], #4
 800efce:	eba0 0009 	sub.w	r0, r0, r9
 800efd2:	1080      	asrs	r0, r0, #2
 800efd4:	6128      	str	r0, [r5, #16]
 800efd6:	0147      	lsls	r7, r0, #5
 800efd8:	4650      	mov	r0, sl
 800efda:	f000 fb87 	bl	800f6ec <__hi0bits>
 800efde:	f8d8 6000 	ldr.w	r6, [r8]
 800efe2:	1a3f      	subs	r7, r7, r0
 800efe4:	42b7      	cmp	r7, r6
 800efe6:	dd64      	ble.n	800f0b2 <__gethex+0x260>
 800efe8:	1bbf      	subs	r7, r7, r6
 800efea:	4639      	mov	r1, r7
 800efec:	4628      	mov	r0, r5
 800efee:	f000 fe97 	bl	800fd20 <__any_on>
 800eff2:	4682      	mov	sl, r0
 800eff4:	b178      	cbz	r0, 800f016 <__gethex+0x1c4>
 800eff6:	1e7b      	subs	r3, r7, #1
 800eff8:	1159      	asrs	r1, r3, #5
 800effa:	f003 021f 	and.w	r2, r3, #31
 800effe:	f04f 0a01 	mov.w	sl, #1
 800f002:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f006:	fa0a f202 	lsl.w	r2, sl, r2
 800f00a:	420a      	tst	r2, r1
 800f00c:	d003      	beq.n	800f016 <__gethex+0x1c4>
 800f00e:	4553      	cmp	r3, sl
 800f010:	dc46      	bgt.n	800f0a0 <__gethex+0x24e>
 800f012:	f04f 0a02 	mov.w	sl, #2
 800f016:	4639      	mov	r1, r7
 800f018:	4628      	mov	r0, r5
 800f01a:	f7ff fecb 	bl	800edb4 <rshift>
 800f01e:	443c      	add	r4, r7
 800f020:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f024:	42a3      	cmp	r3, r4
 800f026:	da52      	bge.n	800f0ce <__gethex+0x27c>
 800f028:	4629      	mov	r1, r5
 800f02a:	9802      	ldr	r0, [sp, #8]
 800f02c:	f000 face 	bl	800f5cc <_Bfree>
 800f030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f032:	2300      	movs	r3, #0
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	27a3      	movs	r7, #163	; 0xa3
 800f038:	e793      	b.n	800ef62 <__gethex+0x110>
 800f03a:	3101      	adds	r1, #1
 800f03c:	105b      	asrs	r3, r3, #1
 800f03e:	e7b0      	b.n	800efa2 <__gethex+0x150>
 800f040:	1e73      	subs	r3, r6, #1
 800f042:	9305      	str	r3, [sp, #20]
 800f044:	9a07      	ldr	r2, [sp, #28]
 800f046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d018      	beq.n	800f080 <__gethex+0x22e>
 800f04e:	f1bb 0f20 	cmp.w	fp, #32
 800f052:	d107      	bne.n	800f064 <__gethex+0x212>
 800f054:	9b04      	ldr	r3, [sp, #16]
 800f056:	f8c3 a000 	str.w	sl, [r3]
 800f05a:	3304      	adds	r3, #4
 800f05c:	f04f 0a00 	mov.w	sl, #0
 800f060:	9304      	str	r3, [sp, #16]
 800f062:	46d3      	mov	fp, sl
 800f064:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f068:	f7ff fede 	bl	800ee28 <__hexdig_fun>
 800f06c:	f000 000f 	and.w	r0, r0, #15
 800f070:	fa00 f00b 	lsl.w	r0, r0, fp
 800f074:	ea4a 0a00 	orr.w	sl, sl, r0
 800f078:	f10b 0b04 	add.w	fp, fp, #4
 800f07c:	9b05      	ldr	r3, [sp, #20]
 800f07e:	e00d      	b.n	800f09c <__gethex+0x24a>
 800f080:	9b05      	ldr	r3, [sp, #20]
 800f082:	9a08      	ldr	r2, [sp, #32]
 800f084:	4413      	add	r3, r2
 800f086:	42bb      	cmp	r3, r7
 800f088:	d3e1      	bcc.n	800f04e <__gethex+0x1fc>
 800f08a:	4618      	mov	r0, r3
 800f08c:	9a01      	ldr	r2, [sp, #4]
 800f08e:	9903      	ldr	r1, [sp, #12]
 800f090:	9309      	str	r3, [sp, #36]	; 0x24
 800f092:	f7fd ff52 	bl	800cf3a <strncmp>
 800f096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f098:	2800      	cmp	r0, #0
 800f09a:	d1d8      	bne.n	800f04e <__gethex+0x1fc>
 800f09c:	461e      	mov	r6, r3
 800f09e:	e791      	b.n	800efc4 <__gethex+0x172>
 800f0a0:	1eb9      	subs	r1, r7, #2
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f000 fe3c 	bl	800fd20 <__any_on>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d0b2      	beq.n	800f012 <__gethex+0x1c0>
 800f0ac:	f04f 0a03 	mov.w	sl, #3
 800f0b0:	e7b1      	b.n	800f016 <__gethex+0x1c4>
 800f0b2:	da09      	bge.n	800f0c8 <__gethex+0x276>
 800f0b4:	1bf7      	subs	r7, r6, r7
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	463a      	mov	r2, r7
 800f0ba:	9802      	ldr	r0, [sp, #8]
 800f0bc:	f000 fc52 	bl	800f964 <__lshift>
 800f0c0:	1be4      	subs	r4, r4, r7
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	f100 0914 	add.w	r9, r0, #20
 800f0c8:	f04f 0a00 	mov.w	sl, #0
 800f0cc:	e7a8      	b.n	800f020 <__gethex+0x1ce>
 800f0ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f0d2:	42a0      	cmp	r0, r4
 800f0d4:	dd6a      	ble.n	800f1ac <__gethex+0x35a>
 800f0d6:	1b04      	subs	r4, r0, r4
 800f0d8:	42a6      	cmp	r6, r4
 800f0da:	dc2e      	bgt.n	800f13a <__gethex+0x2e8>
 800f0dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d022      	beq.n	800f12a <__gethex+0x2d8>
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d024      	beq.n	800f132 <__gethex+0x2e0>
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d115      	bne.n	800f118 <__gethex+0x2c6>
 800f0ec:	42a6      	cmp	r6, r4
 800f0ee:	d113      	bne.n	800f118 <__gethex+0x2c6>
 800f0f0:	2e01      	cmp	r6, #1
 800f0f2:	dc0b      	bgt.n	800f10c <__gethex+0x2ba>
 800f0f4:	9a06      	ldr	r2, [sp, #24]
 800f0f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	612b      	str	r3, [r5, #16]
 800f100:	f8c9 3000 	str.w	r3, [r9]
 800f104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f106:	2762      	movs	r7, #98	; 0x62
 800f108:	601d      	str	r5, [r3, #0]
 800f10a:	e72a      	b.n	800ef62 <__gethex+0x110>
 800f10c:	1e71      	subs	r1, r6, #1
 800f10e:	4628      	mov	r0, r5
 800f110:	f000 fe06 	bl	800fd20 <__any_on>
 800f114:	2800      	cmp	r0, #0
 800f116:	d1ed      	bne.n	800f0f4 <__gethex+0x2a2>
 800f118:	4629      	mov	r1, r5
 800f11a:	9802      	ldr	r0, [sp, #8]
 800f11c:	f000 fa56 	bl	800f5cc <_Bfree>
 800f120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f122:	2300      	movs	r3, #0
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	2750      	movs	r7, #80	; 0x50
 800f128:	e71b      	b.n	800ef62 <__gethex+0x110>
 800f12a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0e1      	beq.n	800f0f4 <__gethex+0x2a2>
 800f130:	e7f2      	b.n	800f118 <__gethex+0x2c6>
 800f132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1dd      	bne.n	800f0f4 <__gethex+0x2a2>
 800f138:	e7ee      	b.n	800f118 <__gethex+0x2c6>
 800f13a:	1e67      	subs	r7, r4, #1
 800f13c:	f1ba 0f00 	cmp.w	sl, #0
 800f140:	d131      	bne.n	800f1a6 <__gethex+0x354>
 800f142:	b127      	cbz	r7, 800f14e <__gethex+0x2fc>
 800f144:	4639      	mov	r1, r7
 800f146:	4628      	mov	r0, r5
 800f148:	f000 fdea 	bl	800fd20 <__any_on>
 800f14c:	4682      	mov	sl, r0
 800f14e:	117a      	asrs	r2, r7, #5
 800f150:	2301      	movs	r3, #1
 800f152:	f007 071f 	and.w	r7, r7, #31
 800f156:	fa03 f707 	lsl.w	r7, r3, r7
 800f15a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f15e:	4621      	mov	r1, r4
 800f160:	421f      	tst	r7, r3
 800f162:	4628      	mov	r0, r5
 800f164:	bf18      	it	ne
 800f166:	f04a 0a02 	orrne.w	sl, sl, #2
 800f16a:	1b36      	subs	r6, r6, r4
 800f16c:	f7ff fe22 	bl	800edb4 <rshift>
 800f170:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f174:	2702      	movs	r7, #2
 800f176:	f1ba 0f00 	cmp.w	sl, #0
 800f17a:	d048      	beq.n	800f20e <__gethex+0x3bc>
 800f17c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d015      	beq.n	800f1b0 <__gethex+0x35e>
 800f184:	2b03      	cmp	r3, #3
 800f186:	d017      	beq.n	800f1b8 <__gethex+0x366>
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d109      	bne.n	800f1a0 <__gethex+0x34e>
 800f18c:	f01a 0f02 	tst.w	sl, #2
 800f190:	d006      	beq.n	800f1a0 <__gethex+0x34e>
 800f192:	f8d9 3000 	ldr.w	r3, [r9]
 800f196:	ea4a 0a03 	orr.w	sl, sl, r3
 800f19a:	f01a 0f01 	tst.w	sl, #1
 800f19e:	d10e      	bne.n	800f1be <__gethex+0x36c>
 800f1a0:	f047 0710 	orr.w	r7, r7, #16
 800f1a4:	e033      	b.n	800f20e <__gethex+0x3bc>
 800f1a6:	f04f 0a01 	mov.w	sl, #1
 800f1aa:	e7d0      	b.n	800f14e <__gethex+0x2fc>
 800f1ac:	2701      	movs	r7, #1
 800f1ae:	e7e2      	b.n	800f176 <__gethex+0x324>
 800f1b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1b2:	f1c3 0301 	rsb	r3, r3, #1
 800f1b6:	9315      	str	r3, [sp, #84]	; 0x54
 800f1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d0f0      	beq.n	800f1a0 <__gethex+0x34e>
 800f1be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f1c2:	f105 0314 	add.w	r3, r5, #20
 800f1c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f1ca:	eb03 010a 	add.w	r1, r3, sl
 800f1ce:	f04f 0c00 	mov.w	ip, #0
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f1dc:	d01c      	beq.n	800f218 <__gethex+0x3c6>
 800f1de:	3201      	adds	r2, #1
 800f1e0:	6002      	str	r2, [r0, #0]
 800f1e2:	2f02      	cmp	r7, #2
 800f1e4:	f105 0314 	add.w	r3, r5, #20
 800f1e8:	d138      	bne.n	800f25c <__gethex+0x40a>
 800f1ea:	f8d8 2000 	ldr.w	r2, [r8]
 800f1ee:	3a01      	subs	r2, #1
 800f1f0:	42b2      	cmp	r2, r6
 800f1f2:	d10a      	bne.n	800f20a <__gethex+0x3b8>
 800f1f4:	1171      	asrs	r1, r6, #5
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f006 061f 	and.w	r6, r6, #31
 800f1fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f200:	fa02 f606 	lsl.w	r6, r2, r6
 800f204:	421e      	tst	r6, r3
 800f206:	bf18      	it	ne
 800f208:	4617      	movne	r7, r2
 800f20a:	f047 0720 	orr.w	r7, r7, #32
 800f20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f210:	601d      	str	r5, [r3, #0]
 800f212:	9b06      	ldr	r3, [sp, #24]
 800f214:	601c      	str	r4, [r3, #0]
 800f216:	e6a4      	b.n	800ef62 <__gethex+0x110>
 800f218:	4299      	cmp	r1, r3
 800f21a:	f843 cc04 	str.w	ip, [r3, #-4]
 800f21e:	d8d8      	bhi.n	800f1d2 <__gethex+0x380>
 800f220:	68ab      	ldr	r3, [r5, #8]
 800f222:	4599      	cmp	r9, r3
 800f224:	db12      	blt.n	800f24c <__gethex+0x3fa>
 800f226:	6869      	ldr	r1, [r5, #4]
 800f228:	9802      	ldr	r0, [sp, #8]
 800f22a:	3101      	adds	r1, #1
 800f22c:	f000 f99a 	bl	800f564 <_Balloc>
 800f230:	692a      	ldr	r2, [r5, #16]
 800f232:	3202      	adds	r2, #2
 800f234:	f105 010c 	add.w	r1, r5, #12
 800f238:	4683      	mov	fp, r0
 800f23a:	0092      	lsls	r2, r2, #2
 800f23c:	300c      	adds	r0, #12
 800f23e:	f7fc fe8f 	bl	800bf60 <memcpy>
 800f242:	4629      	mov	r1, r5
 800f244:	9802      	ldr	r0, [sp, #8]
 800f246:	f000 f9c1 	bl	800f5cc <_Bfree>
 800f24a:	465d      	mov	r5, fp
 800f24c:	692b      	ldr	r3, [r5, #16]
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f254:	612a      	str	r2, [r5, #16]
 800f256:	2201      	movs	r2, #1
 800f258:	615a      	str	r2, [r3, #20]
 800f25a:	e7c2      	b.n	800f1e2 <__gethex+0x390>
 800f25c:	692a      	ldr	r2, [r5, #16]
 800f25e:	454a      	cmp	r2, r9
 800f260:	dd0b      	ble.n	800f27a <__gethex+0x428>
 800f262:	2101      	movs	r1, #1
 800f264:	4628      	mov	r0, r5
 800f266:	f7ff fda5 	bl	800edb4 <rshift>
 800f26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f26e:	3401      	adds	r4, #1
 800f270:	42a3      	cmp	r3, r4
 800f272:	f6ff aed9 	blt.w	800f028 <__gethex+0x1d6>
 800f276:	2701      	movs	r7, #1
 800f278:	e7c7      	b.n	800f20a <__gethex+0x3b8>
 800f27a:	f016 061f 	ands.w	r6, r6, #31
 800f27e:	d0fa      	beq.n	800f276 <__gethex+0x424>
 800f280:	449a      	add	sl, r3
 800f282:	f1c6 0620 	rsb	r6, r6, #32
 800f286:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f28a:	f000 fa2f 	bl	800f6ec <__hi0bits>
 800f28e:	42b0      	cmp	r0, r6
 800f290:	dbe7      	blt.n	800f262 <__gethex+0x410>
 800f292:	e7f0      	b.n	800f276 <__gethex+0x424>

0800f294 <L_shift>:
 800f294:	f1c2 0208 	rsb	r2, r2, #8
 800f298:	0092      	lsls	r2, r2, #2
 800f29a:	b570      	push	{r4, r5, r6, lr}
 800f29c:	f1c2 0620 	rsb	r6, r2, #32
 800f2a0:	6843      	ldr	r3, [r0, #4]
 800f2a2:	6804      	ldr	r4, [r0, #0]
 800f2a4:	fa03 f506 	lsl.w	r5, r3, r6
 800f2a8:	432c      	orrs	r4, r5
 800f2aa:	40d3      	lsrs	r3, r2
 800f2ac:	6004      	str	r4, [r0, #0]
 800f2ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2b2:	4288      	cmp	r0, r1
 800f2b4:	d3f4      	bcc.n	800f2a0 <L_shift+0xc>
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}

0800f2b8 <__match>:
 800f2b8:	b530      	push	{r4, r5, lr}
 800f2ba:	6803      	ldr	r3, [r0, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2c2:	b914      	cbnz	r4, 800f2ca <__match+0x12>
 800f2c4:	6003      	str	r3, [r0, #0]
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	bd30      	pop	{r4, r5, pc}
 800f2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f2d2:	2d19      	cmp	r5, #25
 800f2d4:	bf98      	it	ls
 800f2d6:	3220      	addls	r2, #32
 800f2d8:	42a2      	cmp	r2, r4
 800f2da:	d0f0      	beq.n	800f2be <__match+0x6>
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e7f3      	b.n	800f2c8 <__match+0x10>

0800f2e0 <__hexnan>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	680b      	ldr	r3, [r1, #0]
 800f2e6:	6801      	ldr	r1, [r0, #0]
 800f2e8:	115f      	asrs	r7, r3, #5
 800f2ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f2ee:	f013 031f 	ands.w	r3, r3, #31
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	bf18      	it	ne
 800f2f6:	3704      	addne	r7, #4
 800f2f8:	2500      	movs	r5, #0
 800f2fa:	1f3e      	subs	r6, r7, #4
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	4690      	mov	r8, r2
 800f300:	9301      	str	r3, [sp, #4]
 800f302:	f847 5c04 	str.w	r5, [r7, #-4]
 800f306:	46b1      	mov	r9, r6
 800f308:	4634      	mov	r4, r6
 800f30a:	9502      	str	r5, [sp, #8]
 800f30c:	46ab      	mov	fp, r5
 800f30e:	784a      	ldrb	r2, [r1, #1]
 800f310:	1c4b      	adds	r3, r1, #1
 800f312:	9303      	str	r3, [sp, #12]
 800f314:	b342      	cbz	r2, 800f368 <__hexnan+0x88>
 800f316:	4610      	mov	r0, r2
 800f318:	9105      	str	r1, [sp, #20]
 800f31a:	9204      	str	r2, [sp, #16]
 800f31c:	f7ff fd84 	bl	800ee28 <__hexdig_fun>
 800f320:	2800      	cmp	r0, #0
 800f322:	d143      	bne.n	800f3ac <__hexnan+0xcc>
 800f324:	9a04      	ldr	r2, [sp, #16]
 800f326:	9905      	ldr	r1, [sp, #20]
 800f328:	2a20      	cmp	r2, #32
 800f32a:	d818      	bhi.n	800f35e <__hexnan+0x7e>
 800f32c:	9b02      	ldr	r3, [sp, #8]
 800f32e:	459b      	cmp	fp, r3
 800f330:	dd13      	ble.n	800f35a <__hexnan+0x7a>
 800f332:	454c      	cmp	r4, r9
 800f334:	d206      	bcs.n	800f344 <__hexnan+0x64>
 800f336:	2d07      	cmp	r5, #7
 800f338:	dc04      	bgt.n	800f344 <__hexnan+0x64>
 800f33a:	462a      	mov	r2, r5
 800f33c:	4649      	mov	r1, r9
 800f33e:	4620      	mov	r0, r4
 800f340:	f7ff ffa8 	bl	800f294 <L_shift>
 800f344:	4544      	cmp	r4, r8
 800f346:	d944      	bls.n	800f3d2 <__hexnan+0xf2>
 800f348:	2300      	movs	r3, #0
 800f34a:	f1a4 0904 	sub.w	r9, r4, #4
 800f34e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f352:	f8cd b008 	str.w	fp, [sp, #8]
 800f356:	464c      	mov	r4, r9
 800f358:	461d      	mov	r5, r3
 800f35a:	9903      	ldr	r1, [sp, #12]
 800f35c:	e7d7      	b.n	800f30e <__hexnan+0x2e>
 800f35e:	2a29      	cmp	r2, #41	; 0x29
 800f360:	d14a      	bne.n	800f3f8 <__hexnan+0x118>
 800f362:	3102      	adds	r1, #2
 800f364:	f8ca 1000 	str.w	r1, [sl]
 800f368:	f1bb 0f00 	cmp.w	fp, #0
 800f36c:	d044      	beq.n	800f3f8 <__hexnan+0x118>
 800f36e:	454c      	cmp	r4, r9
 800f370:	d206      	bcs.n	800f380 <__hexnan+0xa0>
 800f372:	2d07      	cmp	r5, #7
 800f374:	dc04      	bgt.n	800f380 <__hexnan+0xa0>
 800f376:	462a      	mov	r2, r5
 800f378:	4649      	mov	r1, r9
 800f37a:	4620      	mov	r0, r4
 800f37c:	f7ff ff8a 	bl	800f294 <L_shift>
 800f380:	4544      	cmp	r4, r8
 800f382:	d928      	bls.n	800f3d6 <__hexnan+0xf6>
 800f384:	4643      	mov	r3, r8
 800f386:	f854 2b04 	ldr.w	r2, [r4], #4
 800f38a:	f843 2b04 	str.w	r2, [r3], #4
 800f38e:	42a6      	cmp	r6, r4
 800f390:	d2f9      	bcs.n	800f386 <__hexnan+0xa6>
 800f392:	2200      	movs	r2, #0
 800f394:	f843 2b04 	str.w	r2, [r3], #4
 800f398:	429e      	cmp	r6, r3
 800f39a:	d2fb      	bcs.n	800f394 <__hexnan+0xb4>
 800f39c:	6833      	ldr	r3, [r6, #0]
 800f39e:	b91b      	cbnz	r3, 800f3a8 <__hexnan+0xc8>
 800f3a0:	4546      	cmp	r6, r8
 800f3a2:	d127      	bne.n	800f3f4 <__hexnan+0x114>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	6033      	str	r3, [r6, #0]
 800f3a8:	2005      	movs	r0, #5
 800f3aa:	e026      	b.n	800f3fa <__hexnan+0x11a>
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	2d08      	cmp	r5, #8
 800f3b0:	f10b 0b01 	add.w	fp, fp, #1
 800f3b4:	dd06      	ble.n	800f3c4 <__hexnan+0xe4>
 800f3b6:	4544      	cmp	r4, r8
 800f3b8:	d9cf      	bls.n	800f35a <__hexnan+0x7a>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3c0:	2501      	movs	r5, #1
 800f3c2:	3c04      	subs	r4, #4
 800f3c4:	6822      	ldr	r2, [r4, #0]
 800f3c6:	f000 000f 	and.w	r0, r0, #15
 800f3ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3ce:	6020      	str	r0, [r4, #0]
 800f3d0:	e7c3      	b.n	800f35a <__hexnan+0x7a>
 800f3d2:	2508      	movs	r5, #8
 800f3d4:	e7c1      	b.n	800f35a <__hexnan+0x7a>
 800f3d6:	9b01      	ldr	r3, [sp, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d0df      	beq.n	800f39c <__hexnan+0xbc>
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	f1c3 0320 	rsb	r3, r3, #32
 800f3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f3ec:	401a      	ands	r2, r3
 800f3ee:	f847 2c04 	str.w	r2, [r7, #-4]
 800f3f2:	e7d3      	b.n	800f39c <__hexnan+0xbc>
 800f3f4:	3e04      	subs	r6, #4
 800f3f6:	e7d1      	b.n	800f39c <__hexnan+0xbc>
 800f3f8:	2004      	movs	r0, #4
 800f3fa:	b007      	add	sp, #28
 800f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f400 <__locale_ctype_ptr_l>:
 800f400:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f404:	4770      	bx	lr
	...

0800f408 <__locale_ctype_ptr>:
 800f408:	4b04      	ldr	r3, [pc, #16]	; (800f41c <__locale_ctype_ptr+0x14>)
 800f40a:	4a05      	ldr	r2, [pc, #20]	; (800f420 <__locale_ctype_ptr+0x18>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	2b00      	cmp	r3, #0
 800f412:	bf08      	it	eq
 800f414:	4613      	moveq	r3, r2
 800f416:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800f41a:	4770      	bx	lr
 800f41c:	20000014 	.word	0x20000014
 800f420:	20000078 	.word	0x20000078

0800f424 <__localeconv_l>:
 800f424:	30f0      	adds	r0, #240	; 0xf0
 800f426:	4770      	bx	lr

0800f428 <_localeconv_r>:
 800f428:	4b04      	ldr	r3, [pc, #16]	; (800f43c <_localeconv_r+0x14>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6a18      	ldr	r0, [r3, #32]
 800f42e:	4b04      	ldr	r3, [pc, #16]	; (800f440 <_localeconv_r+0x18>)
 800f430:	2800      	cmp	r0, #0
 800f432:	bf08      	it	eq
 800f434:	4618      	moveq	r0, r3
 800f436:	30f0      	adds	r0, #240	; 0xf0
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	20000014 	.word	0x20000014
 800f440:	20000078 	.word	0x20000078

0800f444 <_lseek_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4c07      	ldr	r4, [pc, #28]	; (800f464 <_lseek_r+0x20>)
 800f448:	4605      	mov	r5, r0
 800f44a:	4608      	mov	r0, r1
 800f44c:	4611      	mov	r1, r2
 800f44e:	2200      	movs	r2, #0
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	f7f5 fc50 	bl	8004cf8 <_lseek>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_lseek_r+0x1e>
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_lseek_r+0x1e>
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	20002740 	.word	0x20002740

0800f468 <__swhatbuf_r>:
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	460e      	mov	r6, r1
 800f46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f470:	2900      	cmp	r1, #0
 800f472:	b096      	sub	sp, #88	; 0x58
 800f474:	4614      	mov	r4, r2
 800f476:	461d      	mov	r5, r3
 800f478:	da07      	bge.n	800f48a <__swhatbuf_r+0x22>
 800f47a:	2300      	movs	r3, #0
 800f47c:	602b      	str	r3, [r5, #0]
 800f47e:	89b3      	ldrh	r3, [r6, #12]
 800f480:	061a      	lsls	r2, r3, #24
 800f482:	d410      	bmi.n	800f4a6 <__swhatbuf_r+0x3e>
 800f484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f488:	e00e      	b.n	800f4a8 <__swhatbuf_r+0x40>
 800f48a:	466a      	mov	r2, sp
 800f48c:	f001 fcd2 	bl	8010e34 <_fstat_r>
 800f490:	2800      	cmp	r0, #0
 800f492:	dbf2      	blt.n	800f47a <__swhatbuf_r+0x12>
 800f494:	9a01      	ldr	r2, [sp, #4]
 800f496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f49a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f49e:	425a      	negs	r2, r3
 800f4a0:	415a      	adcs	r2, r3
 800f4a2:	602a      	str	r2, [r5, #0]
 800f4a4:	e7ee      	b.n	800f484 <__swhatbuf_r+0x1c>
 800f4a6:	2340      	movs	r3, #64	; 0x40
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	6023      	str	r3, [r4, #0]
 800f4ac:	b016      	add	sp, #88	; 0x58
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}

0800f4b0 <__smakebuf_r>:
 800f4b0:	898b      	ldrh	r3, [r1, #12]
 800f4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4b4:	079d      	lsls	r5, r3, #30
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	d507      	bpl.n	800f4cc <__smakebuf_r+0x1c>
 800f4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	6123      	str	r3, [r4, #16]
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	6163      	str	r3, [r4, #20]
 800f4c8:	b002      	add	sp, #8
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	ab01      	add	r3, sp, #4
 800f4ce:	466a      	mov	r2, sp
 800f4d0:	f7ff ffca 	bl	800f468 <__swhatbuf_r>
 800f4d4:	9900      	ldr	r1, [sp, #0]
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f000 fc9f 	bl	800fe1c <_malloc_r>
 800f4de:	b948      	cbnz	r0, 800f4f4 <__smakebuf_r+0x44>
 800f4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4e4:	059a      	lsls	r2, r3, #22
 800f4e6:	d4ef      	bmi.n	800f4c8 <__smakebuf_r+0x18>
 800f4e8:	f023 0303 	bic.w	r3, r3, #3
 800f4ec:	f043 0302 	orr.w	r3, r3, #2
 800f4f0:	81a3      	strh	r3, [r4, #12]
 800f4f2:	e7e3      	b.n	800f4bc <__smakebuf_r+0xc>
 800f4f4:	4b0d      	ldr	r3, [pc, #52]	; (800f52c <__smakebuf_r+0x7c>)
 800f4f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4f8:	89a3      	ldrh	r3, [r4, #12]
 800f4fa:	6020      	str	r0, [r4, #0]
 800f4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f500:	81a3      	strh	r3, [r4, #12]
 800f502:	9b00      	ldr	r3, [sp, #0]
 800f504:	6163      	str	r3, [r4, #20]
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	6120      	str	r0, [r4, #16]
 800f50a:	b15b      	cbz	r3, 800f524 <__smakebuf_r+0x74>
 800f50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f510:	4630      	mov	r0, r6
 800f512:	f001 fca1 	bl	8010e58 <_isatty_r>
 800f516:	b128      	cbz	r0, 800f524 <__smakebuf_r+0x74>
 800f518:	89a3      	ldrh	r3, [r4, #12]
 800f51a:	f023 0303 	bic.w	r3, r3, #3
 800f51e:	f043 0301 	orr.w	r3, r3, #1
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	89a3      	ldrh	r3, [r4, #12]
 800f526:	431d      	orrs	r5, r3
 800f528:	81a5      	strh	r5, [r4, #12]
 800f52a:	e7cd      	b.n	800f4c8 <__smakebuf_r+0x18>
 800f52c:	0800ec69 	.word	0x0800ec69

0800f530 <malloc>:
 800f530:	4b02      	ldr	r3, [pc, #8]	; (800f53c <malloc+0xc>)
 800f532:	4601      	mov	r1, r0
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f000 bc71 	b.w	800fe1c <_malloc_r>
 800f53a:	bf00      	nop
 800f53c:	20000014 	.word	0x20000014

0800f540 <__ascii_mbtowc>:
 800f540:	b082      	sub	sp, #8
 800f542:	b901      	cbnz	r1, 800f546 <__ascii_mbtowc+0x6>
 800f544:	a901      	add	r1, sp, #4
 800f546:	b142      	cbz	r2, 800f55a <__ascii_mbtowc+0x1a>
 800f548:	b14b      	cbz	r3, 800f55e <__ascii_mbtowc+0x1e>
 800f54a:	7813      	ldrb	r3, [r2, #0]
 800f54c:	600b      	str	r3, [r1, #0]
 800f54e:	7812      	ldrb	r2, [r2, #0]
 800f550:	1c10      	adds	r0, r2, #0
 800f552:	bf18      	it	ne
 800f554:	2001      	movne	r0, #1
 800f556:	b002      	add	sp, #8
 800f558:	4770      	bx	lr
 800f55a:	4610      	mov	r0, r2
 800f55c:	e7fb      	b.n	800f556 <__ascii_mbtowc+0x16>
 800f55e:	f06f 0001 	mvn.w	r0, #1
 800f562:	e7f8      	b.n	800f556 <__ascii_mbtowc+0x16>

0800f564 <_Balloc>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f568:	4604      	mov	r4, r0
 800f56a:	460e      	mov	r6, r1
 800f56c:	b93d      	cbnz	r5, 800f57e <_Balloc+0x1a>
 800f56e:	2010      	movs	r0, #16
 800f570:	f7ff ffde 	bl	800f530 <malloc>
 800f574:	6260      	str	r0, [r4, #36]	; 0x24
 800f576:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f57a:	6005      	str	r5, [r0, #0]
 800f57c:	60c5      	str	r5, [r0, #12]
 800f57e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f580:	68eb      	ldr	r3, [r5, #12]
 800f582:	b183      	cbz	r3, 800f5a6 <_Balloc+0x42>
 800f584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f58c:	b9b8      	cbnz	r0, 800f5be <_Balloc+0x5a>
 800f58e:	2101      	movs	r1, #1
 800f590:	fa01 f506 	lsl.w	r5, r1, r6
 800f594:	1d6a      	adds	r2, r5, #5
 800f596:	0092      	lsls	r2, r2, #2
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 fbe2 	bl	800fd62 <_calloc_r>
 800f59e:	b160      	cbz	r0, 800f5ba <_Balloc+0x56>
 800f5a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f5a4:	e00e      	b.n	800f5c4 <_Balloc+0x60>
 800f5a6:	2221      	movs	r2, #33	; 0x21
 800f5a8:	2104      	movs	r1, #4
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 fbd9 	bl	800fd62 <_calloc_r>
 800f5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5b2:	60e8      	str	r0, [r5, #12]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1e4      	bne.n	800f584 <_Balloc+0x20>
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}
 800f5be:	6802      	ldr	r2, [r0, #0]
 800f5c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5ca:	e7f7      	b.n	800f5bc <_Balloc+0x58>

0800f5cc <_Bfree>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	460d      	mov	r5, r1
 800f5d4:	b93c      	cbnz	r4, 800f5e6 <_Bfree+0x1a>
 800f5d6:	2010      	movs	r0, #16
 800f5d8:	f7ff ffaa 	bl	800f530 <malloc>
 800f5dc:	6270      	str	r0, [r6, #36]	; 0x24
 800f5de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5e2:	6004      	str	r4, [r0, #0]
 800f5e4:	60c4      	str	r4, [r0, #12]
 800f5e6:	b13d      	cbz	r5, 800f5f8 <_Bfree+0x2c>
 800f5e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f5ea:	686a      	ldr	r2, [r5, #4]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5f2:	6029      	str	r1, [r5, #0]
 800f5f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}

0800f5fa <__multadd>:
 800f5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fe:	690d      	ldr	r5, [r1, #16]
 800f600:	461f      	mov	r7, r3
 800f602:	4606      	mov	r6, r0
 800f604:	460c      	mov	r4, r1
 800f606:	f101 0c14 	add.w	ip, r1, #20
 800f60a:	2300      	movs	r3, #0
 800f60c:	f8dc 0000 	ldr.w	r0, [ip]
 800f610:	b281      	uxth	r1, r0
 800f612:	fb02 7101 	mla	r1, r2, r1, r7
 800f616:	0c0f      	lsrs	r7, r1, #16
 800f618:	0c00      	lsrs	r0, r0, #16
 800f61a:	fb02 7000 	mla	r0, r2, r0, r7
 800f61e:	b289      	uxth	r1, r1
 800f620:	3301      	adds	r3, #1
 800f622:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f626:	429d      	cmp	r5, r3
 800f628:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f62c:	f84c 1b04 	str.w	r1, [ip], #4
 800f630:	dcec      	bgt.n	800f60c <__multadd+0x12>
 800f632:	b1d7      	cbz	r7, 800f66a <__multadd+0x70>
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	42ab      	cmp	r3, r5
 800f638:	dc12      	bgt.n	800f660 <__multadd+0x66>
 800f63a:	6861      	ldr	r1, [r4, #4]
 800f63c:	4630      	mov	r0, r6
 800f63e:	3101      	adds	r1, #1
 800f640:	f7ff ff90 	bl	800f564 <_Balloc>
 800f644:	6922      	ldr	r2, [r4, #16]
 800f646:	3202      	adds	r2, #2
 800f648:	f104 010c 	add.w	r1, r4, #12
 800f64c:	4680      	mov	r8, r0
 800f64e:	0092      	lsls	r2, r2, #2
 800f650:	300c      	adds	r0, #12
 800f652:	f7fc fc85 	bl	800bf60 <memcpy>
 800f656:	4621      	mov	r1, r4
 800f658:	4630      	mov	r0, r6
 800f65a:	f7ff ffb7 	bl	800f5cc <_Bfree>
 800f65e:	4644      	mov	r4, r8
 800f660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f664:	3501      	adds	r5, #1
 800f666:	615f      	str	r7, [r3, #20]
 800f668:	6125      	str	r5, [r4, #16]
 800f66a:	4620      	mov	r0, r4
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f670 <__s2b>:
 800f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f674:	460c      	mov	r4, r1
 800f676:	4615      	mov	r5, r2
 800f678:	461f      	mov	r7, r3
 800f67a:	2209      	movs	r2, #9
 800f67c:	3308      	adds	r3, #8
 800f67e:	4606      	mov	r6, r0
 800f680:	fb93 f3f2 	sdiv	r3, r3, r2
 800f684:	2100      	movs	r1, #0
 800f686:	2201      	movs	r2, #1
 800f688:	429a      	cmp	r2, r3
 800f68a:	db20      	blt.n	800f6ce <__s2b+0x5e>
 800f68c:	4630      	mov	r0, r6
 800f68e:	f7ff ff69 	bl	800f564 <_Balloc>
 800f692:	9b08      	ldr	r3, [sp, #32]
 800f694:	6143      	str	r3, [r0, #20]
 800f696:	2d09      	cmp	r5, #9
 800f698:	f04f 0301 	mov.w	r3, #1
 800f69c:	6103      	str	r3, [r0, #16]
 800f69e:	dd19      	ble.n	800f6d4 <__s2b+0x64>
 800f6a0:	f104 0809 	add.w	r8, r4, #9
 800f6a4:	46c1      	mov	r9, r8
 800f6a6:	442c      	add	r4, r5
 800f6a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f6ac:	4601      	mov	r1, r0
 800f6ae:	3b30      	subs	r3, #48	; 0x30
 800f6b0:	220a      	movs	r2, #10
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f7ff ffa1 	bl	800f5fa <__multadd>
 800f6b8:	45a1      	cmp	r9, r4
 800f6ba:	d1f5      	bne.n	800f6a8 <__s2b+0x38>
 800f6bc:	eb08 0405 	add.w	r4, r8, r5
 800f6c0:	3c08      	subs	r4, #8
 800f6c2:	1b2d      	subs	r5, r5, r4
 800f6c4:	1963      	adds	r3, r4, r5
 800f6c6:	42bb      	cmp	r3, r7
 800f6c8:	db07      	blt.n	800f6da <__s2b+0x6a>
 800f6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ce:	0052      	lsls	r2, r2, #1
 800f6d0:	3101      	adds	r1, #1
 800f6d2:	e7d9      	b.n	800f688 <__s2b+0x18>
 800f6d4:	340a      	adds	r4, #10
 800f6d6:	2509      	movs	r5, #9
 800f6d8:	e7f3      	b.n	800f6c2 <__s2b+0x52>
 800f6da:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6de:	4601      	mov	r1, r0
 800f6e0:	3b30      	subs	r3, #48	; 0x30
 800f6e2:	220a      	movs	r2, #10
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff ff88 	bl	800f5fa <__multadd>
 800f6ea:	e7eb      	b.n	800f6c4 <__s2b+0x54>

0800f6ec <__hi0bits>:
 800f6ec:	0c02      	lsrs	r2, r0, #16
 800f6ee:	0412      	lsls	r2, r2, #16
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b9b2      	cbnz	r2, 800f722 <__hi0bits+0x36>
 800f6f4:	0403      	lsls	r3, r0, #16
 800f6f6:	2010      	movs	r0, #16
 800f6f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f6fc:	bf04      	itt	eq
 800f6fe:	021b      	lsleq	r3, r3, #8
 800f700:	3008      	addeq	r0, #8
 800f702:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f706:	bf04      	itt	eq
 800f708:	011b      	lsleq	r3, r3, #4
 800f70a:	3004      	addeq	r0, #4
 800f70c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f710:	bf04      	itt	eq
 800f712:	009b      	lsleq	r3, r3, #2
 800f714:	3002      	addeq	r0, #2
 800f716:	2b00      	cmp	r3, #0
 800f718:	db06      	blt.n	800f728 <__hi0bits+0x3c>
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	d503      	bpl.n	800f726 <__hi0bits+0x3a>
 800f71e:	3001      	adds	r0, #1
 800f720:	4770      	bx	lr
 800f722:	2000      	movs	r0, #0
 800f724:	e7e8      	b.n	800f6f8 <__hi0bits+0xc>
 800f726:	2020      	movs	r0, #32
 800f728:	4770      	bx	lr

0800f72a <__lo0bits>:
 800f72a:	6803      	ldr	r3, [r0, #0]
 800f72c:	f013 0207 	ands.w	r2, r3, #7
 800f730:	4601      	mov	r1, r0
 800f732:	d00b      	beq.n	800f74c <__lo0bits+0x22>
 800f734:	07da      	lsls	r2, r3, #31
 800f736:	d423      	bmi.n	800f780 <__lo0bits+0x56>
 800f738:	0798      	lsls	r0, r3, #30
 800f73a:	bf49      	itett	mi
 800f73c:	085b      	lsrmi	r3, r3, #1
 800f73e:	089b      	lsrpl	r3, r3, #2
 800f740:	2001      	movmi	r0, #1
 800f742:	600b      	strmi	r3, [r1, #0]
 800f744:	bf5c      	itt	pl
 800f746:	600b      	strpl	r3, [r1, #0]
 800f748:	2002      	movpl	r0, #2
 800f74a:	4770      	bx	lr
 800f74c:	b298      	uxth	r0, r3
 800f74e:	b9a8      	cbnz	r0, 800f77c <__lo0bits+0x52>
 800f750:	0c1b      	lsrs	r3, r3, #16
 800f752:	2010      	movs	r0, #16
 800f754:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f758:	bf04      	itt	eq
 800f75a:	0a1b      	lsreq	r3, r3, #8
 800f75c:	3008      	addeq	r0, #8
 800f75e:	071a      	lsls	r2, r3, #28
 800f760:	bf04      	itt	eq
 800f762:	091b      	lsreq	r3, r3, #4
 800f764:	3004      	addeq	r0, #4
 800f766:	079a      	lsls	r2, r3, #30
 800f768:	bf04      	itt	eq
 800f76a:	089b      	lsreq	r3, r3, #2
 800f76c:	3002      	addeq	r0, #2
 800f76e:	07da      	lsls	r2, r3, #31
 800f770:	d402      	bmi.n	800f778 <__lo0bits+0x4e>
 800f772:	085b      	lsrs	r3, r3, #1
 800f774:	d006      	beq.n	800f784 <__lo0bits+0x5a>
 800f776:	3001      	adds	r0, #1
 800f778:	600b      	str	r3, [r1, #0]
 800f77a:	4770      	bx	lr
 800f77c:	4610      	mov	r0, r2
 800f77e:	e7e9      	b.n	800f754 <__lo0bits+0x2a>
 800f780:	2000      	movs	r0, #0
 800f782:	4770      	bx	lr
 800f784:	2020      	movs	r0, #32
 800f786:	4770      	bx	lr

0800f788 <__i2b>:
 800f788:	b510      	push	{r4, lr}
 800f78a:	460c      	mov	r4, r1
 800f78c:	2101      	movs	r1, #1
 800f78e:	f7ff fee9 	bl	800f564 <_Balloc>
 800f792:	2201      	movs	r2, #1
 800f794:	6144      	str	r4, [r0, #20]
 800f796:	6102      	str	r2, [r0, #16]
 800f798:	bd10      	pop	{r4, pc}

0800f79a <__multiply>:
 800f79a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79e:	4614      	mov	r4, r2
 800f7a0:	690a      	ldr	r2, [r1, #16]
 800f7a2:	6923      	ldr	r3, [r4, #16]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	bfb8      	it	lt
 800f7a8:	460b      	movlt	r3, r1
 800f7aa:	4688      	mov	r8, r1
 800f7ac:	bfbc      	itt	lt
 800f7ae:	46a0      	movlt	r8, r4
 800f7b0:	461c      	movlt	r4, r3
 800f7b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7c2:	eb07 0609 	add.w	r6, r7, r9
 800f7c6:	42b3      	cmp	r3, r6
 800f7c8:	bfb8      	it	lt
 800f7ca:	3101      	addlt	r1, #1
 800f7cc:	f7ff feca 	bl	800f564 <_Balloc>
 800f7d0:	f100 0514 	add.w	r5, r0, #20
 800f7d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f7d8:	462b      	mov	r3, r5
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4573      	cmp	r3, lr
 800f7de:	d316      	bcc.n	800f80e <__multiply+0x74>
 800f7e0:	f104 0214 	add.w	r2, r4, #20
 800f7e4:	f108 0114 	add.w	r1, r8, #20
 800f7e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f7ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	9b00      	ldr	r3, [sp, #0]
 800f7f4:	9201      	str	r2, [sp, #4]
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d80c      	bhi.n	800f814 <__multiply+0x7a>
 800f7fa:	2e00      	cmp	r6, #0
 800f7fc:	dd03      	ble.n	800f806 <__multiply+0x6c>
 800f7fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f802:	2b00      	cmp	r3, #0
 800f804:	d05d      	beq.n	800f8c2 <__multiply+0x128>
 800f806:	6106      	str	r6, [r0, #16]
 800f808:	b003      	add	sp, #12
 800f80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80e:	f843 2b04 	str.w	r2, [r3], #4
 800f812:	e7e3      	b.n	800f7dc <__multiply+0x42>
 800f814:	f8b2 b000 	ldrh.w	fp, [r2]
 800f818:	f1bb 0f00 	cmp.w	fp, #0
 800f81c:	d023      	beq.n	800f866 <__multiply+0xcc>
 800f81e:	4689      	mov	r9, r1
 800f820:	46ac      	mov	ip, r5
 800f822:	f04f 0800 	mov.w	r8, #0
 800f826:	f859 4b04 	ldr.w	r4, [r9], #4
 800f82a:	f8dc a000 	ldr.w	sl, [ip]
 800f82e:	b2a3      	uxth	r3, r4
 800f830:	fa1f fa8a 	uxth.w	sl, sl
 800f834:	fb0b a303 	mla	r3, fp, r3, sl
 800f838:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f83c:	f8dc 4000 	ldr.w	r4, [ip]
 800f840:	4443      	add	r3, r8
 800f842:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f846:	fb0b 840a 	mla	r4, fp, sl, r8
 800f84a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f84e:	46e2      	mov	sl, ip
 800f850:	b29b      	uxth	r3, r3
 800f852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f856:	454f      	cmp	r7, r9
 800f858:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f85c:	f84a 3b04 	str.w	r3, [sl], #4
 800f860:	d82b      	bhi.n	800f8ba <__multiply+0x120>
 800f862:	f8cc 8004 	str.w	r8, [ip, #4]
 800f866:	9b01      	ldr	r3, [sp, #4]
 800f868:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f86c:	3204      	adds	r2, #4
 800f86e:	f1ba 0f00 	cmp.w	sl, #0
 800f872:	d020      	beq.n	800f8b6 <__multiply+0x11c>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	4689      	mov	r9, r1
 800f878:	46a8      	mov	r8, r5
 800f87a:	f04f 0b00 	mov.w	fp, #0
 800f87e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f882:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f886:	fb0a 440c 	mla	r4, sl, ip, r4
 800f88a:	445c      	add	r4, fp
 800f88c:	46c4      	mov	ip, r8
 800f88e:	b29b      	uxth	r3, r3
 800f890:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f894:	f84c 3b04 	str.w	r3, [ip], #4
 800f898:	f859 3b04 	ldr.w	r3, [r9], #4
 800f89c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f8a0:	0c1b      	lsrs	r3, r3, #16
 800f8a2:	fb0a b303 	mla	r3, sl, r3, fp
 800f8a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f8aa:	454f      	cmp	r7, r9
 800f8ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f8b0:	d805      	bhi.n	800f8be <__multiply+0x124>
 800f8b2:	f8c8 3004 	str.w	r3, [r8, #4]
 800f8b6:	3504      	adds	r5, #4
 800f8b8:	e79b      	b.n	800f7f2 <__multiply+0x58>
 800f8ba:	46d4      	mov	ip, sl
 800f8bc:	e7b3      	b.n	800f826 <__multiply+0x8c>
 800f8be:	46e0      	mov	r8, ip
 800f8c0:	e7dd      	b.n	800f87e <__multiply+0xe4>
 800f8c2:	3e01      	subs	r6, #1
 800f8c4:	e799      	b.n	800f7fa <__multiply+0x60>
	...

0800f8c8 <__pow5mult>:
 800f8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8cc:	4615      	mov	r5, r2
 800f8ce:	f012 0203 	ands.w	r2, r2, #3
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	460f      	mov	r7, r1
 800f8d6:	d007      	beq.n	800f8e8 <__pow5mult+0x20>
 800f8d8:	3a01      	subs	r2, #1
 800f8da:	4c21      	ldr	r4, [pc, #132]	; (800f960 <__pow5mult+0x98>)
 800f8dc:	2300      	movs	r3, #0
 800f8de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8e2:	f7ff fe8a 	bl	800f5fa <__multadd>
 800f8e6:	4607      	mov	r7, r0
 800f8e8:	10ad      	asrs	r5, r5, #2
 800f8ea:	d035      	beq.n	800f958 <__pow5mult+0x90>
 800f8ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8ee:	b93c      	cbnz	r4, 800f900 <__pow5mult+0x38>
 800f8f0:	2010      	movs	r0, #16
 800f8f2:	f7ff fe1d 	bl	800f530 <malloc>
 800f8f6:	6270      	str	r0, [r6, #36]	; 0x24
 800f8f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8fc:	6004      	str	r4, [r0, #0]
 800f8fe:	60c4      	str	r4, [r0, #12]
 800f900:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f908:	b94c      	cbnz	r4, 800f91e <__pow5mult+0x56>
 800f90a:	f240 2171 	movw	r1, #625	; 0x271
 800f90e:	4630      	mov	r0, r6
 800f910:	f7ff ff3a 	bl	800f788 <__i2b>
 800f914:	2300      	movs	r3, #0
 800f916:	f8c8 0008 	str.w	r0, [r8, #8]
 800f91a:	4604      	mov	r4, r0
 800f91c:	6003      	str	r3, [r0, #0]
 800f91e:	f04f 0800 	mov.w	r8, #0
 800f922:	07eb      	lsls	r3, r5, #31
 800f924:	d50a      	bpl.n	800f93c <__pow5mult+0x74>
 800f926:	4639      	mov	r1, r7
 800f928:	4622      	mov	r2, r4
 800f92a:	4630      	mov	r0, r6
 800f92c:	f7ff ff35 	bl	800f79a <__multiply>
 800f930:	4639      	mov	r1, r7
 800f932:	4681      	mov	r9, r0
 800f934:	4630      	mov	r0, r6
 800f936:	f7ff fe49 	bl	800f5cc <_Bfree>
 800f93a:	464f      	mov	r7, r9
 800f93c:	106d      	asrs	r5, r5, #1
 800f93e:	d00b      	beq.n	800f958 <__pow5mult+0x90>
 800f940:	6820      	ldr	r0, [r4, #0]
 800f942:	b938      	cbnz	r0, 800f954 <__pow5mult+0x8c>
 800f944:	4622      	mov	r2, r4
 800f946:	4621      	mov	r1, r4
 800f948:	4630      	mov	r0, r6
 800f94a:	f7ff ff26 	bl	800f79a <__multiply>
 800f94e:	6020      	str	r0, [r4, #0]
 800f950:	f8c0 8000 	str.w	r8, [r0]
 800f954:	4604      	mov	r4, r0
 800f956:	e7e4      	b.n	800f922 <__pow5mult+0x5a>
 800f958:	4638      	mov	r0, r7
 800f95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f95e:	bf00      	nop
 800f960:	080122f0 	.word	0x080122f0

0800f964 <__lshift>:
 800f964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f968:	460c      	mov	r4, r1
 800f96a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f96e:	6923      	ldr	r3, [r4, #16]
 800f970:	6849      	ldr	r1, [r1, #4]
 800f972:	eb0a 0903 	add.w	r9, sl, r3
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	4607      	mov	r7, r0
 800f97a:	4616      	mov	r6, r2
 800f97c:	f109 0501 	add.w	r5, r9, #1
 800f980:	42ab      	cmp	r3, r5
 800f982:	db32      	blt.n	800f9ea <__lshift+0x86>
 800f984:	4638      	mov	r0, r7
 800f986:	f7ff fded 	bl	800f564 <_Balloc>
 800f98a:	2300      	movs	r3, #0
 800f98c:	4680      	mov	r8, r0
 800f98e:	f100 0114 	add.w	r1, r0, #20
 800f992:	461a      	mov	r2, r3
 800f994:	4553      	cmp	r3, sl
 800f996:	db2b      	blt.n	800f9f0 <__lshift+0x8c>
 800f998:	6920      	ldr	r0, [r4, #16]
 800f99a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f99e:	f104 0314 	add.w	r3, r4, #20
 800f9a2:	f016 021f 	ands.w	r2, r6, #31
 800f9a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9ae:	d025      	beq.n	800f9fc <__lshift+0x98>
 800f9b0:	f1c2 0e20 	rsb	lr, r2, #32
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	681e      	ldr	r6, [r3, #0]
 800f9b8:	468a      	mov	sl, r1
 800f9ba:	4096      	lsls	r6, r2
 800f9bc:	4330      	orrs	r0, r6
 800f9be:	f84a 0b04 	str.w	r0, [sl], #4
 800f9c2:	f853 0b04 	ldr.w	r0, [r3], #4
 800f9c6:	459c      	cmp	ip, r3
 800f9c8:	fa20 f00e 	lsr.w	r0, r0, lr
 800f9cc:	d814      	bhi.n	800f9f8 <__lshift+0x94>
 800f9ce:	6048      	str	r0, [r1, #4]
 800f9d0:	b108      	cbz	r0, 800f9d6 <__lshift+0x72>
 800f9d2:	f109 0502 	add.w	r5, r9, #2
 800f9d6:	3d01      	subs	r5, #1
 800f9d8:	4638      	mov	r0, r7
 800f9da:	f8c8 5010 	str.w	r5, [r8, #16]
 800f9de:	4621      	mov	r1, r4
 800f9e0:	f7ff fdf4 	bl	800f5cc <_Bfree>
 800f9e4:	4640      	mov	r0, r8
 800f9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ea:	3101      	adds	r1, #1
 800f9ec:	005b      	lsls	r3, r3, #1
 800f9ee:	e7c7      	b.n	800f980 <__lshift+0x1c>
 800f9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	e7cd      	b.n	800f994 <__lshift+0x30>
 800f9f8:	4651      	mov	r1, sl
 800f9fa:	e7dc      	b.n	800f9b6 <__lshift+0x52>
 800f9fc:	3904      	subs	r1, #4
 800f9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa02:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa06:	459c      	cmp	ip, r3
 800fa08:	d8f9      	bhi.n	800f9fe <__lshift+0x9a>
 800fa0a:	e7e4      	b.n	800f9d6 <__lshift+0x72>

0800fa0c <__mcmp>:
 800fa0c:	6903      	ldr	r3, [r0, #16]
 800fa0e:	690a      	ldr	r2, [r1, #16]
 800fa10:	1a9b      	subs	r3, r3, r2
 800fa12:	b530      	push	{r4, r5, lr}
 800fa14:	d10c      	bne.n	800fa30 <__mcmp+0x24>
 800fa16:	0092      	lsls	r2, r2, #2
 800fa18:	3014      	adds	r0, #20
 800fa1a:	3114      	adds	r1, #20
 800fa1c:	1884      	adds	r4, r0, r2
 800fa1e:	4411      	add	r1, r2
 800fa20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa28:	4295      	cmp	r5, r2
 800fa2a:	d003      	beq.n	800fa34 <__mcmp+0x28>
 800fa2c:	d305      	bcc.n	800fa3a <__mcmp+0x2e>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	4618      	mov	r0, r3
 800fa32:	bd30      	pop	{r4, r5, pc}
 800fa34:	42a0      	cmp	r0, r4
 800fa36:	d3f3      	bcc.n	800fa20 <__mcmp+0x14>
 800fa38:	e7fa      	b.n	800fa30 <__mcmp+0x24>
 800fa3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3e:	e7f7      	b.n	800fa30 <__mcmp+0x24>

0800fa40 <__mdiff>:
 800fa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa44:	460d      	mov	r5, r1
 800fa46:	4607      	mov	r7, r0
 800fa48:	4611      	mov	r1, r2
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	4614      	mov	r4, r2
 800fa4e:	f7ff ffdd 	bl	800fa0c <__mcmp>
 800fa52:	1e06      	subs	r6, r0, #0
 800fa54:	d108      	bne.n	800fa68 <__mdiff+0x28>
 800fa56:	4631      	mov	r1, r6
 800fa58:	4638      	mov	r0, r7
 800fa5a:	f7ff fd83 	bl	800f564 <_Balloc>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa68:	bfa4      	itt	ge
 800fa6a:	4623      	movge	r3, r4
 800fa6c:	462c      	movge	r4, r5
 800fa6e:	4638      	mov	r0, r7
 800fa70:	6861      	ldr	r1, [r4, #4]
 800fa72:	bfa6      	itte	ge
 800fa74:	461d      	movge	r5, r3
 800fa76:	2600      	movge	r6, #0
 800fa78:	2601      	movlt	r6, #1
 800fa7a:	f7ff fd73 	bl	800f564 <_Balloc>
 800fa7e:	692b      	ldr	r3, [r5, #16]
 800fa80:	60c6      	str	r6, [r0, #12]
 800fa82:	6926      	ldr	r6, [r4, #16]
 800fa84:	f105 0914 	add.w	r9, r5, #20
 800fa88:	f104 0214 	add.w	r2, r4, #20
 800fa8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fa90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fa94:	f100 0514 	add.w	r5, r0, #20
 800fa98:	f04f 0e00 	mov.w	lr, #0
 800fa9c:	f852 ab04 	ldr.w	sl, [r2], #4
 800faa0:	f859 4b04 	ldr.w	r4, [r9], #4
 800faa4:	fa1e f18a 	uxtah	r1, lr, sl
 800faa8:	b2a3      	uxth	r3, r4
 800faaa:	1ac9      	subs	r1, r1, r3
 800faac:	0c23      	lsrs	r3, r4, #16
 800faae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fab2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fab6:	b289      	uxth	r1, r1
 800fab8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fabc:	45c8      	cmp	r8, r9
 800fabe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fac2:	4694      	mov	ip, r2
 800fac4:	f845 3b04 	str.w	r3, [r5], #4
 800fac8:	d8e8      	bhi.n	800fa9c <__mdiff+0x5c>
 800faca:	45bc      	cmp	ip, r7
 800facc:	d304      	bcc.n	800fad8 <__mdiff+0x98>
 800face:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fad2:	b183      	cbz	r3, 800faf6 <__mdiff+0xb6>
 800fad4:	6106      	str	r6, [r0, #16]
 800fad6:	e7c5      	b.n	800fa64 <__mdiff+0x24>
 800fad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fadc:	fa1e f381 	uxtah	r3, lr, r1
 800fae0:	141a      	asrs	r2, r3, #16
 800fae2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800faf0:	f845 3b04 	str.w	r3, [r5], #4
 800faf4:	e7e9      	b.n	800faca <__mdiff+0x8a>
 800faf6:	3e01      	subs	r6, #1
 800faf8:	e7e9      	b.n	800face <__mdiff+0x8e>
	...

0800fafc <__ulp>:
 800fafc:	4b12      	ldr	r3, [pc, #72]	; (800fb48 <__ulp+0x4c>)
 800fafe:	ee10 2a90 	vmov	r2, s1
 800fb02:	401a      	ands	r2, r3
 800fb04:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dd04      	ble.n	800fb16 <__ulp+0x1a>
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	4619      	mov	r1, r3
 800fb10:	ec41 0b10 	vmov	d0, r0, r1
 800fb14:	4770      	bx	lr
 800fb16:	425b      	negs	r3, r3
 800fb18:	151b      	asrs	r3, r3, #20
 800fb1a:	2b13      	cmp	r3, #19
 800fb1c:	f04f 0000 	mov.w	r0, #0
 800fb20:	f04f 0100 	mov.w	r1, #0
 800fb24:	dc04      	bgt.n	800fb30 <__ulp+0x34>
 800fb26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fb2a:	fa42 f103 	asr.w	r1, r2, r3
 800fb2e:	e7ef      	b.n	800fb10 <__ulp+0x14>
 800fb30:	3b14      	subs	r3, #20
 800fb32:	2b1e      	cmp	r3, #30
 800fb34:	f04f 0201 	mov.w	r2, #1
 800fb38:	bfda      	itte	le
 800fb3a:	f1c3 031f 	rsble	r3, r3, #31
 800fb3e:	fa02 f303 	lslle.w	r3, r2, r3
 800fb42:	4613      	movgt	r3, r2
 800fb44:	4618      	mov	r0, r3
 800fb46:	e7e3      	b.n	800fb10 <__ulp+0x14>
 800fb48:	7ff00000 	.word	0x7ff00000

0800fb4c <__b2d>:
 800fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4e:	6905      	ldr	r5, [r0, #16]
 800fb50:	f100 0714 	add.w	r7, r0, #20
 800fb54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb58:	1f2e      	subs	r6, r5, #4
 800fb5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff fdc4 	bl	800f6ec <__hi0bits>
 800fb64:	f1c0 0320 	rsb	r3, r0, #32
 800fb68:	280a      	cmp	r0, #10
 800fb6a:	600b      	str	r3, [r1, #0]
 800fb6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fbe4 <__b2d+0x98>
 800fb70:	dc14      	bgt.n	800fb9c <__b2d+0x50>
 800fb72:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb76:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb7a:	42b7      	cmp	r7, r6
 800fb7c:	ea41 030c 	orr.w	r3, r1, ip
 800fb80:	bf34      	ite	cc
 800fb82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb86:	2100      	movcs	r1, #0
 800fb88:	3015      	adds	r0, #21
 800fb8a:	fa04 f000 	lsl.w	r0, r4, r0
 800fb8e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb92:	ea40 0201 	orr.w	r2, r0, r1
 800fb96:	ec43 2b10 	vmov	d0, r2, r3
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9c:	42b7      	cmp	r7, r6
 800fb9e:	bf3a      	itte	cc
 800fba0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fba4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fba8:	2100      	movcs	r1, #0
 800fbaa:	380b      	subs	r0, #11
 800fbac:	d015      	beq.n	800fbda <__b2d+0x8e>
 800fbae:	4084      	lsls	r4, r0
 800fbb0:	f1c0 0520 	rsb	r5, r0, #32
 800fbb4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fbb8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fbbc:	42be      	cmp	r6, r7
 800fbbe:	fa21 fc05 	lsr.w	ip, r1, r5
 800fbc2:	ea44 030c 	orr.w	r3, r4, ip
 800fbc6:	bf8c      	ite	hi
 800fbc8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fbcc:	2400      	movls	r4, #0
 800fbce:	fa01 f000 	lsl.w	r0, r1, r0
 800fbd2:	40ec      	lsrs	r4, r5
 800fbd4:	ea40 0204 	orr.w	r2, r0, r4
 800fbd8:	e7dd      	b.n	800fb96 <__b2d+0x4a>
 800fbda:	ea44 030c 	orr.w	r3, r4, ip
 800fbde:	460a      	mov	r2, r1
 800fbe0:	e7d9      	b.n	800fb96 <__b2d+0x4a>
 800fbe2:	bf00      	nop
 800fbe4:	3ff00000 	.word	0x3ff00000

0800fbe8 <__d2b>:
 800fbe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbec:	460e      	mov	r6, r1
 800fbee:	2101      	movs	r1, #1
 800fbf0:	ec59 8b10 	vmov	r8, r9, d0
 800fbf4:	4615      	mov	r5, r2
 800fbf6:	f7ff fcb5 	bl	800f564 <_Balloc>
 800fbfa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fbfe:	4607      	mov	r7, r0
 800fc00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc04:	bb34      	cbnz	r4, 800fc54 <__d2b+0x6c>
 800fc06:	9301      	str	r3, [sp, #4]
 800fc08:	f1b8 0300 	subs.w	r3, r8, #0
 800fc0c:	d027      	beq.n	800fc5e <__d2b+0x76>
 800fc0e:	a802      	add	r0, sp, #8
 800fc10:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fc14:	f7ff fd89 	bl	800f72a <__lo0bits>
 800fc18:	9900      	ldr	r1, [sp, #0]
 800fc1a:	b1f0      	cbz	r0, 800fc5a <__d2b+0x72>
 800fc1c:	9a01      	ldr	r2, [sp, #4]
 800fc1e:	f1c0 0320 	rsb	r3, r0, #32
 800fc22:	fa02 f303 	lsl.w	r3, r2, r3
 800fc26:	430b      	orrs	r3, r1
 800fc28:	40c2      	lsrs	r2, r0
 800fc2a:	617b      	str	r3, [r7, #20]
 800fc2c:	9201      	str	r2, [sp, #4]
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	61bb      	str	r3, [r7, #24]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	bf14      	ite	ne
 800fc36:	2102      	movne	r1, #2
 800fc38:	2101      	moveq	r1, #1
 800fc3a:	6139      	str	r1, [r7, #16]
 800fc3c:	b1c4      	cbz	r4, 800fc70 <__d2b+0x88>
 800fc3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fc42:	4404      	add	r4, r0
 800fc44:	6034      	str	r4, [r6, #0]
 800fc46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc4a:	6028      	str	r0, [r5, #0]
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	b003      	add	sp, #12
 800fc50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc58:	e7d5      	b.n	800fc06 <__d2b+0x1e>
 800fc5a:	6179      	str	r1, [r7, #20]
 800fc5c:	e7e7      	b.n	800fc2e <__d2b+0x46>
 800fc5e:	a801      	add	r0, sp, #4
 800fc60:	f7ff fd63 	bl	800f72a <__lo0bits>
 800fc64:	9b01      	ldr	r3, [sp, #4]
 800fc66:	617b      	str	r3, [r7, #20]
 800fc68:	2101      	movs	r1, #1
 800fc6a:	6139      	str	r1, [r7, #16]
 800fc6c:	3020      	adds	r0, #32
 800fc6e:	e7e5      	b.n	800fc3c <__d2b+0x54>
 800fc70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fc74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc78:	6030      	str	r0, [r6, #0]
 800fc7a:	6918      	ldr	r0, [r3, #16]
 800fc7c:	f7ff fd36 	bl	800f6ec <__hi0bits>
 800fc80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fc84:	e7e1      	b.n	800fc4a <__d2b+0x62>

0800fc86 <__ratio>:
 800fc86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8a:	4688      	mov	r8, r1
 800fc8c:	4669      	mov	r1, sp
 800fc8e:	4681      	mov	r9, r0
 800fc90:	f7ff ff5c 	bl	800fb4c <__b2d>
 800fc94:	a901      	add	r1, sp, #4
 800fc96:	4640      	mov	r0, r8
 800fc98:	ec57 6b10 	vmov	r6, r7, d0
 800fc9c:	f7ff ff56 	bl	800fb4c <__b2d>
 800fca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fca4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fca8:	eba3 0c02 	sub.w	ip, r3, r2
 800fcac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcb0:	1a9b      	subs	r3, r3, r2
 800fcb2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fcb6:	ec5b ab10 	vmov	sl, fp, d0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	bfce      	itee	gt
 800fcbe:	463a      	movgt	r2, r7
 800fcc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcc4:	465a      	movle	r2, fp
 800fcc6:	4659      	mov	r1, fp
 800fcc8:	463d      	mov	r5, r7
 800fcca:	bfd4      	ite	le
 800fccc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fcd0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	ee10 2a10 	vmov	r2, s0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4629      	mov	r1, r5
 800fcde:	f7f0 fdcd 	bl	800087c <__aeabi_ddiv>
 800fce2:	ec41 0b10 	vmov	d0, r0, r1
 800fce6:	b003      	add	sp, #12
 800fce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcec <__copybits>:
 800fcec:	3901      	subs	r1, #1
 800fcee:	b510      	push	{r4, lr}
 800fcf0:	1149      	asrs	r1, r1, #5
 800fcf2:	6914      	ldr	r4, [r2, #16]
 800fcf4:	3101      	adds	r1, #1
 800fcf6:	f102 0314 	add.w	r3, r2, #20
 800fcfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	4602      	mov	r2, r0
 800fd06:	d303      	bcc.n	800fd10 <__copybits+0x24>
 800fd08:	2300      	movs	r3, #0
 800fd0a:	428a      	cmp	r2, r1
 800fd0c:	d305      	bcc.n	800fd1a <__copybits+0x2e>
 800fd0e:	bd10      	pop	{r4, pc}
 800fd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd14:	f840 2b04 	str.w	r2, [r0], #4
 800fd18:	e7f3      	b.n	800fd02 <__copybits+0x16>
 800fd1a:	f842 3b04 	str.w	r3, [r2], #4
 800fd1e:	e7f4      	b.n	800fd0a <__copybits+0x1e>

0800fd20 <__any_on>:
 800fd20:	f100 0214 	add.w	r2, r0, #20
 800fd24:	6900      	ldr	r0, [r0, #16]
 800fd26:	114b      	asrs	r3, r1, #5
 800fd28:	4298      	cmp	r0, r3
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	db11      	blt.n	800fd52 <__any_on+0x32>
 800fd2e:	dd0a      	ble.n	800fd46 <__any_on+0x26>
 800fd30:	f011 011f 	ands.w	r1, r1, #31
 800fd34:	d007      	beq.n	800fd46 <__any_on+0x26>
 800fd36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd3a:	fa24 f001 	lsr.w	r0, r4, r1
 800fd3e:	fa00 f101 	lsl.w	r1, r0, r1
 800fd42:	428c      	cmp	r4, r1
 800fd44:	d10b      	bne.n	800fd5e <__any_on+0x3e>
 800fd46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d803      	bhi.n	800fd56 <__any_on+0x36>
 800fd4e:	2000      	movs	r0, #0
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	4603      	mov	r3, r0
 800fd54:	e7f7      	b.n	800fd46 <__any_on+0x26>
 800fd56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd5a:	2900      	cmp	r1, #0
 800fd5c:	d0f5      	beq.n	800fd4a <__any_on+0x2a>
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7f6      	b.n	800fd50 <__any_on+0x30>

0800fd62 <_calloc_r>:
 800fd62:	b538      	push	{r3, r4, r5, lr}
 800fd64:	fb02 f401 	mul.w	r4, r2, r1
 800fd68:	4621      	mov	r1, r4
 800fd6a:	f000 f857 	bl	800fe1c <_malloc_r>
 800fd6e:	4605      	mov	r5, r0
 800fd70:	b118      	cbz	r0, 800fd7a <_calloc_r+0x18>
 800fd72:	4622      	mov	r2, r4
 800fd74:	2100      	movs	r1, #0
 800fd76:	f7fc f8fe 	bl	800bf76 <memset>
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fd80 <_free_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4605      	mov	r5, r0
 800fd84:	2900      	cmp	r1, #0
 800fd86:	d045      	beq.n	800fe14 <_free_r+0x94>
 800fd88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd8c:	1f0c      	subs	r4, r1, #4
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	bfb8      	it	lt
 800fd92:	18e4      	addlt	r4, r4, r3
 800fd94:	f001 f889 	bl	8010eaa <__malloc_lock>
 800fd98:	4a1f      	ldr	r2, [pc, #124]	; (800fe18 <_free_r+0x98>)
 800fd9a:	6813      	ldr	r3, [r2, #0]
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	b933      	cbnz	r3, 800fdae <_free_r+0x2e>
 800fda0:	6063      	str	r3, [r4, #4]
 800fda2:	6014      	str	r4, [r2, #0]
 800fda4:	4628      	mov	r0, r5
 800fda6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdaa:	f001 b87f 	b.w	8010eac <__malloc_unlock>
 800fdae:	42a3      	cmp	r3, r4
 800fdb0:	d90c      	bls.n	800fdcc <_free_r+0x4c>
 800fdb2:	6821      	ldr	r1, [r4, #0]
 800fdb4:	1862      	adds	r2, r4, r1
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	bf04      	itt	eq
 800fdba:	681a      	ldreq	r2, [r3, #0]
 800fdbc:	685b      	ldreq	r3, [r3, #4]
 800fdbe:	6063      	str	r3, [r4, #4]
 800fdc0:	bf04      	itt	eq
 800fdc2:	1852      	addeq	r2, r2, r1
 800fdc4:	6022      	streq	r2, [r4, #0]
 800fdc6:	6004      	str	r4, [r0, #0]
 800fdc8:	e7ec      	b.n	800fda4 <_free_r+0x24>
 800fdca:	4613      	mov	r3, r2
 800fdcc:	685a      	ldr	r2, [r3, #4]
 800fdce:	b10a      	cbz	r2, 800fdd4 <_free_r+0x54>
 800fdd0:	42a2      	cmp	r2, r4
 800fdd2:	d9fa      	bls.n	800fdca <_free_r+0x4a>
 800fdd4:	6819      	ldr	r1, [r3, #0]
 800fdd6:	1858      	adds	r0, r3, r1
 800fdd8:	42a0      	cmp	r0, r4
 800fdda:	d10b      	bne.n	800fdf4 <_free_r+0x74>
 800fddc:	6820      	ldr	r0, [r4, #0]
 800fdde:	4401      	add	r1, r0
 800fde0:	1858      	adds	r0, r3, r1
 800fde2:	4282      	cmp	r2, r0
 800fde4:	6019      	str	r1, [r3, #0]
 800fde6:	d1dd      	bne.n	800fda4 <_free_r+0x24>
 800fde8:	6810      	ldr	r0, [r2, #0]
 800fdea:	6852      	ldr	r2, [r2, #4]
 800fdec:	605a      	str	r2, [r3, #4]
 800fdee:	4401      	add	r1, r0
 800fdf0:	6019      	str	r1, [r3, #0]
 800fdf2:	e7d7      	b.n	800fda4 <_free_r+0x24>
 800fdf4:	d902      	bls.n	800fdfc <_free_r+0x7c>
 800fdf6:	230c      	movs	r3, #12
 800fdf8:	602b      	str	r3, [r5, #0]
 800fdfa:	e7d3      	b.n	800fda4 <_free_r+0x24>
 800fdfc:	6820      	ldr	r0, [r4, #0]
 800fdfe:	1821      	adds	r1, r4, r0
 800fe00:	428a      	cmp	r2, r1
 800fe02:	bf04      	itt	eq
 800fe04:	6811      	ldreq	r1, [r2, #0]
 800fe06:	6852      	ldreq	r2, [r2, #4]
 800fe08:	6062      	str	r2, [r4, #4]
 800fe0a:	bf04      	itt	eq
 800fe0c:	1809      	addeq	r1, r1, r0
 800fe0e:	6021      	streq	r1, [r4, #0]
 800fe10:	605c      	str	r4, [r3, #4]
 800fe12:	e7c7      	b.n	800fda4 <_free_r+0x24>
 800fe14:	bd38      	pop	{r3, r4, r5, pc}
 800fe16:	bf00      	nop
 800fe18:	20000ce8 	.word	0x20000ce8

0800fe1c <_malloc_r>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	1ccd      	adds	r5, r1, #3
 800fe20:	f025 0503 	bic.w	r5, r5, #3
 800fe24:	3508      	adds	r5, #8
 800fe26:	2d0c      	cmp	r5, #12
 800fe28:	bf38      	it	cc
 800fe2a:	250c      	movcc	r5, #12
 800fe2c:	2d00      	cmp	r5, #0
 800fe2e:	4606      	mov	r6, r0
 800fe30:	db01      	blt.n	800fe36 <_malloc_r+0x1a>
 800fe32:	42a9      	cmp	r1, r5
 800fe34:	d903      	bls.n	800fe3e <_malloc_r+0x22>
 800fe36:	230c      	movs	r3, #12
 800fe38:	6033      	str	r3, [r6, #0]
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	bd70      	pop	{r4, r5, r6, pc}
 800fe3e:	f001 f834 	bl	8010eaa <__malloc_lock>
 800fe42:	4a21      	ldr	r2, [pc, #132]	; (800fec8 <_malloc_r+0xac>)
 800fe44:	6814      	ldr	r4, [r2, #0]
 800fe46:	4621      	mov	r1, r4
 800fe48:	b991      	cbnz	r1, 800fe70 <_malloc_r+0x54>
 800fe4a:	4c20      	ldr	r4, [pc, #128]	; (800fecc <_malloc_r+0xb0>)
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	b91b      	cbnz	r3, 800fe58 <_malloc_r+0x3c>
 800fe50:	4630      	mov	r0, r6
 800fe52:	f000 fe19 	bl	8010a88 <_sbrk_r>
 800fe56:	6020      	str	r0, [r4, #0]
 800fe58:	4629      	mov	r1, r5
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f000 fe14 	bl	8010a88 <_sbrk_r>
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	d124      	bne.n	800feae <_malloc_r+0x92>
 800fe64:	230c      	movs	r3, #12
 800fe66:	6033      	str	r3, [r6, #0]
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f001 f81f 	bl	8010eac <__malloc_unlock>
 800fe6e:	e7e4      	b.n	800fe3a <_malloc_r+0x1e>
 800fe70:	680b      	ldr	r3, [r1, #0]
 800fe72:	1b5b      	subs	r3, r3, r5
 800fe74:	d418      	bmi.n	800fea8 <_malloc_r+0x8c>
 800fe76:	2b0b      	cmp	r3, #11
 800fe78:	d90f      	bls.n	800fe9a <_malloc_r+0x7e>
 800fe7a:	600b      	str	r3, [r1, #0]
 800fe7c:	50cd      	str	r5, [r1, r3]
 800fe7e:	18cc      	adds	r4, r1, r3
 800fe80:	4630      	mov	r0, r6
 800fe82:	f001 f813 	bl	8010eac <__malloc_unlock>
 800fe86:	f104 000b 	add.w	r0, r4, #11
 800fe8a:	1d23      	adds	r3, r4, #4
 800fe8c:	f020 0007 	bic.w	r0, r0, #7
 800fe90:	1ac3      	subs	r3, r0, r3
 800fe92:	d0d3      	beq.n	800fe3c <_malloc_r+0x20>
 800fe94:	425a      	negs	r2, r3
 800fe96:	50e2      	str	r2, [r4, r3]
 800fe98:	e7d0      	b.n	800fe3c <_malloc_r+0x20>
 800fe9a:	428c      	cmp	r4, r1
 800fe9c:	684b      	ldr	r3, [r1, #4]
 800fe9e:	bf16      	itet	ne
 800fea0:	6063      	strne	r3, [r4, #4]
 800fea2:	6013      	streq	r3, [r2, #0]
 800fea4:	460c      	movne	r4, r1
 800fea6:	e7eb      	b.n	800fe80 <_malloc_r+0x64>
 800fea8:	460c      	mov	r4, r1
 800feaa:	6849      	ldr	r1, [r1, #4]
 800feac:	e7cc      	b.n	800fe48 <_malloc_r+0x2c>
 800feae:	1cc4      	adds	r4, r0, #3
 800feb0:	f024 0403 	bic.w	r4, r4, #3
 800feb4:	42a0      	cmp	r0, r4
 800feb6:	d005      	beq.n	800fec4 <_malloc_r+0xa8>
 800feb8:	1a21      	subs	r1, r4, r0
 800feba:	4630      	mov	r0, r6
 800febc:	f000 fde4 	bl	8010a88 <_sbrk_r>
 800fec0:	3001      	adds	r0, #1
 800fec2:	d0cf      	beq.n	800fe64 <_malloc_r+0x48>
 800fec4:	6025      	str	r5, [r4, #0]
 800fec6:	e7db      	b.n	800fe80 <_malloc_r+0x64>
 800fec8:	20000ce8 	.word	0x20000ce8
 800fecc:	20000cec 	.word	0x20000cec

0800fed0 <__ssputs_r>:
 800fed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed4:	688e      	ldr	r6, [r1, #8]
 800fed6:	429e      	cmp	r6, r3
 800fed8:	4682      	mov	sl, r0
 800feda:	460c      	mov	r4, r1
 800fedc:	4690      	mov	r8, r2
 800fede:	4699      	mov	r9, r3
 800fee0:	d837      	bhi.n	800ff52 <__ssputs_r+0x82>
 800fee2:	898a      	ldrh	r2, [r1, #12]
 800fee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fee8:	d031      	beq.n	800ff4e <__ssputs_r+0x7e>
 800feea:	6825      	ldr	r5, [r4, #0]
 800feec:	6909      	ldr	r1, [r1, #16]
 800feee:	1a6f      	subs	r7, r5, r1
 800fef0:	6965      	ldr	r5, [r4, #20]
 800fef2:	2302      	movs	r3, #2
 800fef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fef8:	fb95 f5f3 	sdiv	r5, r5, r3
 800fefc:	f109 0301 	add.w	r3, r9, #1
 800ff00:	443b      	add	r3, r7
 800ff02:	429d      	cmp	r5, r3
 800ff04:	bf38      	it	cc
 800ff06:	461d      	movcc	r5, r3
 800ff08:	0553      	lsls	r3, r2, #21
 800ff0a:	d530      	bpl.n	800ff6e <__ssputs_r+0x9e>
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	f7ff ff85 	bl	800fe1c <_malloc_r>
 800ff12:	4606      	mov	r6, r0
 800ff14:	b950      	cbnz	r0, 800ff2c <__ssputs_r+0x5c>
 800ff16:	230c      	movs	r3, #12
 800ff18:	f8ca 3000 	str.w	r3, [sl]
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff22:	81a3      	strh	r3, [r4, #12]
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295
 800ff28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2c:	463a      	mov	r2, r7
 800ff2e:	6921      	ldr	r1, [r4, #16]
 800ff30:	f7fc f816 	bl	800bf60 <memcpy>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff3e:	81a3      	strh	r3, [r4, #12]
 800ff40:	6126      	str	r6, [r4, #16]
 800ff42:	6165      	str	r5, [r4, #20]
 800ff44:	443e      	add	r6, r7
 800ff46:	1bed      	subs	r5, r5, r7
 800ff48:	6026      	str	r6, [r4, #0]
 800ff4a:	60a5      	str	r5, [r4, #8]
 800ff4c:	464e      	mov	r6, r9
 800ff4e:	454e      	cmp	r6, r9
 800ff50:	d900      	bls.n	800ff54 <__ssputs_r+0x84>
 800ff52:	464e      	mov	r6, r9
 800ff54:	4632      	mov	r2, r6
 800ff56:	4641      	mov	r1, r8
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	f000 ff8d 	bl	8010e78 <memmove>
 800ff5e:	68a3      	ldr	r3, [r4, #8]
 800ff60:	1b9b      	subs	r3, r3, r6
 800ff62:	60a3      	str	r3, [r4, #8]
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	441e      	add	r6, r3
 800ff68:	6026      	str	r6, [r4, #0]
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	e7dc      	b.n	800ff28 <__ssputs_r+0x58>
 800ff6e:	462a      	mov	r2, r5
 800ff70:	f000 ff9d 	bl	8010eae <_realloc_r>
 800ff74:	4606      	mov	r6, r0
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d1e2      	bne.n	800ff40 <__ssputs_r+0x70>
 800ff7a:	6921      	ldr	r1, [r4, #16]
 800ff7c:	4650      	mov	r0, sl
 800ff7e:	f7ff feff 	bl	800fd80 <_free_r>
 800ff82:	e7c8      	b.n	800ff16 <__ssputs_r+0x46>

0800ff84 <_svfiprintf_r>:
 800ff84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff88:	461d      	mov	r5, r3
 800ff8a:	898b      	ldrh	r3, [r1, #12]
 800ff8c:	061f      	lsls	r7, r3, #24
 800ff8e:	b09d      	sub	sp, #116	; 0x74
 800ff90:	4680      	mov	r8, r0
 800ff92:	460c      	mov	r4, r1
 800ff94:	4616      	mov	r6, r2
 800ff96:	d50f      	bpl.n	800ffb8 <_svfiprintf_r+0x34>
 800ff98:	690b      	ldr	r3, [r1, #16]
 800ff9a:	b96b      	cbnz	r3, 800ffb8 <_svfiprintf_r+0x34>
 800ff9c:	2140      	movs	r1, #64	; 0x40
 800ff9e:	f7ff ff3d 	bl	800fe1c <_malloc_r>
 800ffa2:	6020      	str	r0, [r4, #0]
 800ffa4:	6120      	str	r0, [r4, #16]
 800ffa6:	b928      	cbnz	r0, 800ffb4 <_svfiprintf_r+0x30>
 800ffa8:	230c      	movs	r3, #12
 800ffaa:	f8c8 3000 	str.w	r3, [r8]
 800ffae:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb2:	e0c8      	b.n	8010146 <_svfiprintf_r+0x1c2>
 800ffb4:	2340      	movs	r3, #64	; 0x40
 800ffb6:	6163      	str	r3, [r4, #20]
 800ffb8:	2300      	movs	r3, #0
 800ffba:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbc:	2320      	movs	r3, #32
 800ffbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffc2:	2330      	movs	r3, #48	; 0x30
 800ffc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffc8:	9503      	str	r5, [sp, #12]
 800ffca:	f04f 0b01 	mov.w	fp, #1
 800ffce:	4637      	mov	r7, r6
 800ffd0:	463d      	mov	r5, r7
 800ffd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ffd6:	b10b      	cbz	r3, 800ffdc <_svfiprintf_r+0x58>
 800ffd8:	2b25      	cmp	r3, #37	; 0x25
 800ffda:	d13e      	bne.n	801005a <_svfiprintf_r+0xd6>
 800ffdc:	ebb7 0a06 	subs.w	sl, r7, r6
 800ffe0:	d00b      	beq.n	800fffa <_svfiprintf_r+0x76>
 800ffe2:	4653      	mov	r3, sl
 800ffe4:	4632      	mov	r2, r6
 800ffe6:	4621      	mov	r1, r4
 800ffe8:	4640      	mov	r0, r8
 800ffea:	f7ff ff71 	bl	800fed0 <__ssputs_r>
 800ffee:	3001      	adds	r0, #1
 800fff0:	f000 80a4 	beq.w	801013c <_svfiprintf_r+0x1b8>
 800fff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fff6:	4453      	add	r3, sl
 800fff8:	9309      	str	r3, [sp, #36]	; 0x24
 800fffa:	783b      	ldrb	r3, [r7, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	f000 809d 	beq.w	801013c <_svfiprintf_r+0x1b8>
 8010002:	2300      	movs	r3, #0
 8010004:	f04f 32ff 	mov.w	r2, #4294967295
 8010008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	9307      	str	r3, [sp, #28]
 8010010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010014:	931a      	str	r3, [sp, #104]	; 0x68
 8010016:	462f      	mov	r7, r5
 8010018:	2205      	movs	r2, #5
 801001a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801001e:	4850      	ldr	r0, [pc, #320]	; (8010160 <_svfiprintf_r+0x1dc>)
 8010020:	f7f0 f8f6 	bl	8000210 <memchr>
 8010024:	9b04      	ldr	r3, [sp, #16]
 8010026:	b9d0      	cbnz	r0, 801005e <_svfiprintf_r+0xda>
 8010028:	06d9      	lsls	r1, r3, #27
 801002a:	bf44      	itt	mi
 801002c:	2220      	movmi	r2, #32
 801002e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010032:	071a      	lsls	r2, r3, #28
 8010034:	bf44      	itt	mi
 8010036:	222b      	movmi	r2, #43	; 0x2b
 8010038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801003c:	782a      	ldrb	r2, [r5, #0]
 801003e:	2a2a      	cmp	r2, #42	; 0x2a
 8010040:	d015      	beq.n	801006e <_svfiprintf_r+0xea>
 8010042:	9a07      	ldr	r2, [sp, #28]
 8010044:	462f      	mov	r7, r5
 8010046:	2000      	movs	r0, #0
 8010048:	250a      	movs	r5, #10
 801004a:	4639      	mov	r1, r7
 801004c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010050:	3b30      	subs	r3, #48	; 0x30
 8010052:	2b09      	cmp	r3, #9
 8010054:	d94d      	bls.n	80100f2 <_svfiprintf_r+0x16e>
 8010056:	b1b8      	cbz	r0, 8010088 <_svfiprintf_r+0x104>
 8010058:	e00f      	b.n	801007a <_svfiprintf_r+0xf6>
 801005a:	462f      	mov	r7, r5
 801005c:	e7b8      	b.n	800ffd0 <_svfiprintf_r+0x4c>
 801005e:	4a40      	ldr	r2, [pc, #256]	; (8010160 <_svfiprintf_r+0x1dc>)
 8010060:	1a80      	subs	r0, r0, r2
 8010062:	fa0b f000 	lsl.w	r0, fp, r0
 8010066:	4318      	orrs	r0, r3
 8010068:	9004      	str	r0, [sp, #16]
 801006a:	463d      	mov	r5, r7
 801006c:	e7d3      	b.n	8010016 <_svfiprintf_r+0x92>
 801006e:	9a03      	ldr	r2, [sp, #12]
 8010070:	1d11      	adds	r1, r2, #4
 8010072:	6812      	ldr	r2, [r2, #0]
 8010074:	9103      	str	r1, [sp, #12]
 8010076:	2a00      	cmp	r2, #0
 8010078:	db01      	blt.n	801007e <_svfiprintf_r+0xfa>
 801007a:	9207      	str	r2, [sp, #28]
 801007c:	e004      	b.n	8010088 <_svfiprintf_r+0x104>
 801007e:	4252      	negs	r2, r2
 8010080:	f043 0302 	orr.w	r3, r3, #2
 8010084:	9207      	str	r2, [sp, #28]
 8010086:	9304      	str	r3, [sp, #16]
 8010088:	783b      	ldrb	r3, [r7, #0]
 801008a:	2b2e      	cmp	r3, #46	; 0x2e
 801008c:	d10c      	bne.n	80100a8 <_svfiprintf_r+0x124>
 801008e:	787b      	ldrb	r3, [r7, #1]
 8010090:	2b2a      	cmp	r3, #42	; 0x2a
 8010092:	d133      	bne.n	80100fc <_svfiprintf_r+0x178>
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	1d1a      	adds	r2, r3, #4
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	9203      	str	r2, [sp, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	bfb8      	it	lt
 80100a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80100a4:	3702      	adds	r7, #2
 80100a6:	9305      	str	r3, [sp, #20]
 80100a8:	4d2e      	ldr	r5, [pc, #184]	; (8010164 <_svfiprintf_r+0x1e0>)
 80100aa:	7839      	ldrb	r1, [r7, #0]
 80100ac:	2203      	movs	r2, #3
 80100ae:	4628      	mov	r0, r5
 80100b0:	f7f0 f8ae 	bl	8000210 <memchr>
 80100b4:	b138      	cbz	r0, 80100c6 <_svfiprintf_r+0x142>
 80100b6:	2340      	movs	r3, #64	; 0x40
 80100b8:	1b40      	subs	r0, r0, r5
 80100ba:	fa03 f000 	lsl.w	r0, r3, r0
 80100be:	9b04      	ldr	r3, [sp, #16]
 80100c0:	4303      	orrs	r3, r0
 80100c2:	3701      	adds	r7, #1
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	7839      	ldrb	r1, [r7, #0]
 80100c8:	4827      	ldr	r0, [pc, #156]	; (8010168 <_svfiprintf_r+0x1e4>)
 80100ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100ce:	2206      	movs	r2, #6
 80100d0:	1c7e      	adds	r6, r7, #1
 80100d2:	f7f0 f89d 	bl	8000210 <memchr>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d038      	beq.n	801014c <_svfiprintf_r+0x1c8>
 80100da:	4b24      	ldr	r3, [pc, #144]	; (801016c <_svfiprintf_r+0x1e8>)
 80100dc:	bb13      	cbnz	r3, 8010124 <_svfiprintf_r+0x1a0>
 80100de:	9b03      	ldr	r3, [sp, #12]
 80100e0:	3307      	adds	r3, #7
 80100e2:	f023 0307 	bic.w	r3, r3, #7
 80100e6:	3308      	adds	r3, #8
 80100e8:	9303      	str	r3, [sp, #12]
 80100ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ec:	444b      	add	r3, r9
 80100ee:	9309      	str	r3, [sp, #36]	; 0x24
 80100f0:	e76d      	b.n	800ffce <_svfiprintf_r+0x4a>
 80100f2:	fb05 3202 	mla	r2, r5, r2, r3
 80100f6:	2001      	movs	r0, #1
 80100f8:	460f      	mov	r7, r1
 80100fa:	e7a6      	b.n	801004a <_svfiprintf_r+0xc6>
 80100fc:	2300      	movs	r3, #0
 80100fe:	3701      	adds	r7, #1
 8010100:	9305      	str	r3, [sp, #20]
 8010102:	4619      	mov	r1, r3
 8010104:	250a      	movs	r5, #10
 8010106:	4638      	mov	r0, r7
 8010108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801010c:	3a30      	subs	r2, #48	; 0x30
 801010e:	2a09      	cmp	r2, #9
 8010110:	d903      	bls.n	801011a <_svfiprintf_r+0x196>
 8010112:	2b00      	cmp	r3, #0
 8010114:	d0c8      	beq.n	80100a8 <_svfiprintf_r+0x124>
 8010116:	9105      	str	r1, [sp, #20]
 8010118:	e7c6      	b.n	80100a8 <_svfiprintf_r+0x124>
 801011a:	fb05 2101 	mla	r1, r5, r1, r2
 801011e:	2301      	movs	r3, #1
 8010120:	4607      	mov	r7, r0
 8010122:	e7f0      	b.n	8010106 <_svfiprintf_r+0x182>
 8010124:	ab03      	add	r3, sp, #12
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4622      	mov	r2, r4
 801012a:	4b11      	ldr	r3, [pc, #68]	; (8010170 <_svfiprintf_r+0x1ec>)
 801012c:	a904      	add	r1, sp, #16
 801012e:	4640      	mov	r0, r8
 8010130:	f7fb ffbe 	bl	800c0b0 <_printf_float>
 8010134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010138:	4681      	mov	r9, r0
 801013a:	d1d6      	bne.n	80100ea <_svfiprintf_r+0x166>
 801013c:	89a3      	ldrh	r3, [r4, #12]
 801013e:	065b      	lsls	r3, r3, #25
 8010140:	f53f af35 	bmi.w	800ffae <_svfiprintf_r+0x2a>
 8010144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010146:	b01d      	add	sp, #116	; 0x74
 8010148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014c:	ab03      	add	r3, sp, #12
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	4622      	mov	r2, r4
 8010152:	4b07      	ldr	r3, [pc, #28]	; (8010170 <_svfiprintf_r+0x1ec>)
 8010154:	a904      	add	r1, sp, #16
 8010156:	4640      	mov	r0, r8
 8010158:	f7fc fa60 	bl	800c61c <_printf_i>
 801015c:	e7ea      	b.n	8010134 <_svfiprintf_r+0x1b0>
 801015e:	bf00      	nop
 8010160:	080122fc 	.word	0x080122fc
 8010164:	08012302 	.word	0x08012302
 8010168:	08012306 	.word	0x08012306
 801016c:	0800c0b1 	.word	0x0800c0b1
 8010170:	0800fed1 	.word	0x0800fed1

08010174 <_sungetc_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	1c4b      	adds	r3, r1, #1
 8010178:	4614      	mov	r4, r2
 801017a:	d103      	bne.n	8010184 <_sungetc_r+0x10>
 801017c:	f04f 35ff 	mov.w	r5, #4294967295
 8010180:	4628      	mov	r0, r5
 8010182:	bd38      	pop	{r3, r4, r5, pc}
 8010184:	8993      	ldrh	r3, [r2, #12]
 8010186:	f023 0320 	bic.w	r3, r3, #32
 801018a:	8193      	strh	r3, [r2, #12]
 801018c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801018e:	6852      	ldr	r2, [r2, #4]
 8010190:	b2cd      	uxtb	r5, r1
 8010192:	b18b      	cbz	r3, 80101b8 <_sungetc_r+0x44>
 8010194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010196:	4293      	cmp	r3, r2
 8010198:	dd08      	ble.n	80101ac <_sungetc_r+0x38>
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	1e5a      	subs	r2, r3, #1
 801019e:	6022      	str	r2, [r4, #0]
 80101a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80101a4:	6863      	ldr	r3, [r4, #4]
 80101a6:	3301      	adds	r3, #1
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	e7e9      	b.n	8010180 <_sungetc_r+0xc>
 80101ac:	4621      	mov	r1, r4
 80101ae:	f000 fd39 	bl	8010c24 <__submore>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d0f1      	beq.n	801019a <_sungetc_r+0x26>
 80101b6:	e7e1      	b.n	801017c <_sungetc_r+0x8>
 80101b8:	6921      	ldr	r1, [r4, #16]
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	b151      	cbz	r1, 80101d4 <_sungetc_r+0x60>
 80101be:	4299      	cmp	r1, r3
 80101c0:	d208      	bcs.n	80101d4 <_sungetc_r+0x60>
 80101c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80101c6:	42a9      	cmp	r1, r5
 80101c8:	d104      	bne.n	80101d4 <_sungetc_r+0x60>
 80101ca:	3b01      	subs	r3, #1
 80101cc:	3201      	adds	r2, #1
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	6062      	str	r2, [r4, #4]
 80101d2:	e7d5      	b.n	8010180 <_sungetc_r+0xc>
 80101d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80101d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101dc:	6363      	str	r3, [r4, #52]	; 0x34
 80101de:	2303      	movs	r3, #3
 80101e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80101e2:	4623      	mov	r3, r4
 80101e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	2301      	movs	r3, #1
 80101ec:	e7dc      	b.n	80101a8 <_sungetc_r+0x34>

080101ee <__ssrefill_r>:
 80101ee:	b510      	push	{r4, lr}
 80101f0:	460c      	mov	r4, r1
 80101f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80101f4:	b169      	cbz	r1, 8010212 <__ssrefill_r+0x24>
 80101f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101fa:	4299      	cmp	r1, r3
 80101fc:	d001      	beq.n	8010202 <__ssrefill_r+0x14>
 80101fe:	f7ff fdbf 	bl	800fd80 <_free_r>
 8010202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	2000      	movs	r0, #0
 8010208:	6360      	str	r0, [r4, #52]	; 0x34
 801020a:	b113      	cbz	r3, 8010212 <__ssrefill_r+0x24>
 801020c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	bd10      	pop	{r4, pc}
 8010212:	6923      	ldr	r3, [r4, #16]
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	2300      	movs	r3, #0
 8010218:	6063      	str	r3, [r4, #4]
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f043 0320 	orr.w	r3, r3, #32
 8010220:	81a3      	strh	r3, [r4, #12]
 8010222:	f04f 30ff 	mov.w	r0, #4294967295
 8010226:	e7f3      	b.n	8010210 <__ssrefill_r+0x22>

08010228 <__ssvfiscanf_r>:
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010230:	460c      	mov	r4, r1
 8010232:	2100      	movs	r1, #0
 8010234:	9144      	str	r1, [sp, #272]	; 0x110
 8010236:	9145      	str	r1, [sp, #276]	; 0x114
 8010238:	499f      	ldr	r1, [pc, #636]	; (80104b8 <__ssvfiscanf_r+0x290>)
 801023a:	91a0      	str	r1, [sp, #640]	; 0x280
 801023c:	f10d 0804 	add.w	r8, sp, #4
 8010240:	499e      	ldr	r1, [pc, #632]	; (80104bc <__ssvfiscanf_r+0x294>)
 8010242:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80104c0 <__ssvfiscanf_r+0x298>
 8010246:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801024a:	4606      	mov	r6, r0
 801024c:	4692      	mov	sl, r2
 801024e:	91a1      	str	r1, [sp, #644]	; 0x284
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	270a      	movs	r7, #10
 8010254:	f89a 3000 	ldrb.w	r3, [sl]
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 812a 	beq.w	80104b2 <__ssvfiscanf_r+0x28a>
 801025e:	4655      	mov	r5, sl
 8010260:	f7ff f8d2 	bl	800f408 <__locale_ctype_ptr>
 8010264:	f815 bb01 	ldrb.w	fp, [r5], #1
 8010268:	4458      	add	r0, fp
 801026a:	7843      	ldrb	r3, [r0, #1]
 801026c:	f013 0308 	ands.w	r3, r3, #8
 8010270:	d01c      	beq.n	80102ac <__ssvfiscanf_r+0x84>
 8010272:	6863      	ldr	r3, [r4, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	dd12      	ble.n	801029e <__ssvfiscanf_r+0x76>
 8010278:	f7ff f8c6 	bl	800f408 <__locale_ctype_ptr>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	781a      	ldrb	r2, [r3, #0]
 8010280:	4410      	add	r0, r2
 8010282:	7842      	ldrb	r2, [r0, #1]
 8010284:	0712      	lsls	r2, r2, #28
 8010286:	d401      	bmi.n	801028c <__ssvfiscanf_r+0x64>
 8010288:	46aa      	mov	sl, r5
 801028a:	e7e3      	b.n	8010254 <__ssvfiscanf_r+0x2c>
 801028c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801028e:	3201      	adds	r2, #1
 8010290:	9245      	str	r2, [sp, #276]	; 0x114
 8010292:	6862      	ldr	r2, [r4, #4]
 8010294:	3301      	adds	r3, #1
 8010296:	3a01      	subs	r2, #1
 8010298:	6062      	str	r2, [r4, #4]
 801029a:	6023      	str	r3, [r4, #0]
 801029c:	e7e9      	b.n	8010272 <__ssvfiscanf_r+0x4a>
 801029e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80102a0:	4621      	mov	r1, r4
 80102a2:	4630      	mov	r0, r6
 80102a4:	4798      	blx	r3
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d0e6      	beq.n	8010278 <__ssvfiscanf_r+0x50>
 80102aa:	e7ed      	b.n	8010288 <__ssvfiscanf_r+0x60>
 80102ac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80102b0:	f040 8082 	bne.w	80103b8 <__ssvfiscanf_r+0x190>
 80102b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80102b6:	9341      	str	r3, [sp, #260]	; 0x104
 80102b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80102bc:	2b2a      	cmp	r3, #42	; 0x2a
 80102be:	d103      	bne.n	80102c8 <__ssvfiscanf_r+0xa0>
 80102c0:	2310      	movs	r3, #16
 80102c2:	9341      	str	r3, [sp, #260]	; 0x104
 80102c4:	f10a 0502 	add.w	r5, sl, #2
 80102c8:	46aa      	mov	sl, r5
 80102ca:	f815 1b01 	ldrb.w	r1, [r5], #1
 80102ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80102d2:	2a09      	cmp	r2, #9
 80102d4:	d922      	bls.n	801031c <__ssvfiscanf_r+0xf4>
 80102d6:	2203      	movs	r2, #3
 80102d8:	4879      	ldr	r0, [pc, #484]	; (80104c0 <__ssvfiscanf_r+0x298>)
 80102da:	f7ef ff99 	bl	8000210 <memchr>
 80102de:	b138      	cbz	r0, 80102f0 <__ssvfiscanf_r+0xc8>
 80102e0:	eba0 0309 	sub.w	r3, r0, r9
 80102e4:	2001      	movs	r0, #1
 80102e6:	4098      	lsls	r0, r3
 80102e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80102ea:	4318      	orrs	r0, r3
 80102ec:	9041      	str	r0, [sp, #260]	; 0x104
 80102ee:	46aa      	mov	sl, r5
 80102f0:	f89a 3000 	ldrb.w	r3, [sl]
 80102f4:	2b67      	cmp	r3, #103	; 0x67
 80102f6:	f10a 0501 	add.w	r5, sl, #1
 80102fa:	d82b      	bhi.n	8010354 <__ssvfiscanf_r+0x12c>
 80102fc:	2b65      	cmp	r3, #101	; 0x65
 80102fe:	f080 809f 	bcs.w	8010440 <__ssvfiscanf_r+0x218>
 8010302:	2b47      	cmp	r3, #71	; 0x47
 8010304:	d810      	bhi.n	8010328 <__ssvfiscanf_r+0x100>
 8010306:	2b45      	cmp	r3, #69	; 0x45
 8010308:	f080 809a 	bcs.w	8010440 <__ssvfiscanf_r+0x218>
 801030c:	2b00      	cmp	r3, #0
 801030e:	d06c      	beq.n	80103ea <__ssvfiscanf_r+0x1c2>
 8010310:	2b25      	cmp	r3, #37	; 0x25
 8010312:	d051      	beq.n	80103b8 <__ssvfiscanf_r+0x190>
 8010314:	2303      	movs	r3, #3
 8010316:	9347      	str	r3, [sp, #284]	; 0x11c
 8010318:	9742      	str	r7, [sp, #264]	; 0x108
 801031a:	e027      	b.n	801036c <__ssvfiscanf_r+0x144>
 801031c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801031e:	fb07 1303 	mla	r3, r7, r3, r1
 8010322:	3b30      	subs	r3, #48	; 0x30
 8010324:	9343      	str	r3, [sp, #268]	; 0x10c
 8010326:	e7cf      	b.n	80102c8 <__ssvfiscanf_r+0xa0>
 8010328:	2b5b      	cmp	r3, #91	; 0x5b
 801032a:	d06a      	beq.n	8010402 <__ssvfiscanf_r+0x1da>
 801032c:	d80c      	bhi.n	8010348 <__ssvfiscanf_r+0x120>
 801032e:	2b58      	cmp	r3, #88	; 0x58
 8010330:	d1f0      	bne.n	8010314 <__ssvfiscanf_r+0xec>
 8010332:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010338:	9241      	str	r2, [sp, #260]	; 0x104
 801033a:	2210      	movs	r2, #16
 801033c:	9242      	str	r2, [sp, #264]	; 0x108
 801033e:	2b6e      	cmp	r3, #110	; 0x6e
 8010340:	bf8c      	ite	hi
 8010342:	2304      	movhi	r3, #4
 8010344:	2303      	movls	r3, #3
 8010346:	e010      	b.n	801036a <__ssvfiscanf_r+0x142>
 8010348:	2b63      	cmp	r3, #99	; 0x63
 801034a:	d065      	beq.n	8010418 <__ssvfiscanf_r+0x1f0>
 801034c:	2b64      	cmp	r3, #100	; 0x64
 801034e:	d1e1      	bne.n	8010314 <__ssvfiscanf_r+0xec>
 8010350:	9742      	str	r7, [sp, #264]	; 0x108
 8010352:	e7f4      	b.n	801033e <__ssvfiscanf_r+0x116>
 8010354:	2b70      	cmp	r3, #112	; 0x70
 8010356:	d04b      	beq.n	80103f0 <__ssvfiscanf_r+0x1c8>
 8010358:	d826      	bhi.n	80103a8 <__ssvfiscanf_r+0x180>
 801035a:	2b6e      	cmp	r3, #110	; 0x6e
 801035c:	d062      	beq.n	8010424 <__ssvfiscanf_r+0x1fc>
 801035e:	d84c      	bhi.n	80103fa <__ssvfiscanf_r+0x1d2>
 8010360:	2b69      	cmp	r3, #105	; 0x69
 8010362:	d1d7      	bne.n	8010314 <__ssvfiscanf_r+0xec>
 8010364:	2300      	movs	r3, #0
 8010366:	9342      	str	r3, [sp, #264]	; 0x108
 8010368:	2303      	movs	r3, #3
 801036a:	9347      	str	r3, [sp, #284]	; 0x11c
 801036c:	6863      	ldr	r3, [r4, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	dd68      	ble.n	8010444 <__ssvfiscanf_r+0x21c>
 8010372:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010374:	0659      	lsls	r1, r3, #25
 8010376:	d407      	bmi.n	8010388 <__ssvfiscanf_r+0x160>
 8010378:	f7ff f846 	bl	800f408 <__locale_ctype_ptr>
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	781a      	ldrb	r2, [r3, #0]
 8010380:	4410      	add	r0, r2
 8010382:	7842      	ldrb	r2, [r0, #1]
 8010384:	0712      	lsls	r2, r2, #28
 8010386:	d464      	bmi.n	8010452 <__ssvfiscanf_r+0x22a>
 8010388:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801038a:	2b02      	cmp	r3, #2
 801038c:	dc73      	bgt.n	8010476 <__ssvfiscanf_r+0x24e>
 801038e:	466b      	mov	r3, sp
 8010390:	4622      	mov	r2, r4
 8010392:	a941      	add	r1, sp, #260	; 0x104
 8010394:	4630      	mov	r0, r6
 8010396:	f000 f9d7 	bl	8010748 <_scanf_chars>
 801039a:	2801      	cmp	r0, #1
 801039c:	f000 8089 	beq.w	80104b2 <__ssvfiscanf_r+0x28a>
 80103a0:	2802      	cmp	r0, #2
 80103a2:	f47f af71 	bne.w	8010288 <__ssvfiscanf_r+0x60>
 80103a6:	e01d      	b.n	80103e4 <__ssvfiscanf_r+0x1bc>
 80103a8:	2b75      	cmp	r3, #117	; 0x75
 80103aa:	d0d1      	beq.n	8010350 <__ssvfiscanf_r+0x128>
 80103ac:	2b78      	cmp	r3, #120	; 0x78
 80103ae:	d0c0      	beq.n	8010332 <__ssvfiscanf_r+0x10a>
 80103b0:	2b73      	cmp	r3, #115	; 0x73
 80103b2:	d1af      	bne.n	8010314 <__ssvfiscanf_r+0xec>
 80103b4:	2302      	movs	r3, #2
 80103b6:	e7d8      	b.n	801036a <__ssvfiscanf_r+0x142>
 80103b8:	6863      	ldr	r3, [r4, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	dd0c      	ble.n	80103d8 <__ssvfiscanf_r+0x1b0>
 80103be:	6823      	ldr	r3, [r4, #0]
 80103c0:	781a      	ldrb	r2, [r3, #0]
 80103c2:	455a      	cmp	r2, fp
 80103c4:	d175      	bne.n	80104b2 <__ssvfiscanf_r+0x28a>
 80103c6:	3301      	adds	r3, #1
 80103c8:	6862      	ldr	r2, [r4, #4]
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80103ce:	3a01      	subs	r2, #1
 80103d0:	3301      	adds	r3, #1
 80103d2:	6062      	str	r2, [r4, #4]
 80103d4:	9345      	str	r3, [sp, #276]	; 0x114
 80103d6:	e757      	b.n	8010288 <__ssvfiscanf_r+0x60>
 80103d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80103da:	4621      	mov	r1, r4
 80103dc:	4630      	mov	r0, r6
 80103de:	4798      	blx	r3
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0ec      	beq.n	80103be <__ssvfiscanf_r+0x196>
 80103e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d159      	bne.n	801049e <__ssvfiscanf_r+0x276>
 80103ea:	f04f 30ff 	mov.w	r0, #4294967295
 80103ee:	e05c      	b.n	80104aa <__ssvfiscanf_r+0x282>
 80103f0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80103f2:	f042 0220 	orr.w	r2, r2, #32
 80103f6:	9241      	str	r2, [sp, #260]	; 0x104
 80103f8:	e79b      	b.n	8010332 <__ssvfiscanf_r+0x10a>
 80103fa:	2308      	movs	r3, #8
 80103fc:	9342      	str	r3, [sp, #264]	; 0x108
 80103fe:	2304      	movs	r3, #4
 8010400:	e7b3      	b.n	801036a <__ssvfiscanf_r+0x142>
 8010402:	4629      	mov	r1, r5
 8010404:	4640      	mov	r0, r8
 8010406:	f000 fb4f 	bl	8010aa8 <__sccl>
 801040a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801040c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010410:	9341      	str	r3, [sp, #260]	; 0x104
 8010412:	4605      	mov	r5, r0
 8010414:	2301      	movs	r3, #1
 8010416:	e7a8      	b.n	801036a <__ssvfiscanf_r+0x142>
 8010418:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801041a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801041e:	9341      	str	r3, [sp, #260]	; 0x104
 8010420:	2300      	movs	r3, #0
 8010422:	e7a2      	b.n	801036a <__ssvfiscanf_r+0x142>
 8010424:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010426:	06c3      	lsls	r3, r0, #27
 8010428:	f53f af2e 	bmi.w	8010288 <__ssvfiscanf_r+0x60>
 801042c:	9b00      	ldr	r3, [sp, #0]
 801042e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010430:	1d19      	adds	r1, r3, #4
 8010432:	9100      	str	r1, [sp, #0]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	07c0      	lsls	r0, r0, #31
 8010438:	bf4c      	ite	mi
 801043a:	801a      	strhmi	r2, [r3, #0]
 801043c:	601a      	strpl	r2, [r3, #0]
 801043e:	e723      	b.n	8010288 <__ssvfiscanf_r+0x60>
 8010440:	2305      	movs	r3, #5
 8010442:	e792      	b.n	801036a <__ssvfiscanf_r+0x142>
 8010444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010446:	4621      	mov	r1, r4
 8010448:	4630      	mov	r0, r6
 801044a:	4798      	blx	r3
 801044c:	2800      	cmp	r0, #0
 801044e:	d090      	beq.n	8010372 <__ssvfiscanf_r+0x14a>
 8010450:	e7c8      	b.n	80103e4 <__ssvfiscanf_r+0x1bc>
 8010452:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010454:	3201      	adds	r2, #1
 8010456:	9245      	str	r2, [sp, #276]	; 0x114
 8010458:	6862      	ldr	r2, [r4, #4]
 801045a:	3a01      	subs	r2, #1
 801045c:	2a00      	cmp	r2, #0
 801045e:	6062      	str	r2, [r4, #4]
 8010460:	dd02      	ble.n	8010468 <__ssvfiscanf_r+0x240>
 8010462:	3301      	adds	r3, #1
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	e787      	b.n	8010378 <__ssvfiscanf_r+0x150>
 8010468:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801046a:	4621      	mov	r1, r4
 801046c:	4630      	mov	r0, r6
 801046e:	4798      	blx	r3
 8010470:	2800      	cmp	r0, #0
 8010472:	d081      	beq.n	8010378 <__ssvfiscanf_r+0x150>
 8010474:	e7b6      	b.n	80103e4 <__ssvfiscanf_r+0x1bc>
 8010476:	2b04      	cmp	r3, #4
 8010478:	dc06      	bgt.n	8010488 <__ssvfiscanf_r+0x260>
 801047a:	466b      	mov	r3, sp
 801047c:	4622      	mov	r2, r4
 801047e:	a941      	add	r1, sp, #260	; 0x104
 8010480:	4630      	mov	r0, r6
 8010482:	f000 f9c5 	bl	8010810 <_scanf_i>
 8010486:	e788      	b.n	801039a <__ssvfiscanf_r+0x172>
 8010488:	4b0e      	ldr	r3, [pc, #56]	; (80104c4 <__ssvfiscanf_r+0x29c>)
 801048a:	2b00      	cmp	r3, #0
 801048c:	f43f aefc 	beq.w	8010288 <__ssvfiscanf_r+0x60>
 8010490:	466b      	mov	r3, sp
 8010492:	4622      	mov	r2, r4
 8010494:	a941      	add	r1, sp, #260	; 0x104
 8010496:	4630      	mov	r0, r6
 8010498:	f7fc f9d2 	bl	800c840 <_scanf_float>
 801049c:	e77d      	b.n	801039a <__ssvfiscanf_r+0x172>
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80104a4:	bf18      	it	ne
 80104a6:	f04f 30ff 	movne.w	r0, #4294967295
 80104aa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80104ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80104b4:	e7f9      	b.n	80104aa <__ssvfiscanf_r+0x282>
 80104b6:	bf00      	nop
 80104b8:	08010175 	.word	0x08010175
 80104bc:	080101ef 	.word	0x080101ef
 80104c0:	08012302 	.word	0x08012302
 80104c4:	0800c841 	.word	0x0800c841

080104c8 <__sfputc_r>:
 80104c8:	6893      	ldr	r3, [r2, #8]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	b410      	push	{r4}
 80104d0:	6093      	str	r3, [r2, #8]
 80104d2:	da08      	bge.n	80104e6 <__sfputc_r+0x1e>
 80104d4:	6994      	ldr	r4, [r2, #24]
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	db01      	blt.n	80104de <__sfputc_r+0x16>
 80104da:	290a      	cmp	r1, #10
 80104dc:	d103      	bne.n	80104e6 <__sfputc_r+0x1e>
 80104de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e2:	f000 bbd9 	b.w	8010c98 <__swbuf_r>
 80104e6:	6813      	ldr	r3, [r2, #0]
 80104e8:	1c58      	adds	r0, r3, #1
 80104ea:	6010      	str	r0, [r2, #0]
 80104ec:	7019      	strb	r1, [r3, #0]
 80104ee:	4608      	mov	r0, r1
 80104f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <__sfputs_r>:
 80104f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f8:	4606      	mov	r6, r0
 80104fa:	460f      	mov	r7, r1
 80104fc:	4614      	mov	r4, r2
 80104fe:	18d5      	adds	r5, r2, r3
 8010500:	42ac      	cmp	r4, r5
 8010502:	d101      	bne.n	8010508 <__sfputs_r+0x12>
 8010504:	2000      	movs	r0, #0
 8010506:	e007      	b.n	8010518 <__sfputs_r+0x22>
 8010508:	463a      	mov	r2, r7
 801050a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050e:	4630      	mov	r0, r6
 8010510:	f7ff ffda 	bl	80104c8 <__sfputc_r>
 8010514:	1c43      	adds	r3, r0, #1
 8010516:	d1f3      	bne.n	8010500 <__sfputs_r+0xa>
 8010518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801051c <_vfiprintf_r>:
 801051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	460c      	mov	r4, r1
 8010522:	b09d      	sub	sp, #116	; 0x74
 8010524:	4617      	mov	r7, r2
 8010526:	461d      	mov	r5, r3
 8010528:	4606      	mov	r6, r0
 801052a:	b118      	cbz	r0, 8010534 <_vfiprintf_r+0x18>
 801052c:	6983      	ldr	r3, [r0, #24]
 801052e:	b90b      	cbnz	r3, 8010534 <_vfiprintf_r+0x18>
 8010530:	f7fe fbb6 	bl	800eca0 <__sinit>
 8010534:	4b7c      	ldr	r3, [pc, #496]	; (8010728 <_vfiprintf_r+0x20c>)
 8010536:	429c      	cmp	r4, r3
 8010538:	d158      	bne.n	80105ec <_vfiprintf_r+0xd0>
 801053a:	6874      	ldr	r4, [r6, #4]
 801053c:	89a3      	ldrh	r3, [r4, #12]
 801053e:	0718      	lsls	r0, r3, #28
 8010540:	d55e      	bpl.n	8010600 <_vfiprintf_r+0xe4>
 8010542:	6923      	ldr	r3, [r4, #16]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d05b      	beq.n	8010600 <_vfiprintf_r+0xe4>
 8010548:	2300      	movs	r3, #0
 801054a:	9309      	str	r3, [sp, #36]	; 0x24
 801054c:	2320      	movs	r3, #32
 801054e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010552:	2330      	movs	r3, #48	; 0x30
 8010554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010558:	9503      	str	r5, [sp, #12]
 801055a:	f04f 0b01 	mov.w	fp, #1
 801055e:	46b8      	mov	r8, r7
 8010560:	4645      	mov	r5, r8
 8010562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010566:	b10b      	cbz	r3, 801056c <_vfiprintf_r+0x50>
 8010568:	2b25      	cmp	r3, #37	; 0x25
 801056a:	d154      	bne.n	8010616 <_vfiprintf_r+0xfa>
 801056c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010570:	d00b      	beq.n	801058a <_vfiprintf_r+0x6e>
 8010572:	4653      	mov	r3, sl
 8010574:	463a      	mov	r2, r7
 8010576:	4621      	mov	r1, r4
 8010578:	4630      	mov	r0, r6
 801057a:	f7ff ffbc 	bl	80104f6 <__sfputs_r>
 801057e:	3001      	adds	r0, #1
 8010580:	f000 80c2 	beq.w	8010708 <_vfiprintf_r+0x1ec>
 8010584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010586:	4453      	add	r3, sl
 8010588:	9309      	str	r3, [sp, #36]	; 0x24
 801058a:	f898 3000 	ldrb.w	r3, [r8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	f000 80ba 	beq.w	8010708 <_vfiprintf_r+0x1ec>
 8010594:	2300      	movs	r3, #0
 8010596:	f04f 32ff 	mov.w	r2, #4294967295
 801059a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801059e:	9304      	str	r3, [sp, #16]
 80105a0:	9307      	str	r3, [sp, #28]
 80105a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105a6:	931a      	str	r3, [sp, #104]	; 0x68
 80105a8:	46a8      	mov	r8, r5
 80105aa:	2205      	movs	r2, #5
 80105ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80105b0:	485e      	ldr	r0, [pc, #376]	; (801072c <_vfiprintf_r+0x210>)
 80105b2:	f7ef fe2d 	bl	8000210 <memchr>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	bb78      	cbnz	r0, 801061a <_vfiprintf_r+0xfe>
 80105ba:	06d9      	lsls	r1, r3, #27
 80105bc:	bf44      	itt	mi
 80105be:	2220      	movmi	r2, #32
 80105c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80105c4:	071a      	lsls	r2, r3, #28
 80105c6:	bf44      	itt	mi
 80105c8:	222b      	movmi	r2, #43	; 0x2b
 80105ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80105ce:	782a      	ldrb	r2, [r5, #0]
 80105d0:	2a2a      	cmp	r2, #42	; 0x2a
 80105d2:	d02a      	beq.n	801062a <_vfiprintf_r+0x10e>
 80105d4:	9a07      	ldr	r2, [sp, #28]
 80105d6:	46a8      	mov	r8, r5
 80105d8:	2000      	movs	r0, #0
 80105da:	250a      	movs	r5, #10
 80105dc:	4641      	mov	r1, r8
 80105de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105e2:	3b30      	subs	r3, #48	; 0x30
 80105e4:	2b09      	cmp	r3, #9
 80105e6:	d969      	bls.n	80106bc <_vfiprintf_r+0x1a0>
 80105e8:	b360      	cbz	r0, 8010644 <_vfiprintf_r+0x128>
 80105ea:	e024      	b.n	8010636 <_vfiprintf_r+0x11a>
 80105ec:	4b50      	ldr	r3, [pc, #320]	; (8010730 <_vfiprintf_r+0x214>)
 80105ee:	429c      	cmp	r4, r3
 80105f0:	d101      	bne.n	80105f6 <_vfiprintf_r+0xda>
 80105f2:	68b4      	ldr	r4, [r6, #8]
 80105f4:	e7a2      	b.n	801053c <_vfiprintf_r+0x20>
 80105f6:	4b4f      	ldr	r3, [pc, #316]	; (8010734 <_vfiprintf_r+0x218>)
 80105f8:	429c      	cmp	r4, r3
 80105fa:	bf08      	it	eq
 80105fc:	68f4      	ldreq	r4, [r6, #12]
 80105fe:	e79d      	b.n	801053c <_vfiprintf_r+0x20>
 8010600:	4621      	mov	r1, r4
 8010602:	4630      	mov	r0, r6
 8010604:	f000 fba8 	bl	8010d58 <__swsetup_r>
 8010608:	2800      	cmp	r0, #0
 801060a:	d09d      	beq.n	8010548 <_vfiprintf_r+0x2c>
 801060c:	f04f 30ff 	mov.w	r0, #4294967295
 8010610:	b01d      	add	sp, #116	; 0x74
 8010612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010616:	46a8      	mov	r8, r5
 8010618:	e7a2      	b.n	8010560 <_vfiprintf_r+0x44>
 801061a:	4a44      	ldr	r2, [pc, #272]	; (801072c <_vfiprintf_r+0x210>)
 801061c:	1a80      	subs	r0, r0, r2
 801061e:	fa0b f000 	lsl.w	r0, fp, r0
 8010622:	4318      	orrs	r0, r3
 8010624:	9004      	str	r0, [sp, #16]
 8010626:	4645      	mov	r5, r8
 8010628:	e7be      	b.n	80105a8 <_vfiprintf_r+0x8c>
 801062a:	9a03      	ldr	r2, [sp, #12]
 801062c:	1d11      	adds	r1, r2, #4
 801062e:	6812      	ldr	r2, [r2, #0]
 8010630:	9103      	str	r1, [sp, #12]
 8010632:	2a00      	cmp	r2, #0
 8010634:	db01      	blt.n	801063a <_vfiprintf_r+0x11e>
 8010636:	9207      	str	r2, [sp, #28]
 8010638:	e004      	b.n	8010644 <_vfiprintf_r+0x128>
 801063a:	4252      	negs	r2, r2
 801063c:	f043 0302 	orr.w	r3, r3, #2
 8010640:	9207      	str	r2, [sp, #28]
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	f898 3000 	ldrb.w	r3, [r8]
 8010648:	2b2e      	cmp	r3, #46	; 0x2e
 801064a:	d10e      	bne.n	801066a <_vfiprintf_r+0x14e>
 801064c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010650:	2b2a      	cmp	r3, #42	; 0x2a
 8010652:	d138      	bne.n	80106c6 <_vfiprintf_r+0x1aa>
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	1d1a      	adds	r2, r3, #4
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	9203      	str	r2, [sp, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	bfb8      	it	lt
 8010660:	f04f 33ff 	movlt.w	r3, #4294967295
 8010664:	f108 0802 	add.w	r8, r8, #2
 8010668:	9305      	str	r3, [sp, #20]
 801066a:	4d33      	ldr	r5, [pc, #204]	; (8010738 <_vfiprintf_r+0x21c>)
 801066c:	f898 1000 	ldrb.w	r1, [r8]
 8010670:	2203      	movs	r2, #3
 8010672:	4628      	mov	r0, r5
 8010674:	f7ef fdcc 	bl	8000210 <memchr>
 8010678:	b140      	cbz	r0, 801068c <_vfiprintf_r+0x170>
 801067a:	2340      	movs	r3, #64	; 0x40
 801067c:	1b40      	subs	r0, r0, r5
 801067e:	fa03 f000 	lsl.w	r0, r3, r0
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	4303      	orrs	r3, r0
 8010686:	f108 0801 	add.w	r8, r8, #1
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	f898 1000 	ldrb.w	r1, [r8]
 8010690:	482a      	ldr	r0, [pc, #168]	; (801073c <_vfiprintf_r+0x220>)
 8010692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010696:	2206      	movs	r2, #6
 8010698:	f108 0701 	add.w	r7, r8, #1
 801069c:	f7ef fdb8 	bl	8000210 <memchr>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d037      	beq.n	8010714 <_vfiprintf_r+0x1f8>
 80106a4:	4b26      	ldr	r3, [pc, #152]	; (8010740 <_vfiprintf_r+0x224>)
 80106a6:	bb1b      	cbnz	r3, 80106f0 <_vfiprintf_r+0x1d4>
 80106a8:	9b03      	ldr	r3, [sp, #12]
 80106aa:	3307      	adds	r3, #7
 80106ac:	f023 0307 	bic.w	r3, r3, #7
 80106b0:	3308      	adds	r3, #8
 80106b2:	9303      	str	r3, [sp, #12]
 80106b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b6:	444b      	add	r3, r9
 80106b8:	9309      	str	r3, [sp, #36]	; 0x24
 80106ba:	e750      	b.n	801055e <_vfiprintf_r+0x42>
 80106bc:	fb05 3202 	mla	r2, r5, r2, r3
 80106c0:	2001      	movs	r0, #1
 80106c2:	4688      	mov	r8, r1
 80106c4:	e78a      	b.n	80105dc <_vfiprintf_r+0xc0>
 80106c6:	2300      	movs	r3, #0
 80106c8:	f108 0801 	add.w	r8, r8, #1
 80106cc:	9305      	str	r3, [sp, #20]
 80106ce:	4619      	mov	r1, r3
 80106d0:	250a      	movs	r5, #10
 80106d2:	4640      	mov	r0, r8
 80106d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106d8:	3a30      	subs	r2, #48	; 0x30
 80106da:	2a09      	cmp	r2, #9
 80106dc:	d903      	bls.n	80106e6 <_vfiprintf_r+0x1ca>
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d0c3      	beq.n	801066a <_vfiprintf_r+0x14e>
 80106e2:	9105      	str	r1, [sp, #20]
 80106e4:	e7c1      	b.n	801066a <_vfiprintf_r+0x14e>
 80106e6:	fb05 2101 	mla	r1, r5, r1, r2
 80106ea:	2301      	movs	r3, #1
 80106ec:	4680      	mov	r8, r0
 80106ee:	e7f0      	b.n	80106d2 <_vfiprintf_r+0x1b6>
 80106f0:	ab03      	add	r3, sp, #12
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	4622      	mov	r2, r4
 80106f6:	4b13      	ldr	r3, [pc, #76]	; (8010744 <_vfiprintf_r+0x228>)
 80106f8:	a904      	add	r1, sp, #16
 80106fa:	4630      	mov	r0, r6
 80106fc:	f7fb fcd8 	bl	800c0b0 <_printf_float>
 8010700:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010704:	4681      	mov	r9, r0
 8010706:	d1d5      	bne.n	80106b4 <_vfiprintf_r+0x198>
 8010708:	89a3      	ldrh	r3, [r4, #12]
 801070a:	065b      	lsls	r3, r3, #25
 801070c:	f53f af7e 	bmi.w	801060c <_vfiprintf_r+0xf0>
 8010710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010712:	e77d      	b.n	8010610 <_vfiprintf_r+0xf4>
 8010714:	ab03      	add	r3, sp, #12
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	4622      	mov	r2, r4
 801071a:	4b0a      	ldr	r3, [pc, #40]	; (8010744 <_vfiprintf_r+0x228>)
 801071c:	a904      	add	r1, sp, #16
 801071e:	4630      	mov	r0, r6
 8010720:	f7fb ff7c 	bl	800c61c <_printf_i>
 8010724:	e7ec      	b.n	8010700 <_vfiprintf_r+0x1e4>
 8010726:	bf00      	nop
 8010728:	080121b0 	.word	0x080121b0
 801072c:	080122fc 	.word	0x080122fc
 8010730:	080121d0 	.word	0x080121d0
 8010734:	08012190 	.word	0x08012190
 8010738:	08012302 	.word	0x08012302
 801073c:	08012306 	.word	0x08012306
 8010740:	0800c0b1 	.word	0x0800c0b1
 8010744:	080104f7 	.word	0x080104f7

08010748 <_scanf_chars>:
 8010748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074c:	4615      	mov	r5, r2
 801074e:	688a      	ldr	r2, [r1, #8]
 8010750:	4680      	mov	r8, r0
 8010752:	460c      	mov	r4, r1
 8010754:	b932      	cbnz	r2, 8010764 <_scanf_chars+0x1c>
 8010756:	698a      	ldr	r2, [r1, #24]
 8010758:	2a00      	cmp	r2, #0
 801075a:	bf14      	ite	ne
 801075c:	f04f 32ff 	movne.w	r2, #4294967295
 8010760:	2201      	moveq	r2, #1
 8010762:	608a      	str	r2, [r1, #8]
 8010764:	6822      	ldr	r2, [r4, #0]
 8010766:	06d1      	lsls	r1, r2, #27
 8010768:	bf5f      	itttt	pl
 801076a:	681a      	ldrpl	r2, [r3, #0]
 801076c:	1d11      	addpl	r1, r2, #4
 801076e:	6019      	strpl	r1, [r3, #0]
 8010770:	6817      	ldrpl	r7, [r2, #0]
 8010772:	2600      	movs	r6, #0
 8010774:	69a3      	ldr	r3, [r4, #24]
 8010776:	b1db      	cbz	r3, 80107b0 <_scanf_chars+0x68>
 8010778:	2b01      	cmp	r3, #1
 801077a:	d107      	bne.n	801078c <_scanf_chars+0x44>
 801077c:	682b      	ldr	r3, [r5, #0]
 801077e:	6962      	ldr	r2, [r4, #20]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	5cd3      	ldrb	r3, [r2, r3]
 8010784:	b9a3      	cbnz	r3, 80107b0 <_scanf_chars+0x68>
 8010786:	2e00      	cmp	r6, #0
 8010788:	d132      	bne.n	80107f0 <_scanf_chars+0xa8>
 801078a:	e006      	b.n	801079a <_scanf_chars+0x52>
 801078c:	2b02      	cmp	r3, #2
 801078e:	d007      	beq.n	80107a0 <_scanf_chars+0x58>
 8010790:	2e00      	cmp	r6, #0
 8010792:	d12d      	bne.n	80107f0 <_scanf_chars+0xa8>
 8010794:	69a3      	ldr	r3, [r4, #24]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d12a      	bne.n	80107f0 <_scanf_chars+0xa8>
 801079a:	2001      	movs	r0, #1
 801079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a0:	f7fe fe32 	bl	800f408 <__locale_ctype_ptr>
 80107a4:	682b      	ldr	r3, [r5, #0]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	4418      	add	r0, r3
 80107aa:	7843      	ldrb	r3, [r0, #1]
 80107ac:	071b      	lsls	r3, r3, #28
 80107ae:	d4ef      	bmi.n	8010790 <_scanf_chars+0x48>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	06da      	lsls	r2, r3, #27
 80107b4:	bf5e      	ittt	pl
 80107b6:	682b      	ldrpl	r3, [r5, #0]
 80107b8:	781b      	ldrbpl	r3, [r3, #0]
 80107ba:	703b      	strbpl	r3, [r7, #0]
 80107bc:	682a      	ldr	r2, [r5, #0]
 80107be:	686b      	ldr	r3, [r5, #4]
 80107c0:	f102 0201 	add.w	r2, r2, #1
 80107c4:	602a      	str	r2, [r5, #0]
 80107c6:	68a2      	ldr	r2, [r4, #8]
 80107c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80107cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80107d0:	606b      	str	r3, [r5, #4]
 80107d2:	f106 0601 	add.w	r6, r6, #1
 80107d6:	bf58      	it	pl
 80107d8:	3701      	addpl	r7, #1
 80107da:	60a2      	str	r2, [r4, #8]
 80107dc:	b142      	cbz	r2, 80107f0 <_scanf_chars+0xa8>
 80107de:	2b00      	cmp	r3, #0
 80107e0:	dcc8      	bgt.n	8010774 <_scanf_chars+0x2c>
 80107e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80107e6:	4629      	mov	r1, r5
 80107e8:	4640      	mov	r0, r8
 80107ea:	4798      	blx	r3
 80107ec:	2800      	cmp	r0, #0
 80107ee:	d0c1      	beq.n	8010774 <_scanf_chars+0x2c>
 80107f0:	6823      	ldr	r3, [r4, #0]
 80107f2:	f013 0310 	ands.w	r3, r3, #16
 80107f6:	d105      	bne.n	8010804 <_scanf_chars+0xbc>
 80107f8:	68e2      	ldr	r2, [r4, #12]
 80107fa:	3201      	adds	r2, #1
 80107fc:	60e2      	str	r2, [r4, #12]
 80107fe:	69a2      	ldr	r2, [r4, #24]
 8010800:	b102      	cbz	r2, 8010804 <_scanf_chars+0xbc>
 8010802:	703b      	strb	r3, [r7, #0]
 8010804:	6923      	ldr	r3, [r4, #16]
 8010806:	441e      	add	r6, r3
 8010808:	6126      	str	r6, [r4, #16]
 801080a:	2000      	movs	r0, #0
 801080c:	e7c6      	b.n	801079c <_scanf_chars+0x54>
	...

08010810 <_scanf_i>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	469a      	mov	sl, r3
 8010816:	4b74      	ldr	r3, [pc, #464]	; (80109e8 <_scanf_i+0x1d8>)
 8010818:	460c      	mov	r4, r1
 801081a:	4683      	mov	fp, r0
 801081c:	4616      	mov	r6, r2
 801081e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010822:	b087      	sub	sp, #28
 8010824:	ab03      	add	r3, sp, #12
 8010826:	68a7      	ldr	r7, [r4, #8]
 8010828:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801082c:	4b6f      	ldr	r3, [pc, #444]	; (80109ec <_scanf_i+0x1dc>)
 801082e:	69a1      	ldr	r1, [r4, #24]
 8010830:	4a6f      	ldr	r2, [pc, #444]	; (80109f0 <_scanf_i+0x1e0>)
 8010832:	2903      	cmp	r1, #3
 8010834:	bf08      	it	eq
 8010836:	461a      	moveq	r2, r3
 8010838:	1e7b      	subs	r3, r7, #1
 801083a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801083e:	bf84      	itt	hi
 8010840:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010844:	60a3      	strhi	r3, [r4, #8]
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	9200      	str	r2, [sp, #0]
 801084a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801084e:	bf88      	it	hi
 8010850:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010854:	f104 091c 	add.w	r9, r4, #28
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bf8c      	ite	hi
 801085c:	197f      	addhi	r7, r7, r5
 801085e:	2700      	movls	r7, #0
 8010860:	464b      	mov	r3, r9
 8010862:	f04f 0800 	mov.w	r8, #0
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	6831      	ldr	r1, [r6, #0]
 801086a:	ab03      	add	r3, sp, #12
 801086c:	2202      	movs	r2, #2
 801086e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010872:	7809      	ldrb	r1, [r1, #0]
 8010874:	f7ef fccc 	bl	8000210 <memchr>
 8010878:	9b01      	ldr	r3, [sp, #4]
 801087a:	b330      	cbz	r0, 80108ca <_scanf_i+0xba>
 801087c:	f1b8 0f01 	cmp.w	r8, #1
 8010880:	d15a      	bne.n	8010938 <_scanf_i+0x128>
 8010882:	6862      	ldr	r2, [r4, #4]
 8010884:	b92a      	cbnz	r2, 8010892 <_scanf_i+0x82>
 8010886:	6822      	ldr	r2, [r4, #0]
 8010888:	2108      	movs	r1, #8
 801088a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801088e:	6061      	str	r1, [r4, #4]
 8010890:	6022      	str	r2, [r4, #0]
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010898:	6022      	str	r2, [r4, #0]
 801089a:	68a2      	ldr	r2, [r4, #8]
 801089c:	1e51      	subs	r1, r2, #1
 801089e:	60a1      	str	r1, [r4, #8]
 80108a0:	b19a      	cbz	r2, 80108ca <_scanf_i+0xba>
 80108a2:	6832      	ldr	r2, [r6, #0]
 80108a4:	1c51      	adds	r1, r2, #1
 80108a6:	6031      	str	r1, [r6, #0]
 80108a8:	7812      	ldrb	r2, [r2, #0]
 80108aa:	701a      	strb	r2, [r3, #0]
 80108ac:	1c5d      	adds	r5, r3, #1
 80108ae:	6873      	ldr	r3, [r6, #4]
 80108b0:	3b01      	subs	r3, #1
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	6073      	str	r3, [r6, #4]
 80108b6:	dc07      	bgt.n	80108c8 <_scanf_i+0xb8>
 80108b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108bc:	4631      	mov	r1, r6
 80108be:	4658      	mov	r0, fp
 80108c0:	4798      	blx	r3
 80108c2:	2800      	cmp	r0, #0
 80108c4:	f040 8086 	bne.w	80109d4 <_scanf_i+0x1c4>
 80108c8:	462b      	mov	r3, r5
 80108ca:	f108 0801 	add.w	r8, r8, #1
 80108ce:	f1b8 0f03 	cmp.w	r8, #3
 80108d2:	d1c8      	bne.n	8010866 <_scanf_i+0x56>
 80108d4:	6862      	ldr	r2, [r4, #4]
 80108d6:	b90a      	cbnz	r2, 80108dc <_scanf_i+0xcc>
 80108d8:	220a      	movs	r2, #10
 80108da:	6062      	str	r2, [r4, #4]
 80108dc:	6862      	ldr	r2, [r4, #4]
 80108de:	4945      	ldr	r1, [pc, #276]	; (80109f4 <_scanf_i+0x1e4>)
 80108e0:	6960      	ldr	r0, [r4, #20]
 80108e2:	9301      	str	r3, [sp, #4]
 80108e4:	1a89      	subs	r1, r1, r2
 80108e6:	f000 f8df 	bl	8010aa8 <__sccl>
 80108ea:	9b01      	ldr	r3, [sp, #4]
 80108ec:	f04f 0800 	mov.w	r8, #0
 80108f0:	461d      	mov	r5, r3
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	6822      	ldr	r2, [r4, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d03a      	beq.n	8010970 <_scanf_i+0x160>
 80108fa:	6831      	ldr	r1, [r6, #0]
 80108fc:	6960      	ldr	r0, [r4, #20]
 80108fe:	f891 c000 	ldrb.w	ip, [r1]
 8010902:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010906:	2800      	cmp	r0, #0
 8010908:	d032      	beq.n	8010970 <_scanf_i+0x160>
 801090a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801090e:	d121      	bne.n	8010954 <_scanf_i+0x144>
 8010910:	0510      	lsls	r0, r2, #20
 8010912:	d51f      	bpl.n	8010954 <_scanf_i+0x144>
 8010914:	f108 0801 	add.w	r8, r8, #1
 8010918:	b117      	cbz	r7, 8010920 <_scanf_i+0x110>
 801091a:	3301      	adds	r3, #1
 801091c:	3f01      	subs	r7, #1
 801091e:	60a3      	str	r3, [r4, #8]
 8010920:	6873      	ldr	r3, [r6, #4]
 8010922:	3b01      	subs	r3, #1
 8010924:	2b00      	cmp	r3, #0
 8010926:	6073      	str	r3, [r6, #4]
 8010928:	dd1b      	ble.n	8010962 <_scanf_i+0x152>
 801092a:	6833      	ldr	r3, [r6, #0]
 801092c:	3301      	adds	r3, #1
 801092e:	6033      	str	r3, [r6, #0]
 8010930:	68a3      	ldr	r3, [r4, #8]
 8010932:	3b01      	subs	r3, #1
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	e7dc      	b.n	80108f2 <_scanf_i+0xe2>
 8010938:	f1b8 0f02 	cmp.w	r8, #2
 801093c:	d1ad      	bne.n	801089a <_scanf_i+0x8a>
 801093e:	6822      	ldr	r2, [r4, #0]
 8010940:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010944:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010948:	d1bf      	bne.n	80108ca <_scanf_i+0xba>
 801094a:	2110      	movs	r1, #16
 801094c:	6061      	str	r1, [r4, #4]
 801094e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010952:	e7a1      	b.n	8010898 <_scanf_i+0x88>
 8010954:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010958:	6022      	str	r2, [r4, #0]
 801095a:	780b      	ldrb	r3, [r1, #0]
 801095c:	702b      	strb	r3, [r5, #0]
 801095e:	3501      	adds	r5, #1
 8010960:	e7de      	b.n	8010920 <_scanf_i+0x110>
 8010962:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010966:	4631      	mov	r1, r6
 8010968:	4658      	mov	r0, fp
 801096a:	4798      	blx	r3
 801096c:	2800      	cmp	r0, #0
 801096e:	d0df      	beq.n	8010930 <_scanf_i+0x120>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	05d9      	lsls	r1, r3, #23
 8010974:	d50c      	bpl.n	8010990 <_scanf_i+0x180>
 8010976:	454d      	cmp	r5, r9
 8010978:	d908      	bls.n	801098c <_scanf_i+0x17c>
 801097a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801097e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010982:	4632      	mov	r2, r6
 8010984:	4658      	mov	r0, fp
 8010986:	4798      	blx	r3
 8010988:	1e6f      	subs	r7, r5, #1
 801098a:	463d      	mov	r5, r7
 801098c:	454d      	cmp	r5, r9
 801098e:	d029      	beq.n	80109e4 <_scanf_i+0x1d4>
 8010990:	6822      	ldr	r2, [r4, #0]
 8010992:	f012 0210 	ands.w	r2, r2, #16
 8010996:	d113      	bne.n	80109c0 <_scanf_i+0x1b0>
 8010998:	702a      	strb	r2, [r5, #0]
 801099a:	6863      	ldr	r3, [r4, #4]
 801099c:	9e00      	ldr	r6, [sp, #0]
 801099e:	4649      	mov	r1, r9
 80109a0:	4658      	mov	r0, fp
 80109a2:	47b0      	blx	r6
 80109a4:	f8da 3000 	ldr.w	r3, [sl]
 80109a8:	6821      	ldr	r1, [r4, #0]
 80109aa:	1d1a      	adds	r2, r3, #4
 80109ac:	f8ca 2000 	str.w	r2, [sl]
 80109b0:	f011 0f20 	tst.w	r1, #32
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	d010      	beq.n	80109da <_scanf_i+0x1ca>
 80109b8:	6018      	str	r0, [r3, #0]
 80109ba:	68e3      	ldr	r3, [r4, #12]
 80109bc:	3301      	adds	r3, #1
 80109be:	60e3      	str	r3, [r4, #12]
 80109c0:	eba5 0509 	sub.w	r5, r5, r9
 80109c4:	44a8      	add	r8, r5
 80109c6:	6925      	ldr	r5, [r4, #16]
 80109c8:	4445      	add	r5, r8
 80109ca:	6125      	str	r5, [r4, #16]
 80109cc:	2000      	movs	r0, #0
 80109ce:	b007      	add	sp, #28
 80109d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d4:	f04f 0800 	mov.w	r8, #0
 80109d8:	e7ca      	b.n	8010970 <_scanf_i+0x160>
 80109da:	07ca      	lsls	r2, r1, #31
 80109dc:	bf4c      	ite	mi
 80109de:	8018      	strhmi	r0, [r3, #0]
 80109e0:	6018      	strpl	r0, [r3, #0]
 80109e2:	e7ea      	b.n	80109ba <_scanf_i+0x1aa>
 80109e4:	2001      	movs	r0, #1
 80109e6:	e7f2      	b.n	80109ce <_scanf_i+0x1be>
 80109e8:	08011748 	.word	0x08011748
 80109ec:	0800dda1 	.word	0x0800dda1
 80109f0:	08010c01 	.word	0x08010c01
 80109f4:	0801231d 	.word	0x0801231d

080109f8 <_putc_r>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	460d      	mov	r5, r1
 80109fc:	4614      	mov	r4, r2
 80109fe:	4606      	mov	r6, r0
 8010a00:	b118      	cbz	r0, 8010a0a <_putc_r+0x12>
 8010a02:	6983      	ldr	r3, [r0, #24]
 8010a04:	b90b      	cbnz	r3, 8010a0a <_putc_r+0x12>
 8010a06:	f7fe f94b 	bl	800eca0 <__sinit>
 8010a0a:	4b13      	ldr	r3, [pc, #76]	; (8010a58 <_putc_r+0x60>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	d112      	bne.n	8010a36 <_putc_r+0x3e>
 8010a10:	6874      	ldr	r4, [r6, #4]
 8010a12:	68a3      	ldr	r3, [r4, #8]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	60a3      	str	r3, [r4, #8]
 8010a1a:	da16      	bge.n	8010a4a <_putc_r+0x52>
 8010a1c:	69a2      	ldr	r2, [r4, #24]
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	db02      	blt.n	8010a28 <_putc_r+0x30>
 8010a22:	b2eb      	uxtb	r3, r5
 8010a24:	2b0a      	cmp	r3, #10
 8010a26:	d110      	bne.n	8010a4a <_putc_r+0x52>
 8010a28:	4622      	mov	r2, r4
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a32:	f000 b931 	b.w	8010c98 <__swbuf_r>
 8010a36:	4b09      	ldr	r3, [pc, #36]	; (8010a5c <_putc_r+0x64>)
 8010a38:	429c      	cmp	r4, r3
 8010a3a:	d101      	bne.n	8010a40 <_putc_r+0x48>
 8010a3c:	68b4      	ldr	r4, [r6, #8]
 8010a3e:	e7e8      	b.n	8010a12 <_putc_r+0x1a>
 8010a40:	4b07      	ldr	r3, [pc, #28]	; (8010a60 <_putc_r+0x68>)
 8010a42:	429c      	cmp	r4, r3
 8010a44:	bf08      	it	eq
 8010a46:	68f4      	ldreq	r4, [r6, #12]
 8010a48:	e7e3      	b.n	8010a12 <_putc_r+0x1a>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	1c5a      	adds	r2, r3, #1
 8010a4e:	6022      	str	r2, [r4, #0]
 8010a50:	701d      	strb	r5, [r3, #0]
 8010a52:	b2e8      	uxtb	r0, r5
 8010a54:	bd70      	pop	{r4, r5, r6, pc}
 8010a56:	bf00      	nop
 8010a58:	080121b0 	.word	0x080121b0
 8010a5c:	080121d0 	.word	0x080121d0
 8010a60:	08012190 	.word	0x08012190

08010a64 <_read_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	4c07      	ldr	r4, [pc, #28]	; (8010a84 <_read_r+0x20>)
 8010a68:	4605      	mov	r5, r0
 8010a6a:	4608      	mov	r0, r1
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	2200      	movs	r2, #0
 8010a70:	6022      	str	r2, [r4, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	f7f4 f8e0 	bl	8004c38 <_read>
 8010a78:	1c43      	adds	r3, r0, #1
 8010a7a:	d102      	bne.n	8010a82 <_read_r+0x1e>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	b103      	cbz	r3, 8010a82 <_read_r+0x1e>
 8010a80:	602b      	str	r3, [r5, #0]
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	20002740 	.word	0x20002740

08010a88 <_sbrk_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4c06      	ldr	r4, [pc, #24]	; (8010aa4 <_sbrk_r+0x1c>)
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4608      	mov	r0, r1
 8010a92:	6023      	str	r3, [r4, #0]
 8010a94:	f7f4 f93e 	bl	8004d14 <_sbrk>
 8010a98:	1c43      	adds	r3, r0, #1
 8010a9a:	d102      	bne.n	8010aa2 <_sbrk_r+0x1a>
 8010a9c:	6823      	ldr	r3, [r4, #0]
 8010a9e:	b103      	cbz	r3, 8010aa2 <_sbrk_r+0x1a>
 8010aa0:	602b      	str	r3, [r5, #0]
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	20002740 	.word	0x20002740

08010aa8 <__sccl>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	780b      	ldrb	r3, [r1, #0]
 8010aac:	2b5e      	cmp	r3, #94	; 0x5e
 8010aae:	bf13      	iteet	ne
 8010ab0:	1c4a      	addne	r2, r1, #1
 8010ab2:	1c8a      	addeq	r2, r1, #2
 8010ab4:	784b      	ldrbeq	r3, [r1, #1]
 8010ab6:	2100      	movne	r1, #0
 8010ab8:	bf08      	it	eq
 8010aba:	2101      	moveq	r1, #1
 8010abc:	1e44      	subs	r4, r0, #1
 8010abe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8010ac2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010ac6:	42ac      	cmp	r4, r5
 8010ac8:	d1fb      	bne.n	8010ac2 <__sccl+0x1a>
 8010aca:	b913      	cbnz	r3, 8010ad2 <__sccl+0x2a>
 8010acc:	3a01      	subs	r2, #1
 8010ace:	4610      	mov	r0, r2
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
 8010ad2:	f081 0401 	eor.w	r4, r1, #1
 8010ad6:	54c4      	strb	r4, [r0, r3]
 8010ad8:	1c51      	adds	r1, r2, #1
 8010ada:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8010ade:	2d2d      	cmp	r5, #45	; 0x2d
 8010ae0:	f101 36ff 	add.w	r6, r1, #4294967295
 8010ae4:	460a      	mov	r2, r1
 8010ae6:	d006      	beq.n	8010af6 <__sccl+0x4e>
 8010ae8:	2d5d      	cmp	r5, #93	; 0x5d
 8010aea:	d0f0      	beq.n	8010ace <__sccl+0x26>
 8010aec:	b90d      	cbnz	r5, 8010af2 <__sccl+0x4a>
 8010aee:	4632      	mov	r2, r6
 8010af0:	e7ed      	b.n	8010ace <__sccl+0x26>
 8010af2:	462b      	mov	r3, r5
 8010af4:	e7ef      	b.n	8010ad6 <__sccl+0x2e>
 8010af6:	780e      	ldrb	r6, [r1, #0]
 8010af8:	2e5d      	cmp	r6, #93	; 0x5d
 8010afa:	d0fa      	beq.n	8010af2 <__sccl+0x4a>
 8010afc:	42b3      	cmp	r3, r6
 8010afe:	dcf8      	bgt.n	8010af2 <__sccl+0x4a>
 8010b00:	3301      	adds	r3, #1
 8010b02:	429e      	cmp	r6, r3
 8010b04:	54c4      	strb	r4, [r0, r3]
 8010b06:	dcfb      	bgt.n	8010b00 <__sccl+0x58>
 8010b08:	3102      	adds	r1, #2
 8010b0a:	e7e6      	b.n	8010ada <__sccl+0x32>

08010b0c <_strtoul_l.isra.0>:
 8010b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b10:	4680      	mov	r8, r0
 8010b12:	4689      	mov	r9, r1
 8010b14:	4692      	mov	sl, r2
 8010b16:	461e      	mov	r6, r3
 8010b18:	460f      	mov	r7, r1
 8010b1a:	463d      	mov	r5, r7
 8010b1c:	9808      	ldr	r0, [sp, #32]
 8010b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b22:	f7fe fc6d 	bl	800f400 <__locale_ctype_ptr_l>
 8010b26:	4420      	add	r0, r4
 8010b28:	7843      	ldrb	r3, [r0, #1]
 8010b2a:	f013 0308 	ands.w	r3, r3, #8
 8010b2e:	d130      	bne.n	8010b92 <_strtoul_l.isra.0+0x86>
 8010b30:	2c2d      	cmp	r4, #45	; 0x2d
 8010b32:	d130      	bne.n	8010b96 <_strtoul_l.isra.0+0x8a>
 8010b34:	787c      	ldrb	r4, [r7, #1]
 8010b36:	1cbd      	adds	r5, r7, #2
 8010b38:	2101      	movs	r1, #1
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	d05c      	beq.n	8010bf8 <_strtoul_l.isra.0+0xec>
 8010b3e:	2e10      	cmp	r6, #16
 8010b40:	d109      	bne.n	8010b56 <_strtoul_l.isra.0+0x4a>
 8010b42:	2c30      	cmp	r4, #48	; 0x30
 8010b44:	d107      	bne.n	8010b56 <_strtoul_l.isra.0+0x4a>
 8010b46:	782b      	ldrb	r3, [r5, #0]
 8010b48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b4c:	2b58      	cmp	r3, #88	; 0x58
 8010b4e:	d14e      	bne.n	8010bee <_strtoul_l.isra.0+0xe2>
 8010b50:	786c      	ldrb	r4, [r5, #1]
 8010b52:	2610      	movs	r6, #16
 8010b54:	3502      	adds	r5, #2
 8010b56:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	fbb2 f2f6 	udiv	r2, r2, r6
 8010b60:	fb06 fc02 	mul.w	ip, r6, r2
 8010b64:	ea6f 0c0c 	mvn.w	ip, ip
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010b6e:	2f09      	cmp	r7, #9
 8010b70:	d817      	bhi.n	8010ba2 <_strtoul_l.isra.0+0x96>
 8010b72:	463c      	mov	r4, r7
 8010b74:	42a6      	cmp	r6, r4
 8010b76:	dd23      	ble.n	8010bc0 <_strtoul_l.isra.0+0xb4>
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	db1e      	blt.n	8010bba <_strtoul_l.isra.0+0xae>
 8010b7c:	4282      	cmp	r2, r0
 8010b7e:	d31c      	bcc.n	8010bba <_strtoul_l.isra.0+0xae>
 8010b80:	d101      	bne.n	8010b86 <_strtoul_l.isra.0+0x7a>
 8010b82:	45a4      	cmp	ip, r4
 8010b84:	db19      	blt.n	8010bba <_strtoul_l.isra.0+0xae>
 8010b86:	fb00 4006 	mla	r0, r0, r6, r4
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b90:	e7eb      	b.n	8010b6a <_strtoul_l.isra.0+0x5e>
 8010b92:	462f      	mov	r7, r5
 8010b94:	e7c1      	b.n	8010b1a <_strtoul_l.isra.0+0xe>
 8010b96:	2c2b      	cmp	r4, #43	; 0x2b
 8010b98:	bf04      	itt	eq
 8010b9a:	1cbd      	addeq	r5, r7, #2
 8010b9c:	787c      	ldrbeq	r4, [r7, #1]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	e7cb      	b.n	8010b3a <_strtoul_l.isra.0+0x2e>
 8010ba2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010ba6:	2f19      	cmp	r7, #25
 8010ba8:	d801      	bhi.n	8010bae <_strtoul_l.isra.0+0xa2>
 8010baa:	3c37      	subs	r4, #55	; 0x37
 8010bac:	e7e2      	b.n	8010b74 <_strtoul_l.isra.0+0x68>
 8010bae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010bb2:	2f19      	cmp	r7, #25
 8010bb4:	d804      	bhi.n	8010bc0 <_strtoul_l.isra.0+0xb4>
 8010bb6:	3c57      	subs	r4, #87	; 0x57
 8010bb8:	e7dc      	b.n	8010b74 <_strtoul_l.isra.0+0x68>
 8010bba:	f04f 33ff 	mov.w	r3, #4294967295
 8010bbe:	e7e5      	b.n	8010b8c <_strtoul_l.isra.0+0x80>
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	da09      	bge.n	8010bd8 <_strtoul_l.isra.0+0xcc>
 8010bc4:	2322      	movs	r3, #34	; 0x22
 8010bc6:	f8c8 3000 	str.w	r3, [r8]
 8010bca:	f04f 30ff 	mov.w	r0, #4294967295
 8010bce:	f1ba 0f00 	cmp.w	sl, #0
 8010bd2:	d107      	bne.n	8010be4 <_strtoul_l.isra.0+0xd8>
 8010bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd8:	b101      	cbz	r1, 8010bdc <_strtoul_l.isra.0+0xd0>
 8010bda:	4240      	negs	r0, r0
 8010bdc:	f1ba 0f00 	cmp.w	sl, #0
 8010be0:	d0f8      	beq.n	8010bd4 <_strtoul_l.isra.0+0xc8>
 8010be2:	b10b      	cbz	r3, 8010be8 <_strtoul_l.isra.0+0xdc>
 8010be4:	f105 39ff 	add.w	r9, r5, #4294967295
 8010be8:	f8ca 9000 	str.w	r9, [sl]
 8010bec:	e7f2      	b.n	8010bd4 <_strtoul_l.isra.0+0xc8>
 8010bee:	2430      	movs	r4, #48	; 0x30
 8010bf0:	2e00      	cmp	r6, #0
 8010bf2:	d1b0      	bne.n	8010b56 <_strtoul_l.isra.0+0x4a>
 8010bf4:	2608      	movs	r6, #8
 8010bf6:	e7ae      	b.n	8010b56 <_strtoul_l.isra.0+0x4a>
 8010bf8:	2c30      	cmp	r4, #48	; 0x30
 8010bfa:	d0a4      	beq.n	8010b46 <_strtoul_l.isra.0+0x3a>
 8010bfc:	260a      	movs	r6, #10
 8010bfe:	e7aa      	b.n	8010b56 <_strtoul_l.isra.0+0x4a>

08010c00 <_strtoul_r>:
 8010c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c02:	4c06      	ldr	r4, [pc, #24]	; (8010c1c <_strtoul_r+0x1c>)
 8010c04:	4d06      	ldr	r5, [pc, #24]	; (8010c20 <_strtoul_r+0x20>)
 8010c06:	6824      	ldr	r4, [r4, #0]
 8010c08:	6a24      	ldr	r4, [r4, #32]
 8010c0a:	2c00      	cmp	r4, #0
 8010c0c:	bf08      	it	eq
 8010c0e:	462c      	moveq	r4, r5
 8010c10:	9400      	str	r4, [sp, #0]
 8010c12:	f7ff ff7b 	bl	8010b0c <_strtoul_l.isra.0>
 8010c16:	b003      	add	sp, #12
 8010c18:	bd30      	pop	{r4, r5, pc}
 8010c1a:	bf00      	nop
 8010c1c:	20000014 	.word	0x20000014
 8010c20:	20000078 	.word	0x20000078

08010c24 <__submore>:
 8010c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c28:	460c      	mov	r4, r1
 8010c2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c30:	4299      	cmp	r1, r3
 8010c32:	d11d      	bne.n	8010c70 <__submore+0x4c>
 8010c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c38:	f7ff f8f0 	bl	800fe1c <_malloc_r>
 8010c3c:	b918      	cbnz	r0, 8010c46 <__submore+0x22>
 8010c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8010c4c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010c50:	6360      	str	r0, [r4, #52]	; 0x34
 8010c52:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010c56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010c5a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010c5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010c62:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010c66:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010c6a:	6020      	str	r0, [r4, #0]
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	e7e8      	b.n	8010c42 <__submore+0x1e>
 8010c70:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010c72:	0077      	lsls	r7, r6, #1
 8010c74:	463a      	mov	r2, r7
 8010c76:	f000 f91a 	bl	8010eae <_realloc_r>
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d0de      	beq.n	8010c3e <__submore+0x1a>
 8010c80:	eb00 0806 	add.w	r8, r0, r6
 8010c84:	4601      	mov	r1, r0
 8010c86:	4632      	mov	r2, r6
 8010c88:	4640      	mov	r0, r8
 8010c8a:	f7fb f969 	bl	800bf60 <memcpy>
 8010c8e:	f8c4 8000 	str.w	r8, [r4]
 8010c92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010c96:	e7e9      	b.n	8010c6c <__submore+0x48>

08010c98 <__swbuf_r>:
 8010c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	4614      	mov	r4, r2
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	b118      	cbz	r0, 8010caa <__swbuf_r+0x12>
 8010ca2:	6983      	ldr	r3, [r0, #24]
 8010ca4:	b90b      	cbnz	r3, 8010caa <__swbuf_r+0x12>
 8010ca6:	f7fd fffb 	bl	800eca0 <__sinit>
 8010caa:	4b21      	ldr	r3, [pc, #132]	; (8010d30 <__swbuf_r+0x98>)
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d12a      	bne.n	8010d06 <__swbuf_r+0x6e>
 8010cb0:	686c      	ldr	r4, [r5, #4]
 8010cb2:	69a3      	ldr	r3, [r4, #24]
 8010cb4:	60a3      	str	r3, [r4, #8]
 8010cb6:	89a3      	ldrh	r3, [r4, #12]
 8010cb8:	071a      	lsls	r2, r3, #28
 8010cba:	d52e      	bpl.n	8010d1a <__swbuf_r+0x82>
 8010cbc:	6923      	ldr	r3, [r4, #16]
 8010cbe:	b363      	cbz	r3, 8010d1a <__swbuf_r+0x82>
 8010cc0:	6923      	ldr	r3, [r4, #16]
 8010cc2:	6820      	ldr	r0, [r4, #0]
 8010cc4:	1ac0      	subs	r0, r0, r3
 8010cc6:	6963      	ldr	r3, [r4, #20]
 8010cc8:	b2f6      	uxtb	r6, r6
 8010cca:	4283      	cmp	r3, r0
 8010ccc:	4637      	mov	r7, r6
 8010cce:	dc04      	bgt.n	8010cda <__swbuf_r+0x42>
 8010cd0:	4621      	mov	r1, r4
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f7fd ff7a 	bl	800ebcc <_fflush_r>
 8010cd8:	bb28      	cbnz	r0, 8010d26 <__swbuf_r+0x8e>
 8010cda:	68a3      	ldr	r3, [r4, #8]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	60a3      	str	r3, [r4, #8]
 8010ce0:	6823      	ldr	r3, [r4, #0]
 8010ce2:	1c5a      	adds	r2, r3, #1
 8010ce4:	6022      	str	r2, [r4, #0]
 8010ce6:	701e      	strb	r6, [r3, #0]
 8010ce8:	6963      	ldr	r3, [r4, #20]
 8010cea:	3001      	adds	r0, #1
 8010cec:	4283      	cmp	r3, r0
 8010cee:	d004      	beq.n	8010cfa <__swbuf_r+0x62>
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	07db      	lsls	r3, r3, #31
 8010cf4:	d519      	bpl.n	8010d2a <__swbuf_r+0x92>
 8010cf6:	2e0a      	cmp	r6, #10
 8010cf8:	d117      	bne.n	8010d2a <__swbuf_r+0x92>
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f7fd ff65 	bl	800ebcc <_fflush_r>
 8010d02:	b190      	cbz	r0, 8010d2a <__swbuf_r+0x92>
 8010d04:	e00f      	b.n	8010d26 <__swbuf_r+0x8e>
 8010d06:	4b0b      	ldr	r3, [pc, #44]	; (8010d34 <__swbuf_r+0x9c>)
 8010d08:	429c      	cmp	r4, r3
 8010d0a:	d101      	bne.n	8010d10 <__swbuf_r+0x78>
 8010d0c:	68ac      	ldr	r4, [r5, #8]
 8010d0e:	e7d0      	b.n	8010cb2 <__swbuf_r+0x1a>
 8010d10:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <__swbuf_r+0xa0>)
 8010d12:	429c      	cmp	r4, r3
 8010d14:	bf08      	it	eq
 8010d16:	68ec      	ldreq	r4, [r5, #12]
 8010d18:	e7cb      	b.n	8010cb2 <__swbuf_r+0x1a>
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f000 f81b 	bl	8010d58 <__swsetup_r>
 8010d22:	2800      	cmp	r0, #0
 8010d24:	d0cc      	beq.n	8010cc0 <__swbuf_r+0x28>
 8010d26:	f04f 37ff 	mov.w	r7, #4294967295
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	080121b0 	.word	0x080121b0
 8010d34:	080121d0 	.word	0x080121d0
 8010d38:	08012190 	.word	0x08012190

08010d3c <__ascii_wctomb>:
 8010d3c:	b149      	cbz	r1, 8010d52 <__ascii_wctomb+0x16>
 8010d3e:	2aff      	cmp	r2, #255	; 0xff
 8010d40:	bf85      	ittet	hi
 8010d42:	238a      	movhi	r3, #138	; 0x8a
 8010d44:	6003      	strhi	r3, [r0, #0]
 8010d46:	700a      	strbls	r2, [r1, #0]
 8010d48:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d4c:	bf98      	it	ls
 8010d4e:	2001      	movls	r0, #1
 8010d50:	4770      	bx	lr
 8010d52:	4608      	mov	r0, r1
 8010d54:	4770      	bx	lr
	...

08010d58 <__swsetup_r>:
 8010d58:	4b32      	ldr	r3, [pc, #200]	; (8010e24 <__swsetup_r+0xcc>)
 8010d5a:	b570      	push	{r4, r5, r6, lr}
 8010d5c:	681d      	ldr	r5, [r3, #0]
 8010d5e:	4606      	mov	r6, r0
 8010d60:	460c      	mov	r4, r1
 8010d62:	b125      	cbz	r5, 8010d6e <__swsetup_r+0x16>
 8010d64:	69ab      	ldr	r3, [r5, #24]
 8010d66:	b913      	cbnz	r3, 8010d6e <__swsetup_r+0x16>
 8010d68:	4628      	mov	r0, r5
 8010d6a:	f7fd ff99 	bl	800eca0 <__sinit>
 8010d6e:	4b2e      	ldr	r3, [pc, #184]	; (8010e28 <__swsetup_r+0xd0>)
 8010d70:	429c      	cmp	r4, r3
 8010d72:	d10f      	bne.n	8010d94 <__swsetup_r+0x3c>
 8010d74:	686c      	ldr	r4, [r5, #4]
 8010d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	0715      	lsls	r5, r2, #28
 8010d7e:	d42c      	bmi.n	8010dda <__swsetup_r+0x82>
 8010d80:	06d0      	lsls	r0, r2, #27
 8010d82:	d411      	bmi.n	8010da8 <__swsetup_r+0x50>
 8010d84:	2209      	movs	r2, #9
 8010d86:	6032      	str	r2, [r6, #0]
 8010d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d8c:	81a3      	strh	r3, [r4, #12]
 8010d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d92:	e03e      	b.n	8010e12 <__swsetup_r+0xba>
 8010d94:	4b25      	ldr	r3, [pc, #148]	; (8010e2c <__swsetup_r+0xd4>)
 8010d96:	429c      	cmp	r4, r3
 8010d98:	d101      	bne.n	8010d9e <__swsetup_r+0x46>
 8010d9a:	68ac      	ldr	r4, [r5, #8]
 8010d9c:	e7eb      	b.n	8010d76 <__swsetup_r+0x1e>
 8010d9e:	4b24      	ldr	r3, [pc, #144]	; (8010e30 <__swsetup_r+0xd8>)
 8010da0:	429c      	cmp	r4, r3
 8010da2:	bf08      	it	eq
 8010da4:	68ec      	ldreq	r4, [r5, #12]
 8010da6:	e7e6      	b.n	8010d76 <__swsetup_r+0x1e>
 8010da8:	0751      	lsls	r1, r2, #29
 8010daa:	d512      	bpl.n	8010dd2 <__swsetup_r+0x7a>
 8010dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dae:	b141      	cbz	r1, 8010dc2 <__swsetup_r+0x6a>
 8010db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010db4:	4299      	cmp	r1, r3
 8010db6:	d002      	beq.n	8010dbe <__swsetup_r+0x66>
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7fe ffe1 	bl	800fd80 <_free_r>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010dc8:	81a3      	strh	r3, [r4, #12]
 8010dca:	2300      	movs	r3, #0
 8010dcc:	6063      	str	r3, [r4, #4]
 8010dce:	6923      	ldr	r3, [r4, #16]
 8010dd0:	6023      	str	r3, [r4, #0]
 8010dd2:	89a3      	ldrh	r3, [r4, #12]
 8010dd4:	f043 0308 	orr.w	r3, r3, #8
 8010dd8:	81a3      	strh	r3, [r4, #12]
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	b94b      	cbnz	r3, 8010df2 <__swsetup_r+0x9a>
 8010dde:	89a3      	ldrh	r3, [r4, #12]
 8010de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010de8:	d003      	beq.n	8010df2 <__swsetup_r+0x9a>
 8010dea:	4621      	mov	r1, r4
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7fe fb5f 	bl	800f4b0 <__smakebuf_r>
 8010df2:	89a2      	ldrh	r2, [r4, #12]
 8010df4:	f012 0301 	ands.w	r3, r2, #1
 8010df8:	d00c      	beq.n	8010e14 <__swsetup_r+0xbc>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	60a3      	str	r3, [r4, #8]
 8010dfe:	6963      	ldr	r3, [r4, #20]
 8010e00:	425b      	negs	r3, r3
 8010e02:	61a3      	str	r3, [r4, #24]
 8010e04:	6923      	ldr	r3, [r4, #16]
 8010e06:	b953      	cbnz	r3, 8010e1e <__swsetup_r+0xc6>
 8010e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010e10:	d1ba      	bne.n	8010d88 <__swsetup_r+0x30>
 8010e12:	bd70      	pop	{r4, r5, r6, pc}
 8010e14:	0792      	lsls	r2, r2, #30
 8010e16:	bf58      	it	pl
 8010e18:	6963      	ldrpl	r3, [r4, #20]
 8010e1a:	60a3      	str	r3, [r4, #8]
 8010e1c:	e7f2      	b.n	8010e04 <__swsetup_r+0xac>
 8010e1e:	2000      	movs	r0, #0
 8010e20:	e7f7      	b.n	8010e12 <__swsetup_r+0xba>
 8010e22:	bf00      	nop
 8010e24:	20000014 	.word	0x20000014
 8010e28:	080121b0 	.word	0x080121b0
 8010e2c:	080121d0 	.word	0x080121d0
 8010e30:	08012190 	.word	0x08012190

08010e34 <_fstat_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4c07      	ldr	r4, [pc, #28]	; (8010e54 <_fstat_r+0x20>)
 8010e38:	2300      	movs	r3, #0
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	4608      	mov	r0, r1
 8010e3e:	4611      	mov	r1, r2
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	f7f3 ff3e 	bl	8004cc2 <_fstat>
 8010e46:	1c43      	adds	r3, r0, #1
 8010e48:	d102      	bne.n	8010e50 <_fstat_r+0x1c>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	b103      	cbz	r3, 8010e50 <_fstat_r+0x1c>
 8010e4e:	602b      	str	r3, [r5, #0]
 8010e50:	bd38      	pop	{r3, r4, r5, pc}
 8010e52:	bf00      	nop
 8010e54:	20002740 	.word	0x20002740

08010e58 <_isatty_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4c06      	ldr	r4, [pc, #24]	; (8010e74 <_isatty_r+0x1c>)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4605      	mov	r5, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	f7f3 ff3d 	bl	8004ce2 <_isatty>
 8010e68:	1c43      	adds	r3, r0, #1
 8010e6a:	d102      	bne.n	8010e72 <_isatty_r+0x1a>
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	b103      	cbz	r3, 8010e72 <_isatty_r+0x1a>
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	20002740 	.word	0x20002740

08010e78 <memmove>:
 8010e78:	4288      	cmp	r0, r1
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	eb01 0302 	add.w	r3, r1, r2
 8010e80:	d807      	bhi.n	8010e92 <memmove+0x1a>
 8010e82:	1e42      	subs	r2, r0, #1
 8010e84:	4299      	cmp	r1, r3
 8010e86:	d00a      	beq.n	8010e9e <memmove+0x26>
 8010e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010e90:	e7f8      	b.n	8010e84 <memmove+0xc>
 8010e92:	4283      	cmp	r3, r0
 8010e94:	d9f5      	bls.n	8010e82 <memmove+0xa>
 8010e96:	1881      	adds	r1, r0, r2
 8010e98:	1ad2      	subs	r2, r2, r3
 8010e9a:	42d3      	cmn	r3, r2
 8010e9c:	d100      	bne.n	8010ea0 <memmove+0x28>
 8010e9e:	bd10      	pop	{r4, pc}
 8010ea0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ea4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010ea8:	e7f7      	b.n	8010e9a <memmove+0x22>

08010eaa <__malloc_lock>:
 8010eaa:	4770      	bx	lr

08010eac <__malloc_unlock>:
 8010eac:	4770      	bx	lr

08010eae <_realloc_r>:
 8010eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb0:	4607      	mov	r7, r0
 8010eb2:	4614      	mov	r4, r2
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	b921      	cbnz	r1, 8010ec2 <_realloc_r+0x14>
 8010eb8:	4611      	mov	r1, r2
 8010eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ebe:	f7fe bfad 	b.w	800fe1c <_malloc_r>
 8010ec2:	b922      	cbnz	r2, 8010ece <_realloc_r+0x20>
 8010ec4:	f7fe ff5c 	bl	800fd80 <_free_r>
 8010ec8:	4625      	mov	r5, r4
 8010eca:	4628      	mov	r0, r5
 8010ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ece:	f000 f814 	bl	8010efa <_malloc_usable_size_r>
 8010ed2:	42a0      	cmp	r0, r4
 8010ed4:	d20f      	bcs.n	8010ef6 <_realloc_r+0x48>
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	4638      	mov	r0, r7
 8010eda:	f7fe ff9f 	bl	800fe1c <_malloc_r>
 8010ede:	4605      	mov	r5, r0
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0f2      	beq.n	8010eca <_realloc_r+0x1c>
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4622      	mov	r2, r4
 8010ee8:	f7fb f83a 	bl	800bf60 <memcpy>
 8010eec:	4631      	mov	r1, r6
 8010eee:	4638      	mov	r0, r7
 8010ef0:	f7fe ff46 	bl	800fd80 <_free_r>
 8010ef4:	e7e9      	b.n	8010eca <_realloc_r+0x1c>
 8010ef6:	4635      	mov	r5, r6
 8010ef8:	e7e7      	b.n	8010eca <_realloc_r+0x1c>

08010efa <_malloc_usable_size_r>:
 8010efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010efe:	1f18      	subs	r0, r3, #4
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	bfbc      	itt	lt
 8010f04:	580b      	ldrlt	r3, [r1, r0]
 8010f06:	18c0      	addlt	r0, r0, r3
 8010f08:	4770      	bx	lr
	...

08010f0c <_init>:
 8010f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0e:	bf00      	nop
 8010f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f12:	bc08      	pop	{r3}
 8010f14:	469e      	mov	lr, r3
 8010f16:	4770      	bx	lr

08010f18 <_fini>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	bf00      	nop
 8010f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f1e:	bc08      	pop	{r3}
 8010f20:	469e      	mov	lr, r3
 8010f22:	4770      	bx	lr
